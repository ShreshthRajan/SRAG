[
  {
    "problem_id": "HumanEval/136",
    "question": "\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n",
    "solutions": [
      "    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n"
    ],
    "starter_code": "\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 13
  },
  {
    "problem_id": "HumanEval/10",
    "question": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n",
    "solutions": [
      "    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n"
    ],
    "starter_code": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 6
  },
  {
    "problem_id": "HumanEval/63",
    "question": "\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n",
    "solutions": [
      "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n"
    ],
    "starter_code": "\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 8
  },
  {
    "problem_id": "HumanEval/3",
    "question": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n",
    "solutions": [
      "    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n"
    ],
    "starter_code": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 7
  },
  {
    "problem_id": "HumanEval/4",
    "question": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n",
    "solutions": [
      "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n"
    ],
    "starter_code": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 4
  },
  {
    "problem_id": "HumanEval/5",
    "question": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n",
    "solutions": [
      "    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n"
    ],
    "starter_code": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 4
  },
  {
    "problem_id": "HumanEval/8",
    "question": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n",
    "solutions": [
      "    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n"
    ],
    "starter_code": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 6
  },
  {
    "problem_id": "HumanEval/9",
    "question": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n",
    "solutions": [
      "    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n"
    ],
    "starter_code": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 5
  },
  {
    "problem_id": "HumanEval/11",
    "question": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n",
    "solutions": [
      "    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n"
    ],
    "starter_code": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 4
  },
  {
    "problem_id": "HumanEval/14",
    "question": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n",
    "solutions": [
      "    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n"
    ],
    "starter_code": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 4
  },
  {
    "problem_id": "HumanEval/17",
    "question": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n",
    "solutions": [
      "    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n"
    ],
    "starter_code": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 6
  },
  {
    "problem_id": "HumanEval/18",
    "question": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n",
    "solutions": [
      "    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n"
    ],
    "starter_code": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 5
  },
  {
    "problem_id": "HumanEval/21",
    "question": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n",
    "solutions": [
      "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n"
    ],
    "starter_code": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 6
  },
  {
    "problem_id": "HumanEval/26",
    "question": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n",
    "solutions": [
      "    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n"
    ],
    "starter_code": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 4
  },
  {
    "problem_id": "HumanEval/31",
    "question": "\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n",
    "solutions": [
      "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n"
    ],
    "starter_code": "\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 14
  },
  {
    "problem_id": "HumanEval/37",
    "question": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n",
    "solutions": [
      "    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n"
    ],
    "starter_code": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 4
  },
  {
    "problem_id": "HumanEval/48",
    "question": "\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n",
    "solutions": [
      "    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n"
    ],
    "starter_code": "\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 8
  },
  {
    "problem_id": "HumanEval/56",
    "question": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n",
    "solutions": [
      "    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n"
    ],
    "starter_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 13
  },
  {
    "problem_id": "HumanEval/61",
    "question": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n",
    "solutions": [
      "    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n"
    ],
    "starter_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 13
  },
  {
    "problem_id": "HumanEval/64",
    "question": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n",
    "solutions": [
      "    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n"
    ],
    "starter_code": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 10
  },
  {
    "problem_id": "HumanEval/65",
    "question": "\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n",
    "solutions": [
      "    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n"
    ],
    "starter_code": "\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 8
  },
  {
    "problem_id": "HumanEval/67",
    "question": "\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n",
    "solutions": [
      "    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n"
    ],
    "starter_code": "\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 8
  },
  {
    "problem_id": "HumanEval/68",
    "question": "\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n",
    "solutions": [
      "    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n"
    ],
    "starter_code": "\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 13
  },
  {
    "problem_id": "HumanEval/70",
    "question": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n",
    "solutions": [
      "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n"
    ],
    "starter_code": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 11
  },
  {
    "problem_id": "HumanEval/71",
    "question": "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n",
    "solutions": [
      "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n"
    ],
    "starter_code": "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 12
  },
  {
    "problem_id": "HumanEval/72",
    "question": "\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n",
    "solutions": [
      "    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n"
    ],
    "starter_code": "\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 7
  },
  {
    "problem_id": "HumanEval/73",
    "question": "\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n",
    "solutions": [
      "    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n"
    ],
    "starter_code": "\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 9
  },
  {
    "problem_id": "HumanEval/103",
    "question": "\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n",
    "solutions": [
      "    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n"
    ],
    "starter_code": "\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 13
  },
  {
    "problem_id": "HumanEval/150",
    "question": "\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n",
    "solutions": [
      "    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n"
    ],
    "starter_code": "\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 11
  },
  {
    "problem_id": "HumanEval/163",
    "question": "\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n",
    "solutions": [
      "    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n"
    ],
    "starter_code": "\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 7
  },
  {
    "problem_id": "mbpp_605",
    "question": "Write a function to check if the given integer is a prime number.",
    "solutions": [
      "def prime_num(num):\r\n  if num >=1:\r\n   for i in range(2, num//2):\r\n     if (num % i) == 0:\r\n                return False\r\n     else:\r\n                return True\r\n  else:\r\n          return False"
    ],
    "starter_code": "def solution():\n    # Write a function to check if the given integer is a prime number.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_636",
    "question": "Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.",
    "solutions": [
      "def Check_Solution(a,b,c): \r\n    if (a == c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); "
    ],
    "starter_code": "def solution():\n    # Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_653",
    "question": "Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.",
    "solutions": [
      "from collections import defaultdict\r\ndef grouping_dictionary(l):\r\n    d = defaultdict(list)\r\n    for k, v in l:\r\n        d[k].append(v)\r\n    return d"
    ],
    "starter_code": "def solution():\n    # Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_663",
    "question": "Write a function to find the largest possible value of k such that k modulo x is y.",
    "solutions": [
      "import sys \r\ndef find_max_val(n, x, y): \r\n\tans = -sys.maxsize \r\n\tfor k in range(n + 1): \r\n\t\tif (k % x == y): \r\n\t\t\tans = max(ans, k) \r\n\treturn (ans if (ans >= 0 and\r\n\t\t\t\t\tans <= n) else -1) "
    ],
    "starter_code": "def solution():\n    # Write a function to find the largest possible value of k such that k modulo x is y.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_672",
    "question": "Write a function to find maximum of three numbers.",
    "solutions": [
      "def max_of_three(num1,num2,num3): \r\n    if (num1 >= num2) and (num1 >= num3):\r\n       lnum = num1\r\n    elif (num2 >= num1) and (num2 >= num3):\r\n       lnum = num2\r\n    else:\r\n       lnum = num3\r\n    return lnum"
    ],
    "starter_code": "def solution():\n    # Write a function to find maximum of three numbers.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_681",
    "question": "Write a python function to find the smallest prime divisor of a number.",
    "solutions": [
      "def smallest_Divisor(n): \r\n    if (n % 2 == 0): \r\n        return 2; \r\n    i = 3;  \r\n    while (i*i <= n): \r\n        if (n % i == 0): \r\n            return i; \r\n        i += 2; \r\n    return n; "
    ],
    "starter_code": "def solution():\n    # Write a python function to find the smallest prime divisor of a number.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_698",
    "question": "Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.",
    "solutions": [
      "def sort_dict_item(test_dict):\r\n  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}\r\n  return  (res) \r\n"
    ],
    "starter_code": "def solution():\n    # Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_722",
    "question": "Write a function to filter the height and width of students which are stored in a dictionary.",
    "solutions": [
      "def filter_data(students,h,w):\r\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\r\n    return result    "
    ],
    "starter_code": "def solution():\n    # Write a function to filter the height and width of students which are stored in a dictionary.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_740",
    "question": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements.",
    "solutions": [
      "def tuple_to_dict(test_tup):\r\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\r\n  return (res) "
    ],
    "starter_code": "def solution():\n    # Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_745",
    "question": "Write a function to find numbers within a given range where every number is divisible by every digit it contains.",
    "solutions": [
      "def divisible_by_digits(startnum, endnum):\r\n    return [n for n in range(startnum, endnum+1) \\\r\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]"
    ],
    "starter_code": "def solution():\n    # Write a function to find numbers within a given range where every number is divisible by every digit it contains.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_840",
    "question": "Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.",
    "solutions": [
      "def Check_Solution(a,b,c):  \r\n    if b == 0:  \r\n        return (\"Yes\")  \r\n    else: \r\n        return (\"No\")  "
    ],
    "starter_code": "def solution():\n    # Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "HumanEval/49",
    "question": "\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n",
    "solutions": [
      "    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n"
    ],
    "starter_code": "\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 8
  },
  {
    "problem_id": "HumanEval/55",
    "question": "\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n",
    "solutions": [
      "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n"
    ],
    "starter_code": "\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 6
  },
  {
    "problem_id": "mbpp_609",
    "question": "Write a python function to find minimum possible value for the given periodic function.",
    "solutions": [
      "def floor_Min(A,B,N):\r\n    x = max(B - 1,N)\r\n    return (A*x) // B"
    ],
    "starter_code": "def solution():\n    # Write a python function to find minimum possible value for the given periodic function.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_924",
    "question": "Write a function to find maximum of two numbers.",
    "solutions": [
      "def max_of_two( x, y ):\r\n    if x > y:\r\n        return x\r\n    return y"
    ],
    "starter_code": "def solution():\n    # Write a function to find maximum of two numbers.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_968",
    "question": "Write a python function to find maximum possible value for the given periodic function.",
    "solutions": [
      "def floor_Max(A,B,N):\r\n    x = min(B - 1,N)\r\n    return (A*x) // B"
    ],
    "starter_code": "def solution():\n    # Write a python function to find maximum possible value for the given periodic function.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_970",
    "question": "Write a function to find minimum of two numbers.",
    "solutions": [
      "def min_of_two( x, y ):\r\n    if x < y:\r\n        return x\r\n    return y"
    ],
    "starter_code": "def solution():\n    # Write a function to find minimum of two numbers.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "HumanEval/76",
    "question": "\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n",
    "solutions": [
      "    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n"
    ],
    "starter_code": "\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 21
  },
  {
    "problem_id": "HumanEval/78",
    "question": "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n",
    "solutions": [
      "    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n"
    ],
    "starter_code": "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 8
  },
  {
    "problem_id": "HumanEval/80",
    "question": "\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n",
    "solutions": [
      "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n"
    ],
    "starter_code": "\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 9
  },
  {
    "problem_id": "HumanEval/82",
    "question": "\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n",
    "solutions": [
      "    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n"
    ],
    "starter_code": "\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 17
  },
  {
    "problem_id": "HumanEval/89",
    "question": "\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n",
    "solutions": [
      "    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n"
    ],
    "starter_code": "\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 17
  },
  {
    "problem_id": "HumanEval/91",
    "question": "\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n",
    "solutions": [
      "    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n"
    ],
    "starter_code": "\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 9
  },
  {
    "problem_id": "HumanEval/92",
    "question": "\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n",
    "solutions": [
      "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n"
    ],
    "starter_code": "\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 21
  },
  {
    "problem_id": "HumanEval/0",
    "question": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n",
    "solutions": [
      "    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n"
    ],
    "starter_code": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 8
  },
  {
    "problem_id": "HumanEval/1",
    "question": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n",
    "solutions": [
      "    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n"
    ],
    "starter_code": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 5
  },
  {
    "problem_id": "HumanEval/12",
    "question": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n",
    "solutions": [
      "    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n"
    ],
    "starter_code": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 4
  },
  {
    "problem_id": "HumanEval/19",
    "question": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n",
    "solutions": [
      "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n"
    ],
    "starter_code": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 6
  },
  {
    "problem_id": "HumanEval/20",
    "question": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n",
    "solutions": [
      "    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n"
    ],
    "starter_code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 6
  },
  {
    "problem_id": "HumanEval/25",
    "question": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n",
    "solutions": [
      "    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n"
    ],
    "starter_code": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 9
  },
  {
    "problem_id": "HumanEval/32",
    "question": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n",
    "solutions": [
      "    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n"
    ],
    "starter_code": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 2
  },
  {
    "problem_id": "HumanEval/36",
    "question": "\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n",
    "solutions": [
      "    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n"
    ],
    "starter_code": "\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 9
  },
  {
    "problem_id": "HumanEval/39",
    "question": "\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n",
    "solutions": [
      "    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n"
    ],
    "starter_code": "\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 11
  },
  {
    "problem_id": "HumanEval/40",
    "question": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n",
    "solutions": [
      "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"
    ],
    "starter_code": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 10
  },
  {
    "problem_id": "HumanEval/43",
    "question": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n",
    "solutions": [
      "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n"
    ],
    "starter_code": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 10
  },
  {
    "problem_id": "HumanEval/46",
    "question": "\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n",
    "solutions": [
      "    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n"
    ],
    "starter_code": "\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 5
  },
  {
    "problem_id": "HumanEval/58",
    "question": "\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n",
    "solutions": [
      "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n"
    ],
    "starter_code": "\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 5
  },
  {
    "problem_id": "HumanEval/69",
    "question": "\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n",
    "solutions": [
      "    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n"
    ],
    "starter_code": "\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 26
  },
  {
    "problem_id": "HumanEval/74",
    "question": "\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n",
    "solutions": [
      "    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n"
    ],
    "starter_code": "\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 14
  },
  {
    "problem_id": "HumanEval/87",
    "question": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n",
    "solutions": [
      "    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n"
    ],
    "starter_code": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 8
  },
  {
    "problem_id": "HumanEval/93",
    "question": "\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n",
    "solutions": [
      "    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n"
    ],
    "starter_code": "\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 11
  },
  {
    "problem_id": "HumanEval/96",
    "question": "\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n",
    "solutions": [
      "    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n"
    ],
    "starter_code": "\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 11
  },
  {
    "problem_id": "HumanEval/99",
    "question": "\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n",
    "solutions": [
      "    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n"
    ],
    "starter_code": "\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 6
  },
  {
    "problem_id": "HumanEval/104",
    "question": "\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n",
    "solutions": [
      "    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n"
    ],
    "starter_code": "\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 6
  },
  {
    "problem_id": "HumanEval/105",
    "question": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n",
    "solutions": [
      "    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n"
    ],
    "starter_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 10
  },
  {
    "problem_id": "HumanEval/106",
    "question": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n",
    "solutions": [
      "    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n"
    ],
    "starter_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 5
  },
  {
    "problem_id": "HumanEval/109",
    "question": "\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n",
    "solutions": [
      "    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n"
    ],
    "starter_code": "\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 8
  },
  {
    "problem_id": "HumanEval/110",
    "question": "\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n",
    "solutions": [
      "    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n"
    ],
    "starter_code": "\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 8
  },
  {
    "problem_id": "HumanEval/111",
    "question": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n",
    "solutions": [
      "    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n"
    ],
    "starter_code": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 17
  },
  {
    "problem_id": "HumanEval/113",
    "question": "\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n",
    "solutions": [
      "    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n"
    ],
    "starter_code": "\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 6
  },
  {
    "problem_id": "HumanEval/114",
    "question": "\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n",
    "solutions": [
      "    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n"
    ],
    "starter_code": "\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 15
  },
  {
    "problem_id": "HumanEval/117",
    "question": "\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n",
    "solutions": [
      "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n"
    ],
    "starter_code": "\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 8
  },
  {
    "problem_id": "HumanEval/119",
    "question": "\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n",
    "solutions": [
      "    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n"
    ],
    "starter_code": "\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 13
  },
  {
    "problem_id": "HumanEval/123",
    "question": "\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n",
    "solutions": [
      "    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n"
    ],
    "starter_code": "\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 7
  },
  {
    "problem_id": "HumanEval/124",
    "question": "\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n",
    "solutions": [
      "    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n"
    ],
    "starter_code": "\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 17
  },
  {
    "problem_id": "HumanEval/126",
    "question": "\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n",
    "solutions": [
      "    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n"
    ],
    "starter_code": "\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 22
  },
  {
    "problem_id": "HumanEval/127",
    "question": "\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n",
    "solutions": [
      "    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n"
    ],
    "starter_code": "\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 9
  },
  {
    "problem_id": "HumanEval/131",
    "question": "\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n",
    "solutions": [
      "    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n"
    ],
    "starter_code": "\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 8
  },
  {
    "problem_id": "HumanEval/132",
    "question": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n",
    "solutions": [
      "    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n"
    ],
    "starter_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 17
  },
  {
    "problem_id": "HumanEval/139",
    "question": "\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n",
    "solutions": [
      "    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n"
    ],
    "starter_code": "\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 5
  },
  {
    "problem_id": "HumanEval/140",
    "question": "\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n",
    "solutions": [
      "    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n"
    ],
    "starter_code": "\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 11
  },
  {
    "problem_id": "HumanEval/141",
    "question": "\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n",
    "solutions": [
      "    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n"
    ],
    "starter_code": "\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 27
  },
  {
    "problem_id": "HumanEval/142",
    "question": "\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n",
    "solutions": [
      "    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n"
    ],
    "starter_code": "\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 12
  },
  {
    "problem_id": "HumanEval/143",
    "question": "\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n",
    "solutions": [
      "    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n"
    ],
    "starter_code": "\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 8
  },
  {
    "problem_id": "HumanEval/147",
    "question": "\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n",
    "solutions": [
      "    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n"
    ],
    "starter_code": "\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 5
  },
  {
    "problem_id": "HumanEval/153",
    "question": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n",
    "solutions": [
      "    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n"
    ],
    "starter_code": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 10
  },
  {
    "problem_id": "HumanEval/154",
    "question": "\ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n",
    "solutions": [
      "    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n"
    ],
    "starter_code": "\ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 11
  },
  {
    "problem_id": "HumanEval/156",
    "question": "\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n",
    "solutions": [
      "    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n"
    ],
    "starter_code": "\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 16
  },
  {
    "problem_id": "HumanEval/158",
    "question": "\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n",
    "solutions": [
      "    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n"
    ],
    "starter_code": "\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 11
  },
  {
    "problem_id": "HumanEval/161",
    "question": "\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n",
    "solutions": [
      "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n"
    ],
    "starter_code": "\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 9
  },
  {
    "problem_id": "mbpp_603",
    "question": "Write a function to get a lucid number smaller than or equal to n.",
    "solutions": [
      "def get_ludic(n):\r\n\tludics = []\r\n\tfor i in range(1, n + 1):\r\n\t\tludics.append(i)\r\n\tindex = 1\r\n\twhile(index != len(ludics)):\r\n\t\tfirst_ludic = ludics[index]\r\n\t\tremove_index = index + first_ludic\r\n\t\twhile(remove_index < len(ludics)):\r\n\t\t\tludics.remove(ludics[remove_index])\r\n\t\t\tremove_index = remove_index + first_ludic - 1\r\n\t\tindex += 1\r\n\treturn ludics"
    ],
    "starter_code": "def solution():\n    # Write a function to get a lucid number smaller than or equal to n.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_617",
    "question": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.",
    "solutions": [
      "def min_Jumps(a, b, d): \r\n    temp = a \r\n    a = min(a, b) \r\n    b = max(temp, b) \r\n    if (d >= b): \r\n        return (d + b - 1) / b \r\n    if (d == 0): \r\n        return 0\r\n    if (d == a): \r\n        return 1\r\n    else:\r\n        return 2"
    ],
    "starter_code": "def solution():\n    # Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_657",
    "question": "Write a python function to find the first digit in factorial of a given number.",
    "solutions": [
      "import math \r\ndef first_Digit(n) : \r\n    fact = 1\r\n    for i in range(2,n + 1) : \r\n        fact = fact * i \r\n        while (fact % 10 == 0) :  \r\n            fact = int(fact / 10) \r\n    while (fact >= 10) : \r\n        fact = int(fact / 10) \r\n    return math.floor(fact) "
    ],
    "starter_code": "def solution():\n    # Write a python function to find the first digit in factorial of a given number.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_664",
    "question": "Write a python function to find the average of even numbers till a given even number.",
    "solutions": [
      "def average_Even(n) : \r\n    if (n% 2!= 0) : \r\n        return (\"Invalid Input\") \r\n        return -1  \r\n    sm = 0\r\n    count = 0\r\n    while (n>= 2) : \r\n        count = count+1\r\n        sm = sm+n \r\n        n = n-2\r\n    return sm // count "
    ],
    "starter_code": "def solution():\n    # Write a python function to find the average of even numbers till a given even number.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_685",
    "question": "Write a python function to find sum of prime numbers between 1 to n.",
    "solutions": [
      "def sum_Of_Primes(n): \r\n    prime = [True] * (n + 1)  \r\n    p = 2\r\n    while p * p <= n: \r\n        if prime[p] == True:  \r\n            i = p * 2\r\n            while i <= n: \r\n                prime[i] = False\r\n                i += p \r\n        p += 1    \r\n    sum = 0\r\n    for i in range (2,n + 1): \r\n        if(prime[i]): \r\n            sum += i \r\n    return sum"
    ],
    "starter_code": "def solution():\n    # Write a python function to find sum of prime numbers between 1 to n.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_687",
    "question": "Write a function to find the greatest common divisor (gcd) of two integers by using recursion.",
    "solutions": [
      "def recur_gcd(a, b):\r\n\tlow = min(a, b)\r\n\thigh = max(a, b)\r\n\tif low == 0:\r\n\t\treturn high\r\n\telif low == 1:\r\n\t\treturn 1\r\n\telse:\r\n\t\treturn recur_gcd(low, high%low)"
    ],
    "starter_code": "def solution():\n    # Write a function to find the greatest common divisor (gcd) of two integers by using recursion.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_692",
    "question": "Write a python function to find the last two digits in factorial of a given number.",
    "solutions": [
      "def last_Two_Digits(N): \r\n    if (N >= 10): \r\n        return\r\n    fac = 1\r\n    for i in range(1,N + 1): \r\n        fac = (fac * i) % 100\r\n    return (fac) "
    ],
    "starter_code": "def solution():\n    # Write a python function to find the last two digits in factorial of a given number.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_707",
    "question": "Write a python function to count the total set bits from 1 to n.",
    "solutions": [
      "def count_Set_Bits(n) :  \r\n    n += 1; \r\n    powerOf2 = 2;   \r\n    cnt = n // 2;  \r\n    while (powerOf2 <= n) : \r\n        totalPairs = n // powerOf2;  \r\n        cnt += (totalPairs // 2) * powerOf2;  \r\n        if (totalPairs & 1) : \r\n            cnt += (n % powerOf2) \r\n        else : \r\n            cnt += 0\r\n        powerOf2 <<= 1;    \r\n    return cnt;  "
    ],
    "starter_code": "def solution():\n    # Write a python function to count the total set bits from 1 to n.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_711",
    "question": "Write a python function to check whether the product of digits of a number at even and odd places is equal or not.",
    "solutions": [
      "def product_Equal(n): \r\n    if n < 10: \r\n        return False\r\n    prodOdd = 1; prodEven = 1\r\n    while n > 0: \r\n        digit = n % 10\r\n        prodOdd *= digit \r\n        n = n//10\r\n        if n == 0: \r\n            break; \r\n        digit = n % 10\r\n        prodEven *= digit \r\n        n = n//10\r\n    if prodOdd == prodEven: \r\n        return True\r\n    return False"
    ],
    "starter_code": "def solution():\n    # Write a python function to check whether the product of digits of a number at even and odd places is equal or not.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_714",
    "question": "Write a python function to count the number of distinct power of prime factor of given number.",
    "solutions": [
      "def count_Fac(n):  \r\n    m = n \r\n    count = 0\r\n    i = 2\r\n    while((i * i) <= m): \r\n        total = 0\r\n        while (n % i == 0): \r\n            n /= i \r\n            total += 1 \r\n        temp = 0\r\n        j = 1\r\n        while((temp + j) <= total): \r\n            temp += j \r\n            count += 1\r\n            j += 1 \r\n        i += 1\r\n    if (n != 1): \r\n        count += 1 \r\n    return count "
    ],
    "starter_code": "def solution():\n    # Write a python function to count the number of distinct power of prime factor of given number.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_733",
    "question": "Write a function to find the index of the first occurrence of a given number in a sorted array.",
    "solutions": [
      "def find_first_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            right = mid - 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result"
    ],
    "starter_code": "def solution():\n    # Write a function to find the index of the first occurrence of a given number in a sorted array.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_735",
    "question": "Write a python function to toggle bits of the number except the first and the last bit.",
    "solutions": [
      "def set_middle_bits(n):  \r\n    n |= n >> 1; \r\n    n |= n >> 2; \r\n    n |= n >> 4; \r\n    n |= n >> 8; \r\n    n |= n >> 16;  \r\n    return (n >> 1) ^ 1\r\ndef toggle_middle_bits(n): \r\n    if (n == 1): \r\n        return 1\r\n    return n ^ set_middle_bits(n) "
    ],
    "starter_code": "def solution():\n    # Write a python function to toggle bits of the number except the first and the last bit.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_751",
    "question": "Write a function to check if the given array represents min heap or not.",
    "solutions": [
      "def check_min_heap(arr, i):\r\n    if 2 * i + 2 > len(arr):\r\n        return True\r\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)\r\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \r\n                                      and check_min_heap(arr, 2 * i + 2))\r\n    return left_child and right_child"
    ],
    "starter_code": "def solution():\n    # Write a function to check if the given array represents min heap or not.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_752",
    "question": "Write a function to find the nth jacobsthal number.",
    "solutions": [
      "def jacobsthal_num(n): \r\n\tdp = [0] * (n + 1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \r\n\treturn dp[n]"
    ],
    "starter_code": "def solution():\n    # Write a function to find the nth jacobsthal number.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_755",
    "question": "Write a function to find the second smallest number in a list.",
    "solutions": [
      "def second_smallest(numbers):\r\n  if (len(numbers)<2):\r\n    return\r\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\r\n    return\r\n  dup_items = set()\r\n  uniq_items = []\r\n  for x in numbers:\r\n    if x not in dup_items:\r\n      uniq_items.append(x)\r\n      dup_items.add(x)\r\n  uniq_items.sort()    \r\n  return  uniq_items[1] "
    ],
    "starter_code": "def solution():\n    # Write a function to find the second smallest number in a list.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_771",
    "question": "Write a function to check if the given expression is balanced or not.",
    "solutions": [
      "from collections import deque\r\ndef check_expression(exp):\r\n    if len(exp) & 1:\r\n        return False\r\n    stack = deque()\r\n    for ch in exp:\r\n        if ch == '(' or ch == '{' or ch == '[':\r\n            stack.append(ch)\r\n        if ch == ')' or ch == '}' or ch == ']':\r\n            if not stack:\r\n                return False\r\n            top = stack.pop()\r\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\r\n                return False\r\n    return not stack"
    ],
    "starter_code": "def solution():\n    # Write a function to check if the given expression is balanced or not.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_776",
    "question": "Write a function to count those characters which have vowels as their neighbors in the given string.",
    "solutions": [
      "def count_vowels(test_str):\r\n  res = 0\r\n  vow_list = ['a', 'e', 'i', 'o', 'u']\r\n  for idx in range(1, len(test_str) - 1):\r\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\r\n      res += 1\r\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\r\n    res += 1\r\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\r\n    res += 1\r\n  return (res) "
    ],
    "starter_code": "def solution():\n    # Write a function to count those characters which have vowels as their neighbors in the given string.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_780",
    "question": "Write a function to find the combinations of sums with tuples in the given tuple list.",
    "solutions": [
      "from itertools import combinations \r\ndef find_combinations(test_list):\r\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\r\n  return (res) "
    ],
    "starter_code": "def solution():\n    # Write a function to find the combinations of sums with tuples in the given tuple list.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_781",
    "question": "Write a python function to check whether the count of divisors is even or odd.",
    "solutions": [
      "import math \r\ndef count_Divisors(n) : \r\n    count = 0\r\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \r\n        if (n % i == 0) : \r\n            if( n // i == i) : \r\n                count = count + 1\r\n            else : \r\n                count = count + 2\r\n    if (count % 2 == 0) : \r\n        return (\"Even\") \r\n    else : \r\n        return (\"Odd\") "
    ],
    "starter_code": "def solution():\n    # Write a python function to check whether the count of divisors is even or odd.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_783",
    "question": "Write a function to convert rgb color to hsv color.",
    "solutions": [
      "def rgb_to_hsv(r, g, b):\r\n    r, g, b = r/255.0, g/255.0, b/255.0\r\n    mx = max(r, g, b)\r\n    mn = min(r, g, b)\r\n    df = mx-mn\r\n    if mx == mn:\r\n        h = 0\r\n    elif mx == r:\r\n        h = (60 * ((g-b)/df) + 360) % 360\r\n    elif mx == g:\r\n        h = (60 * ((b-r)/df) + 120) % 360\r\n    elif mx == b:\r\n        h = (60 * ((r-g)/df) + 240) % 360\r\n    if mx == 0:\r\n        s = 0\r\n    else:\r\n        s = (df/mx)*100\r\n    v = mx*100\r\n    return h, s, v"
    ],
    "starter_code": "def solution():\n    # Write a function to convert rgb color to hsv color.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_793",
    "question": "Write a python function to find the last position of an element in a sorted array.",
    "solutions": [
      "def last(arr,x,n):\r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            low = mid + 1\r\n    return res"
    ],
    "starter_code": "def solution():\n    # Write a python function to find the last position of an element in a sorted array.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_795",
    "question": "Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.",
    "solutions": [
      "import heapq\r\ndef cheap_items(items,n):\r\n  cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])\r\n  return cheap_items"
    ],
    "starter_code": "def solution():\n    # Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_806",
    "question": "Write a function to find maximum run of uppercase characters in the given string.",
    "solutions": [
      "def max_run_uppercase(test_str):\r\n  cnt = 0\r\n  res = 0\r\n  for idx in range(0, len(test_str)):\r\n    if test_str[idx].isupper():\r\n      cnt += 1\r\n    else:\r\n      res = cnt\r\n      cnt = 0\r\n  if test_str[len(test_str) - 1].isupper():\r\n    res = cnt\r\n  return (res)"
    ],
    "starter_code": "def solution():\n    # Write a function to find maximum run of uppercase characters in the given string.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_815",
    "question": "Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.",
    "solutions": [
      "def sort_by_dnf(arr, n):\r\n  low=0\r\n  mid=0\r\n  high=n-1\r\n  while mid <= high:\r\n    if arr[mid] == 0:\r\n      arr[low], arr[mid] = arr[mid], arr[low]\r\n      low = low + 1\r\n      mid = mid + 1\r\n    elif arr[mid] == 1:\r\n      mid = mid + 1\r\n    else:\r\n      arr[mid], arr[high] = arr[high], arr[mid]\r\n      high = high - 1\r\n  return arr"
    ],
    "starter_code": "def solution():\n    # Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_819",
    "question": "Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.",
    "solutions": [
      "def count_duplic(lists):\r\n    element = []\r\n    frequency = []\r\n    if not lists:\r\n        return element\r\n    running_count = 1\r\n    for i in range(len(lists)-1):\r\n        if lists[i] == lists[i+1]:\r\n            running_count += 1\r\n        else:\r\n            frequency.append(running_count)\r\n            element.append(lists[i])\r\n            running_count = 1\r\n    frequency.append(running_count)\r\n    element.append(lists[i+1])\r\n    return element,frequency\r\n"
    ],
    "starter_code": "def solution():\n    # Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_823",
    "question": "Write a function to check if the given string starts with a substring using regex.",
    "solutions": [
      "import re \r\ndef check_substring(string, sample) : \r\n  if (sample in string): \r\n      y = \"\\A\" + sample \r\n      x = re.search(y, string) \r\n      if x : \r\n          return (\"string starts with the given substring\") \r\n      else : \r\n          return (\"string doesnt start with the given substring\") \r\n  else : \r\n      return (\"entered string isnt a substring\")"
    ],
    "starter_code": "def solution():\n    # Write a function to check if the given string starts with a substring using regex.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_836",
    "question": "Write a function to find length of the subarray having maximum sum.",
    "solutions": [
      "from sys import maxsize \r\ndef max_sub_array_sum(a,size): \r\n\tmax_so_far = -maxsize - 1\r\n\tmax_ending_here = 0\r\n\tstart = 0\r\n\tend = 0\r\n\ts = 0\r\n\tfor i in range(0,size): \r\n\t\tmax_ending_here += a[i] \r\n\t\tif max_so_far < max_ending_here: \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\t\tstart = s \r\n\t\t\tend = i \r\n\t\tif max_ending_here < 0: \r\n\t\t\tmax_ending_here = 0\r\n\t\t\ts = i+1\r\n\treturn (end - start + 1)"
    ],
    "starter_code": "def solution():\n    # Write a function to find length of the subarray having maximum sum.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_838",
    "question": "Write a python function to find minimum number swaps required to make two binary strings equal.",
    "solutions": [
      "def min_Swaps(s1,s2) :  \r\n    c0 = 0; c1 = 0;  \r\n    for i in range(len(s1)) :  \r\n        if (s1[i] == '0' and s2[i] == '1') : \r\n            c0 += 1;    \r\n        elif (s1[i] == '1' and s2[i] == '0') : \r\n            c1 += 1;  \r\n    result = c0 // 2 + c1 // 2;  \r\n    if (c0 % 2 == 0 and c1 % 2 == 0) : \r\n        return result;  \r\n    elif ((c0 + c1) % 2 == 0) : \r\n        return result + 2;  \r\n    else : \r\n        return -1;  "
    ],
    "starter_code": "def solution():\n    # Write a python function to find minimum number swaps required to make two binary strings equal.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_843",
    "question": "Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.",
    "solutions": [
      "import heapq\r\ndef nth_super_ugly_number(n, primes):\r\n    uglies = [1]\r\n    def gen(prime):\r\n        for ugly in uglies:\r\n            yield ugly * prime\r\n    merged = heapq.merge(*map(gen, primes))\r\n    while len(uglies) < n:\r\n        ugly = next(merged)\r\n        if ugly != uglies[-1]:\r\n            uglies.append(ugly)\r\n    return uglies[-1]"
    ],
    "starter_code": "def solution():\n    # Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_844",
    "question": "Write a python function to find the kth element in an array containing odd elements first and then even elements.",
    "solutions": [
      "def get_Number(n, k): \r\n    arr = [0] * n; \r\n    i = 0; \r\n    odd = 1; \r\n    while (odd <= n):   \r\n        arr[i] = odd; \r\n        i += 1; \r\n        odd += 2;\r\n    even = 2; \r\n    while (even <= n): \r\n        arr[i] = even; \r\n        i += 1;\r\n        even += 2; \r\n    return arr[k - 1]; "
    ],
    "starter_code": "def solution():\n    # Write a python function to find the kth element in an array containing odd elements first and then even elements.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_845",
    "question": "Write a python function to count the number of digits in factorial of a given number.",
    "solutions": [
      "import math \r\ndef find_Digits(n): \r\n    if (n < 0): \r\n        return 0;\r\n    if (n <= 1): \r\n        return 1; \r\n    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0)); \r\n    return math.floor(x) + 1; "
    ],
    "starter_code": "def solution():\n    # Write a python function to count the number of digits in factorial of a given number.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_846",
    "question": "Write a function to find the minimum number of platforms required for a railway/bus station.",
    "solutions": [
      "def find_platform(arr, dep, n): \r\n    arr.sort() \r\n    dep.sort() \r\n    plat_needed = 1\r\n    result = 1\r\n    i = 1\r\n    j = 0\r\n    while (i < n and j < n): \r\n        if (arr[i] <= dep[j]):           \r\n            plat_needed+= 1\r\n            i+= 1\r\n        elif (arr[i] > dep[j]):           \r\n            plat_needed-= 1\r\n            j+= 1\r\n        if (plat_needed > result):  \r\n            result = plat_needed           \r\n    return result"
    ],
    "starter_code": "def solution():\n    # Write a function to find the minimum number of platforms required for a railway/bus station.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_853",
    "question": "Write a python function to find sum of odd factors of a number.",
    "solutions": [
      "import math\r\ndef sum_of_odd_Factors(n): \r\n    res = 1\r\n    while n % 2 == 0: \r\n        n = n // 2 \r\n    for i in range(3,int(math.sqrt(n) + 1)): \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while n % i == 0: \r\n            count+=1 \r\n            n = n // i \r\n            curr_term *= i \r\n            curr_sum += curr_term    \r\n        res *= curr_sum  \r\n    if n >= 2: \r\n        res *= (1 + n) \r\n    return res "
    ],
    "starter_code": "def solution():\n    # Write a python function to find sum of odd factors of a number.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_854",
    "question": "Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.",
    "solutions": [
      "import heapq as hq\r\ndef raw_heap(rawheap):\r\n  hq.heapify(rawheap)\r\n  return rawheap"
    ],
    "starter_code": "def solution():\n    # Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_871",
    "question": "Write a python function to check whether the given strings are rotations of each other or not.",
    "solutions": [
      "def are_Rotations(string1,string2): \r\n    size1 = len(string1) \r\n    size2 = len(string2) \r\n    temp = '' \r\n    if size1 != size2: \r\n        return False\r\n    temp = string1 + string1 \r\n    if (temp.count(string2)> 0): \r\n        return True\r\n    else: \r\n        return False"
    ],
    "starter_code": "def solution():\n    # Write a python function to check whether the given strings are rotations of each other or not.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_873",
    "question": "Write a function to solve the fibonacci sequence using recursion.",
    "solutions": [
      "def fibonacci(n):\r\n  if n == 1 or n == 2:\r\n    return 1\r\n  else:\r\n    return (fibonacci(n - 1) + (fibonacci(n - 2)))"
    ],
    "starter_code": "def solution():\n    # Write a function to solve the fibonacci sequence using recursion.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_876",
    "question": "Write a python function to find lcm of two positive integers.",
    "solutions": [
      "def lcm(x, y):\r\n   if x > y:\r\n       z = x\r\n   else:\r\n       z = y\r\n   while(True):\r\n       if((z % x == 0) and (z % y == 0)):\r\n           lcm = z\r\n           break\r\n       z += 1\r\n   return lcm"
    ],
    "starter_code": "def solution():\n    # Write a python function to find lcm of two positive integers.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_895",
    "question": "Write a function to find the maximum sum of subsequences of given array with no adjacent elements.",
    "solutions": [
      "def max_sum_subseq(A):\r\n    n = len(A)\r\n    if n == 1:\r\n        return A[0]\r\n    look_up = [None] * n\r\n    look_up[0] = A[0]\r\n    look_up[1] = max(A[0], A[1])\r\n    for i in range(2, n):\r\n        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])\r\n        look_up[i] = max(look_up[i], A[i])\r\n    return look_up[n - 1]"
    ],
    "starter_code": "def solution():\n    # Write a function to find the maximum sum of subsequences of given array with no adjacent elements.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_905",
    "question": "Write a python function to find the sum of squares of binomial co-efficients.",
    "solutions": [
      "def factorial(start,end): \r\n    res = 1 \r\n    for i in range(start,end + 1): \r\n        res *= i      \r\n    return res \r\ndef sum_of_square(n): \r\n   return int(factorial(n + 1, 2 * n)  /factorial(1, n)) "
    ],
    "starter_code": "def solution():\n    # Write a python function to find the sum of squares of binomial co-efficients.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_911",
    "question": "Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.",
    "solutions": [
      "def maximum_product(nums):\r\n    import heapq\r\n    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)\r\n    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])"
    ],
    "starter_code": "def solution():\n    # Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_926",
    "question": "Write a function to find n-th rencontres number.",
    "solutions": [
      "def binomial_coeffi(n, k): \r\n\tif (k == 0 or k == n): \r\n\t\treturn 1\r\n\treturn (binomial_coeffi(n - 1, k - 1) \r\n\t\t+ binomial_coeffi(n - 1, k)) \r\ndef rencontres_number(n, m): \r\n\tif (n == 0 and m == 0): \r\n\t\treturn 1\r\n\tif (n == 1 and m == 0): \r\n\t\treturn 0\r\n\tif (m == 0): \r\n\t\treturn ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0))) \r\n\treturn (binomial_coeffi(n, m) * rencontres_number(n - m, 0))"
    ],
    "starter_code": "def solution():\n    # Write a function to find n-th rencontres number.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_927",
    "question": "Write a function to calculate the height of the given binary tree.",
    "solutions": [
      "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef max_height(node): \r\n\tif node is None: \r\n\t\treturn 0 ; \r\n\telse : \r\n\t\tleft_height = max_height(node.left) \r\n\t\tright_height = max_height(node.right) \r\n\t\tif (left_height > right_height): \r\n\t\t\treturn left_height+1\r\n\t\telse: \r\n\t\t\treturn right_height+1"
    ],
    "starter_code": "def solution():\n    # Write a function to calculate the height of the given binary tree.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_943",
    "question": "Write a function to combine two given sorted lists using heapq module.",
    "solutions": [
      "from heapq import merge\r\ndef combine_lists(num1,num2):\r\n  combine_lists=list(merge(num1, num2))\r\n  return combine_lists"
    ],
    "starter_code": "def solution():\n    # Write a function to combine two given sorted lists using heapq module.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_958",
    "question": "Write a function to convert an integer into a roman numeral.",
    "solutions": [
      "def int_to_roman( num):\r\n        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]\r\n        syb = [\"M\", \"CM\", \"D\", \"CD\",\"C\", \"XC\", \"L\", \"XL\",\"X\", \"IX\", \"V\", \"IV\",\"I\"]\r\n        roman_num = ''\r\n        i = 0\r\n        while  num > 0:\r\n            for _ in range(num // val[i]):\r\n                roman_num += syb[i]\r\n                num -= val[i]\r\n            i += 1\r\n        return roman_num"
    ],
    "starter_code": "def solution():\n    # Write a function to convert an integer into a roman numeral.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_971",
    "question": "Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.",
    "solutions": [
      "def maximum_segments(n, a, b, c) : \r\n\tdp = [-1] * (n + 10) \r\n\tdp[0] = 0\r\n\tfor i in range(0, n) : \r\n\t\tif (dp[i] != -1) : \r\n\t\t\tif(i + a <= n ): \r\n\t\t\t\tdp[i + a] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + a]) \r\n\t\t\tif(i + b <= n ): \r\n\t\t\t\tdp[i + b] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + b]) \r\n\t\t\tif(i + c <= n ): \r\n\t\t\t\tdp[i + c] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + c]) \r\n\treturn dp[n]"
    ],
    "starter_code": "def solution():\n    # Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_608",
    "question": "Write a python function to find nth bell number.",
    "solutions": [
      "def bell_Number(n): \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1):\r\n        bell[i][0] = bell[i-1][i-1]\r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \r\n    return bell[n][0] "
    ],
    "starter_code": "def solution():\n    # Write a python function to find nth bell number.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_918",
    "question": "Write a function to count coin change.",
    "solutions": [
      "def coin_change(S, m, n): \r\n    table = [[0 for x in range(m)] for x in range(n+1)] \r\n    for i in range(m): \r\n        table[0][i] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(m): \r\n            x = table[i - S[j]][j] if i-S[j] >= 0 else 0\r\n            y = table[i][j-1] if j >= 1 else 0 \r\n            table[i][j] = x + y   \r\n    return table[n][m-1] "
    ],
    "starter_code": "def solution():\n    # Write a function to count coin change.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_601",
    "question": "Write a function to find the longest chain which can be formed from the given set of pairs.",
    "solutions": [
      "class Pair(object): \r\n\tdef __init__(self, a, b): \r\n\t\tself.a = a \r\n\t\tself.b = b \r\ndef max_chain_length(arr, n): \r\n\tmax = 0\r\n\tmcl = [1 for i in range(n)] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif (arr[i].a > arr[j].b and\r\n\t\t\t\tmcl[i] < mcl[j] + 1): \r\n\t\t\t\tmcl[i] = mcl[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mcl[i]): \r\n\t\t\tmax = mcl[i] \r\n\treturn max"
    ],
    "starter_code": "def solution():\n    # Write a function to find the longest chain which can be formed from the given set of pairs.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_717",
    "question": "Write a function to calculate the standard deviation.",
    "solutions": [
      "import math\r\nimport sys\r\ndef sd_calc(data):\r\n    n = len(data)\r\n    if n <= 1:\r\n        return 0.0\r\n    mean, sd = avg_calc(data), 0.0\r\n    for el in data:\r\n        sd += (float(el) - mean)**2\r\n    sd = math.sqrt(sd / float(n-1))\r\n    return sd\r\ndef avg_calc(ls):\r\n    n, mean = len(ls), 0.0\r\n    if n <= 1:\r\n        return ls[0]\r\n    for el in ls:\r\n        mean = mean + float(el)\r\n    mean = mean / float(n)\r\n    return mean"
    ],
    "starter_code": "def solution():\n    # Write a function to calculate the standard deviation.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_767",
    "question": "Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019.",
    "solutions": [
      "def get_Pairs_Count(arr,n,sum):\r\n    count = 0  \r\n    for i in range(0,n):\r\n        for j in range(i + 1,n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count"
    ],
    "starter_code": "def solution():\n    # Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_901",
    "question": "Write a function to find the smallest multiple of the first n numbers.",
    "solutions": [
      "def smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i"
    ],
    "starter_code": "def solution():\n    # Write a function to find the smallest multiple of the first n numbers.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_912",
    "question": "Write a function to find ln, m lobb number.",
    "solutions": [
      "def binomial_coeff(n, k): \r\n\tC = [[0 for j in range(k + 1)] \r\n\t\t\tfor i in range(n + 1)] \r\n\tfor i in range(0, n + 1): \r\n\t\tfor j in range(0, min(i, k) + 1): \r\n\t\t\tif (j == 0 or j == i): \r\n\t\t\t\tC[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tC[i][j] = (C[i - 1][j - 1] \r\n\t\t\t\t\t\t\t+ C[i - 1][j]) \r\n\treturn C[n][k] \r\ndef lobb_num(n, m): \r\n\treturn (((2 * m + 1) *\r\n\t\tbinomial_coeff(2 * n, m + n)) \r\n\t\t\t\t\t/ (m + n + 1))"
    ],
    "starter_code": "def solution():\n    # Write a function to find ln, m lobb number.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_928",
    "question": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.",
    "solutions": [
      "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\r\n        return change_date_format(dt)"
    ],
    "starter_code": "def solution():\n    # Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_952",
    "question": "Write a function to compute the value of ncr mod p.",
    "solutions": [
      "def nCr_mod_p(n, r, p): \r\n\tif (r > n- r): \r\n\t\tr = n - r \r\n\tC = [0 for i in range(r + 1)] \r\n\tC[0] = 1 \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(min(i, r), 0, -1): \r\n\t\t\tC[j] = (C[j] + C[j-1]) % p \r\n\treturn C[r] "
    ],
    "starter_code": "def solution():\n    # Write a function to compute the value of ncr mod p.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "hard_001_v0",
    "question": "Implement Dijkstra's shortest path algorithm for a weighted graph.\n\nFunction signature: def dijkstra(graph: Dict[int, List[Tuple[int, int]]], start: int) -> Dict[int, int]:\n\nReturn distances from start to all nodes.",
    "solutions": [
      "def dijkstra(graph, start):\n    import heapq\n    distances = {node: float('inf') for node in graph}\n    distances[start] = 0\n    pq = [(0, start)]\n    \n    while pq:\n        current_dist, current = heapq.heappop(pq)\n        if current_dist > distances[current]:\n            continue\n        for neighbor, weight in graph[current]:\n            distance = current_dist + weight\n            if distance < distances[neighbor]:\n                distances[neighbor] = distance\n                heapq.heappush(pq, (distance, neighbor))\n    return distances"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement Dijkstra's shortest path algorithm for a weighted graph.\n\nFunction signature: def dijkstra(graph: Dict[int, List[Tuple[int, int]]], start: int) -> Dict[int, int]:\n\nReturn distances from start to all nodes.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_0\"]"
      ],
      "outputs": [
        "\"test_output_hard_0\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  },
  {
    "problem_id": "hard_001_v1",
    "question": "Implement Dijkstra's shortest path algorithm for a weighted graph.\n\nFunction signature: def dijkstra(graph: Dict[int, List[Tuple[int, int]]], start: int) -> Dict[int, int]:\n\nReturn distances from start to all nodes.",
    "solutions": [
      "def dijkstra(graph, start):\n    import heapq\n    distances = {node: float('inf') for node in graph}\n    distances[start] = 0\n    pq = [(0, start)]\n    \n    while pq:\n        current_dist, current = heapq.heappop(pq)\n        if current_dist > distances[current]:\n            continue\n        for neighbor, weight in graph[current]:\n            distance = current_dist + weight\n            if distance < distances[neighbor]:\n                distances[neighbor] = distance\n                heapq.heappush(pq, (distance, neighbor))\n    return distances"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement Dijkstra's shortest path algorithm for a weighted graph.\n\nFunction signature: def dijkstra(graph: Dict[int, List[Tuple[int, int]]], start: int) -> Dict[int, int]:\n\nReturn distances from start to all nodes.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_0\"]"
      ],
      "outputs": [
        "\"test_output_hard_0\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  },
  {
    "problem_id": "hard_001_v2",
    "question": "Implement Dijkstra's shortest path algorithm for a weighted graph.\n\nFunction signature: def dijkstra(graph: Dict[int, List[Tuple[int, int]]], start: int) -> Dict[int, int]:\n\nReturn distances from start to all nodes.",
    "solutions": [
      "def dijkstra(graph, start):\n    import heapq\n    distances = {node: float('inf') for node in graph}\n    distances[start] = 0\n    pq = [(0, start)]\n    \n    while pq:\n        current_dist, current = heapq.heappop(pq)\n        if current_dist > distances[current]:\n            continue\n        for neighbor, weight in graph[current]:\n            distance = current_dist + weight\n            if distance < distances[neighbor]:\n                distances[neighbor] = distance\n                heapq.heappush(pq, (distance, neighbor))\n    return distances"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement Dijkstra's shortest path algorithm for a weighted graph.\n\nFunction signature: def dijkstra(graph: Dict[int, List[Tuple[int, int]]], start: int) -> Dict[int, int]:\n\nReturn distances from start to all nodes.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_0\"]"
      ],
      "outputs": [
        "\"test_output_hard_0\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  },
  {
    "problem_id": "hard_001_v3",
    "question": "Implement Dijkstra's shortest path algorithm for a weighted graph.\n\nFunction signature: def dijkstra(graph: Dict[int, List[Tuple[int, int]]], start: int) -> Dict[int, int]:\n\nReturn distances from start to all nodes.",
    "solutions": [
      "def dijkstra(graph, start):\n    import heapq\n    distances = {node: float('inf') for node in graph}\n    distances[start] = 0\n    pq = [(0, start)]\n    \n    while pq:\n        current_dist, current = heapq.heappop(pq)\n        if current_dist > distances[current]:\n            continue\n        for neighbor, weight in graph[current]:\n            distance = current_dist + weight\n            if distance < distances[neighbor]:\n                distances[neighbor] = distance\n                heapq.heappush(pq, (distance, neighbor))\n    return distances"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement Dijkstra's shortest path algorithm for a weighted graph.\n\nFunction signature: def dijkstra(graph: Dict[int, List[Tuple[int, int]]], start: int) -> Dict[int, int]:\n\nReturn distances from start to all nodes.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_0\"]"
      ],
      "outputs": [
        "\"test_output_hard_0\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  },
  {
    "problem_id": "hard_001_v4",
    "question": "Implement Dijkstra's shortest path algorithm for a weighted graph.\n\nFunction signature: def dijkstra(graph: Dict[int, List[Tuple[int, int]]], start: int) -> Dict[int, int]:\n\nReturn distances from start to all nodes.",
    "solutions": [
      "def dijkstra(graph, start):\n    import heapq\n    distances = {node: float('inf') for node in graph}\n    distances[start] = 0\n    pq = [(0, start)]\n    \n    while pq:\n        current_dist, current = heapq.heappop(pq)\n        if current_dist > distances[current]:\n            continue\n        for neighbor, weight in graph[current]:\n            distance = current_dist + weight\n            if distance < distances[neighbor]:\n                distances[neighbor] = distance\n                heapq.heappush(pq, (distance, neighbor))\n    return distances"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement Dijkstra's shortest path algorithm for a weighted graph.\n\nFunction signature: def dijkstra(graph: Dict[int, List[Tuple[int, int]]], start: int) -> Dict[int, int]:\n\nReturn distances from start to all nodes.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_0\"]"
      ],
      "outputs": [
        "\"test_output_hard_0\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  },
  {
    "problem_id": "hard_001_v5",
    "question": "Implement Dijkstra's shortest path algorithm for a weighted graph.\n\nFunction signature: def dijkstra(graph: Dict[int, List[Tuple[int, int]]], start: int) -> Dict[int, int]:\n\nReturn distances from start to all nodes.",
    "solutions": [
      "def dijkstra(graph, start):\n    import heapq\n    distances = {node: float('inf') for node in graph}\n    distances[start] = 0\n    pq = [(0, start)]\n    \n    while pq:\n        current_dist, current = heapq.heappop(pq)\n        if current_dist > distances[current]:\n            continue\n        for neighbor, weight in graph[current]:\n            distance = current_dist + weight\n            if distance < distances[neighbor]:\n                distances[neighbor] = distance\n                heapq.heappush(pq, (distance, neighbor))\n    return distances"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement Dijkstra's shortest path algorithm for a weighted graph.\n\nFunction signature: def dijkstra(graph: Dict[int, List[Tuple[int, int]]], start: int) -> Dict[int, int]:\n\nReturn distances from start to all nodes.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_0\"]"
      ],
      "outputs": [
        "\"test_output_hard_0\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  },
  {
    "problem_id": "hard_001_v6",
    "question": "Implement Dijkstra's shortest path algorithm for a weighted graph.\n\nFunction signature: def dijkstra(graph: Dict[int, List[Tuple[int, int]]], start: int) -> Dict[int, int]:\n\nReturn distances from start to all nodes.",
    "solutions": [
      "def dijkstra(graph, start):\n    import heapq\n    distances = {node: float('inf') for node in graph}\n    distances[start] = 0\n    pq = [(0, start)]\n    \n    while pq:\n        current_dist, current = heapq.heappop(pq)\n        if current_dist > distances[current]:\n            continue\n        for neighbor, weight in graph[current]:\n            distance = current_dist + weight\n            if distance < distances[neighbor]:\n                distances[neighbor] = distance\n                heapq.heappush(pq, (distance, neighbor))\n    return distances"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement Dijkstra's shortest path algorithm for a weighted graph.\n\nFunction signature: def dijkstra(graph: Dict[int, List[Tuple[int, int]]], start: int) -> Dict[int, int]:\n\nReturn distances from start to all nodes.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_0\"]"
      ],
      "outputs": [
        "\"test_output_hard_0\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  },
  {
    "problem_id": "hard_001_v7",
    "question": "Implement Dijkstra's shortest path algorithm for a weighted graph.\n\nFunction signature: def dijkstra(graph: Dict[int, List[Tuple[int, int]]], start: int) -> Dict[int, int]:\n\nReturn distances from start to all nodes.",
    "solutions": [
      "def dijkstra(graph, start):\n    import heapq\n    distances = {node: float('inf') for node in graph}\n    distances[start] = 0\n    pq = [(0, start)]\n    \n    while pq:\n        current_dist, current = heapq.heappop(pq)\n        if current_dist > distances[current]:\n            continue\n        for neighbor, weight in graph[current]:\n            distance = current_dist + weight\n            if distance < distances[neighbor]:\n                distances[neighbor] = distance\n                heapq.heappush(pq, (distance, neighbor))\n    return distances"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement Dijkstra's shortest path algorithm for a weighted graph.\n\nFunction signature: def dijkstra(graph: Dict[int, List[Tuple[int, int]]], start: int) -> Dict[int, int]:\n\nReturn distances from start to all nodes.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_0\"]"
      ],
      "outputs": [
        "\"test_output_hard_0\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  },
  {
    "problem_id": "hard_001_v8",
    "question": "Implement Dijkstra's shortest path algorithm for a weighted graph.\n\nFunction signature: def dijkstra(graph: Dict[int, List[Tuple[int, int]]], start: int) -> Dict[int, int]:\n\nReturn distances from start to all nodes.",
    "solutions": [
      "def dijkstra(graph, start):\n    import heapq\n    distances = {node: float('inf') for node in graph}\n    distances[start] = 0\n    pq = [(0, start)]\n    \n    while pq:\n        current_dist, current = heapq.heappop(pq)\n        if current_dist > distances[current]:\n            continue\n        for neighbor, weight in graph[current]:\n            distance = current_dist + weight\n            if distance < distances[neighbor]:\n                distances[neighbor] = distance\n                heapq.heappush(pq, (distance, neighbor))\n    return distances"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement Dijkstra's shortest path algorithm for a weighted graph.\n\nFunction signature: def dijkstra(graph: Dict[int, List[Tuple[int, int]]], start: int) -> Dict[int, int]:\n\nReturn distances from start to all nodes.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_0\"]"
      ],
      "outputs": [
        "\"test_output_hard_0\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  },
  {
    "problem_id": "HumanEval/129",
    "question": "\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n",
    "solutions": [
      "    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n"
    ],
    "starter_code": "\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 12
  },
  {
    "problem_id": "mbpp_974",
    "question": "Write a function to find the minimum total path sum in the given triangle.",
    "solutions": [
      "def min_sum_path(A): \r\n\tmemo = [None] * len(A) \r\n\tn = len(A) - 1\r\n\tfor i in range(len(A[n])): \r\n\t\tmemo[i] = A[n][i] \r\n\tfor i in range(len(A) - 2, -1,-1): \r\n\t\tfor j in range( len(A[i])): \r\n\t\t\tmemo[j] = A[i][j] + min(memo[j], \r\n\t\t\t\t\t\t\t\t\tmemo[j + 1]) \r\n\treturn memo[0]"
    ],
    "starter_code": "def solution():\n    # Write a function to find the minimum total path sum in the given triangle.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_721",
    "question": "Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.",
    "solutions": [
      "M = 100\r\ndef maxAverageOfPath(cost, N): \r\n\tdp = [[0 for i in range(N + 1)] for j in range(N + 1)] \r\n\tdp[0][0] = cost[0][0] \r\n\tfor i in range(1, N): \r\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0] \r\n\tfor j in range(1, N): \r\n\t\tdp[0][j] = dp[0][j - 1] + cost[0][j] \r\n\tfor i in range(1, N): \r\n\t\tfor j in range(1, N): \r\n\t\t\tdp[i][j] = max(dp[i - 1][j], \r\n\t\t\t\t\t\tdp[i][j - 1]) + cost[i][j] \r\n\treturn dp[N - 1][N - 1] / (2 * N - 1)"
    ],
    "starter_code": "def solution():\n    # Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "HumanEval/6",
    "question": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n",
    "solutions": [
      "    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n"
    ],
    "starter_code": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 4
  },
  {
    "problem_id": "hard_003_v0",
    "question": "Implement merge sort algorithm with optimal space complexity.",
    "solutions": [
      "def mergeSort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = mergeSort(arr[:mid])\n    right = mergeSort(arr[mid:])\n    return merge(left, right)\ndef merge(left, right):\n    result = []\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement merge sort algorithm with optimal space complexity.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_2\"]"
      ],
      "outputs": [
        "\"test_output_hard_2\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  },
  {
    "problem_id": "hard_003_v1",
    "question": "Implement merge sort algorithm with optimal space complexity.",
    "solutions": [
      "def mergeSort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = mergeSort(arr[:mid])\n    right = mergeSort(arr[mid:])\n    return merge(left, right)\ndef merge(left, right):\n    result = []\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement merge sort algorithm with optimal space complexity.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_2\"]"
      ],
      "outputs": [
        "\"test_output_hard_2\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  },
  {
    "problem_id": "hard_003_v2",
    "question": "Implement merge sort algorithm with optimal space complexity.",
    "solutions": [
      "def mergeSort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = mergeSort(arr[:mid])\n    right = mergeSort(arr[mid:])\n    return merge(left, right)\ndef merge(left, right):\n    result = []\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement merge sort algorithm with optimal space complexity.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_2\"]"
      ],
      "outputs": [
        "\"test_output_hard_2\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  },
  {
    "problem_id": "hard_003_v3",
    "question": "Implement merge sort algorithm with optimal space complexity.",
    "solutions": [
      "def mergeSort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = mergeSort(arr[:mid])\n    right = mergeSort(arr[mid:])\n    return merge(left, right)\ndef merge(left, right):\n    result = []\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement merge sort algorithm with optimal space complexity.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_2\"]"
      ],
      "outputs": [
        "\"test_output_hard_2\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  },
  {
    "problem_id": "hard_003_v4",
    "question": "Implement merge sort algorithm with optimal space complexity.",
    "solutions": [
      "def mergeSort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = mergeSort(arr[:mid])\n    right = mergeSort(arr[mid:])\n    return merge(left, right)\ndef merge(left, right):\n    result = []\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement merge sort algorithm with optimal space complexity.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_2\"]"
      ],
      "outputs": [
        "\"test_output_hard_2\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  },
  {
    "problem_id": "HumanEval/95",
    "question": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n",
    "solutions": [
      "    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n"
    ],
    "starter_code": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 8
  },
  {
    "problem_id": "HumanEval/59",
    "question": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n",
    "solutions": [
      "    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n"
    ],
    "starter_code": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 6
  },
  {
    "problem_id": "HumanEval/75",
    "question": "\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n",
    "solutions": [
      "    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n"
    ],
    "starter_code": "\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 11
  },
  {
    "problem_id": "hard_002_v0",
    "question": "Implement a Trie (prefix tree) with insert, search, and startsWith operations.",
    "solutions": [
      "class Trie:\n    def __init__(self):\n        self.root = {}\n    def insert(self, word):\n        node = self.root\n        for char in word:\n            if char not in node:\n                node[char] = {}\n            node = node[char]\n        node['$'] = True\n    def search(self, word):\n        node = self.root\n        for char in word:\n            if char not in node:\n                return False\n            node = node[char]\n        return '$' in node"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement a Trie (prefix tree) with insert, search, and startsWith operations.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_1\"]"
      ],
      "outputs": [
        "\"test_output_hard_1\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  },
  {
    "problem_id": "hard_002_v1",
    "question": "Implement a Trie (prefix tree) with insert, search, and startsWith operations.",
    "solutions": [
      "class Trie:\n    def __init__(self):\n        self.root = {}\n    def insert(self, word):\n        node = self.root\n        for char in word:\n            if char not in node:\n                node[char] = {}\n            node = node[char]\n        node['$'] = True\n    def search(self, word):\n        node = self.root\n        for char in word:\n            if char not in node:\n                return False\n            node = node[char]\n        return '$' in node"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement a Trie (prefix tree) with insert, search, and startsWith operations.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_1\"]"
      ],
      "outputs": [
        "\"test_output_hard_1\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  },
  {
    "problem_id": "hard_002_v2",
    "question": "Implement a Trie (prefix tree) with insert, search, and startsWith operations.",
    "solutions": [
      "class Trie:\n    def __init__(self):\n        self.root = {}\n    def insert(self, word):\n        node = self.root\n        for char in word:\n            if char not in node:\n                node[char] = {}\n            node = node[char]\n        node['$'] = True\n    def search(self, word):\n        node = self.root\n        for char in word:\n            if char not in node:\n                return False\n            node = node[char]\n        return '$' in node"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement a Trie (prefix tree) with insert, search, and startsWith operations.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_1\"]"
      ],
      "outputs": [
        "\"test_output_hard_1\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  },
  {
    "problem_id": "hard_002_v3",
    "question": "Implement a Trie (prefix tree) with insert, search, and startsWith operations.",
    "solutions": [
      "class Trie:\n    def __init__(self):\n        self.root = {}\n    def insert(self, word):\n        node = self.root\n        for char in word:\n            if char not in node:\n                node[char] = {}\n            node = node[char]\n        node['$'] = True\n    def search(self, word):\n        node = self.root\n        for char in word:\n            if char not in node:\n                return False\n            node = node[char]\n        return '$' in node"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement a Trie (prefix tree) with insert, search, and startsWith operations.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_1\"]"
      ],
      "outputs": [
        "\"test_output_hard_1\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  },
  {
    "problem_id": "hard_002_v4",
    "question": "Implement a Trie (prefix tree) with insert, search, and startsWith operations.",
    "solutions": [
      "class Trie:\n    def __init__(self):\n        self.root = {}\n    def insert(self, word):\n        node = self.root\n        for char in word:\n            if char not in node:\n                node[char] = {}\n            node = node[char]\n        node['$'] = True\n    def search(self, word):\n        node = self.root\n        for char in word:\n            if char not in node:\n                return False\n            node = node[char]\n        return '$' in node"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement a Trie (prefix tree) with insert, search, and startsWith operations.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_1\"]"
      ],
      "outputs": [
        "\"test_output_hard_1\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_859",
    "question": "Write a function to generate all sublists of a given list.",
    "solutions": [
      "from itertools import combinations\r\ndef sub_lists(my_list):\r\n\tsubs = []\r\n\tfor i in range(0, len(my_list)+1):\r\n\t  temp = [list(x) for x in combinations(my_list, i)]\r\n\t  if len(temp)>0:\r\n\t    subs.extend(temp)\r\n\treturn subs"
    ],
    "starter_code": "def solution():\n    # Write a function to generate all sublists of a given list.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_620",
    "question": "Write a function to find the largest subset where each pair is divisible.",
    "solutions": [
      "def largest_subset(a, n):\r\n\tdp = [0 for i in range(n)]\r\n\tdp[n - 1] = 1; \r\n\tfor i in range(n - 2, -1, -1):\r\n\t\tmxm = 0;\r\n\t\tfor j in range(i + 1, n):\r\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\r\n\t\t\t\tmxm = max(mxm, dp[j])\r\n\t\tdp[i] = 1 + mxm\r\n\treturn max(dp)"
    ],
    "starter_code": "def solution():\n    # Write a function to find the largest subset where each pair is divisible.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_849",
    "question": "Write a python function to find sum of all prime divisors of a given number.",
    "solutions": [
      "def Sum(N): \r\n    SumOfPrimeDivisors = [0]*(N + 1)   \r\n    for i in range(2,N + 1) : \r\n        if (SumOfPrimeDivisors[i] == 0) : \r\n            for j in range(i,N + 1,i) : \r\n                SumOfPrimeDivisors[j] += i           \r\n    return SumOfPrimeDivisors[N] "
    ],
    "starter_code": "def solution():\n    # Write a python function to find sum of all prime divisors of a given number.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_950",
    "question": "Write a function to display sign of the chinese zodiac for given year.",
    "solutions": [
      "def chinese_zodiac(year):\r\n if (year - 2000) % 12 == 0:\r\n     sign = 'Dragon'\r\n elif (year - 2000) % 12 == 1:\r\n     sign = 'Snake'\r\n elif (year - 2000) % 12 == 2:\r\n     sign = 'Horse'\r\n elif (year - 2000) % 12 == 3:\r\n     sign = 'sheep'\r\n elif (year - 2000) % 12 == 4:\r\n     sign = 'Monkey'\r\n elif (year - 2000) % 12 == 5:\r\n     sign = 'Rooster'\r\n elif (year - 2000) % 12 == 6:\r\n     sign = 'Dog'\r\n elif (year - 2000) % 12 == 7:\r\n     sign = 'Pig'\r\n elif (year - 2000) % 12 == 8:\r\n     sign = 'Rat'\r\n elif (year - 2000) % 12 == 9:\r\n     sign = 'Ox'\r\n elif (year - 2000) % 12 == 10:\r\n     sign = 'Tiger'\r\n else:\r\n     sign = 'Hare'\r\n return sign"
    ],
    "starter_code": "def solution():\n    # Write a function to display sign of the chinese zodiac for given year.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "hard_003_v5",
    "question": "Implement merge sort algorithm with optimal space complexity.",
    "solutions": [
      "def mergeSort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = mergeSort(arr[:mid])\n    right = mergeSort(arr[mid:])\n    return merge(left, right)\ndef merge(left, right):\n    result = []\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement merge sort algorithm with optimal space complexity.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_2\"]"
      ],
      "outputs": [
        "\"test_output_hard_2\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  },
  {
    "problem_id": "hard_003_v6",
    "question": "Implement merge sort algorithm with optimal space complexity.",
    "solutions": [
      "def mergeSort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = mergeSort(arr[:mid])\n    right = mergeSort(arr[mid:])\n    return merge(left, right)\ndef merge(left, right):\n    result = []\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement merge sort algorithm with optimal space complexity.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_2\"]"
      ],
      "outputs": [
        "\"test_output_hard_2\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  },
  {
    "problem_id": "hard_003_v7",
    "question": "Implement merge sort algorithm with optimal space complexity.",
    "solutions": [
      "def mergeSort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = mergeSort(arr[:mid])\n    right = mergeSort(arr[mid:])\n    return merge(left, right)\ndef merge(left, right):\n    result = []\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement merge sort algorithm with optimal space complexity.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_2\"]"
      ],
      "outputs": [
        "\"test_output_hard_2\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  },
  {
    "problem_id": "hard_003_v8",
    "question": "Implement merge sort algorithm with optimal space complexity.",
    "solutions": [
      "def mergeSort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = mergeSort(arr[:mid])\n    right = mergeSort(arr[mid:])\n    return merge(left, right)\ndef merge(left, right):\n    result = []\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement merge sort algorithm with optimal space complexity.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_2\"]"
      ],
      "outputs": [
        "\"test_output_hard_2\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  },
  {
    "problem_id": "HumanEval/81",
    "question": "\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n",
    "solutions": [
      "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n"
    ],
    "starter_code": "\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 8
  },
  {
    "problem_id": "HumanEval/94",
    "question": "\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n",
    "solutions": [
      "    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n"
    ],
    "starter_code": "\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 19
  },
  {
    "problem_id": "mbpp_689",
    "question": "## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block",
    "solutions": [
      "def min_jumps(arr, n):\r\n\tjumps = [0 for i in range(n)]\r\n\tif (n == 0) or (arr[0] == 0):\r\n\t\treturn float('inf')\r\n\tjumps[0] = 0\r\n\tfor i in range(1, n):\r\n\t\tjumps[i] = float('inf')\r\n\t\tfor j in range(i):\r\n\t\t\tif (i <= j + arr[j]) and (jumps[j] != float('inf')):\r\n\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1)\r\n\t\t\t\tbreak\r\n\treturn jumps[n-1]"
    ],
    "starter_code": "def solution():\n    # ## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "HumanEval/108",
    "question": "\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n",
    "solutions": [
      "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n"
    ],
    "starter_code": "\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 11
  },
  {
    "problem_id": "mbpp_694",
    "question": "Write a function to extract unique values from the given dictionary values.",
    "solutions": [
      "def extract_unique(test_dict):\r\n  res = list(sorted({ele for val in test_dict.values() for ele in val}))\r\n  return res"
    ],
    "starter_code": "def solution():\n    # Write a function to extract unique values from the given dictionary values.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_747",
    "question": "Write a function to find the longest common subsequence for the given three string sequence.",
    "solutions": [
      "def lcs_of_three(X, Y, Z, m, n, o): \r\n\tL = [[[0 for i in range(o+1)] for j in range(n+1)] \r\n\t\tfor k in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tfor k in range(o+1): \r\n\t\t\t\tif (i == 0 or j == 0 or k == 0): \r\n\t\t\t\t\tL[i][j][k] = 0\r\n\t\t\t\telif (X[i-1] == Y[j-1] and\r\n\t\t\t\t\tX[i-1] == Z[k-1]): \r\n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1\r\n\t\t\t\telse: \r\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \r\n\t\t\t\t\tL[i][j-1][k]), \r\n\t\t\t\t\t\t\t\t\tL[i][j][k-1]) \r\n\treturn L[m][n][o]"
    ],
    "starter_code": "def solution():\n    # Write a function to find the longest common subsequence for the given three string sequence.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_757",
    "question": "Write a function to count the pairs of reverse strings in the given string list.",
    "solutions": [
      "def count_reverse_pairs(test_list):\r\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \r\n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \r\n  return str(res)"
    ],
    "starter_code": "def solution():\n    # Write a function to count the pairs of reverse strings in the given string list.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_652",
    "question": "Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.",
    "solutions": [
      "def matrix_to_list(test_list):\r\n  temp = [ele for sub in test_list for ele in sub]\r\n  res = list(zip(*temp))\r\n  return (str(res))"
    ],
    "starter_code": "def solution():\n    # Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_920",
    "question": "Write a function to remove all tuples with all none values in the given tuple list.",
    "solutions": [
      "def remove_tuple(test_list):\r\n  res = [sub for sub in test_list if not all(ele == None for ele in sub)]\r\n  return (str(res)) "
    ],
    "starter_code": "def solution():\n    # Write a function to remove all tuples with all none values in the given tuple list.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "hard_002_v5",
    "question": "Implement a Trie (prefix tree) with insert, search, and startsWith operations.",
    "solutions": [
      "class Trie:\n    def __init__(self):\n        self.root = {}\n    def insert(self, word):\n        node = self.root\n        for char in word:\n            if char not in node:\n                node[char] = {}\n            node = node[char]\n        node['$'] = True\n    def search(self, word):\n        node = self.root\n        for char in word:\n            if char not in node:\n                return False\n            node = node[char]\n        return '$' in node"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement a Trie (prefix tree) with insert, search, and startsWith operations.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_1\"]"
      ],
      "outputs": [
        "\"test_output_hard_1\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  },
  {
    "problem_id": "hard_002_v6",
    "question": "Implement a Trie (prefix tree) with insert, search, and startsWith operations.",
    "solutions": [
      "class Trie:\n    def __init__(self):\n        self.root = {}\n    def insert(self, word):\n        node = self.root\n        for char in word:\n            if char not in node:\n                node[char] = {}\n            node = node[char]\n        node['$'] = True\n    def search(self, word):\n        node = self.root\n        for char in word:\n            if char not in node:\n                return False\n            node = node[char]\n        return '$' in node"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement a Trie (prefix tree) with insert, search, and startsWith operations.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_1\"]"
      ],
      "outputs": [
        "\"test_output_hard_1\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  },
  {
    "problem_id": "hard_002_v7",
    "question": "Implement a Trie (prefix tree) with insert, search, and startsWith operations.",
    "solutions": [
      "class Trie:\n    def __init__(self):\n        self.root = {}\n    def insert(self, word):\n        node = self.root\n        for char in word:\n            if char not in node:\n                node[char] = {}\n            node = node[char]\n        node['$'] = True\n    def search(self, word):\n        node = self.root\n        for char in word:\n            if char not in node:\n                return False\n            node = node[char]\n        return '$' in node"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement a Trie (prefix tree) with insert, search, and startsWith operations.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_1\"]"
      ],
      "outputs": [
        "\"test_output_hard_1\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  }
]