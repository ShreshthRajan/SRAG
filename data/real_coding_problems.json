[
  {
    "problem_id": "HumanEval/0",
    "question": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n",
    "solutions": [
      "    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n"
    ],
    "starter_code": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 8
  },
  {
    "problem_id": "HumanEval/1",
    "question": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n",
    "solutions": [
      "    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n"
    ],
    "starter_code": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 5
  },
  {
    "problem_id": "HumanEval/2",
    "question": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n",
    "solutions": [
      "    return number % 1.0\n"
    ],
    "starter_code": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 4
  },
  {
    "problem_id": "HumanEval/3",
    "question": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n",
    "solutions": [
      "    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n"
    ],
    "starter_code": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 7
  },
  {
    "problem_id": "HumanEval/4",
    "question": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n",
    "solutions": [
      "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n"
    ],
    "starter_code": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 4
  },
  {
    "problem_id": "HumanEval/5",
    "question": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n",
    "solutions": [
      "    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n"
    ],
    "starter_code": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 4
  },
  {
    "problem_id": "HumanEval/6",
    "question": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n",
    "solutions": [
      "    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n"
    ],
    "starter_code": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 4
  },
  {
    "problem_id": "HumanEval/7",
    "question": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n",
    "solutions": [
      "    return [x for x in strings if substring in x]\n"
    ],
    "starter_code": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 5
  },
  {
    "problem_id": "HumanEval/8",
    "question": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n",
    "solutions": [
      "    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n"
    ],
    "starter_code": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 6
  },
  {
    "problem_id": "HumanEval/9",
    "question": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n",
    "solutions": [
      "    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n"
    ],
    "starter_code": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 5
  },
  {
    "problem_id": "HumanEval/10",
    "question": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n",
    "solutions": [
      "    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n"
    ],
    "starter_code": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 6
  },
  {
    "problem_id": "HumanEval/11",
    "question": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n",
    "solutions": [
      "    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n"
    ],
    "starter_code": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 4
  },
  {
    "problem_id": "HumanEval/12",
    "question": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n",
    "solutions": [
      "    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n"
    ],
    "starter_code": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 4
  },
  {
    "problem_id": "HumanEval/13",
    "question": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n",
    "solutions": [
      "    while b:\n        a, b = b, a % b\n    return a\n"
    ],
    "starter_code": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 5
  },
  {
    "problem_id": "HumanEval/14",
    "question": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n",
    "solutions": [
      "    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n"
    ],
    "starter_code": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 4
  },
  {
    "problem_id": "HumanEval/15",
    "question": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n",
    "solutions": [
      "    return ' '.join([str(x) for x in range(n + 1)])\n"
    ],
    "starter_code": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 4
  },
  {
    "problem_id": "HumanEval/16",
    "question": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n",
    "solutions": [
      "    return len(set(string.lower()))\n"
    ],
    "starter_code": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 6
  },
  {
    "problem_id": "HumanEval/17",
    "question": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n",
    "solutions": [
      "    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n"
    ],
    "starter_code": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 6
  },
  {
    "problem_id": "HumanEval/18",
    "question": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n",
    "solutions": [
      "    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n"
    ],
    "starter_code": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 5
  },
  {
    "problem_id": "HumanEval/19",
    "question": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n",
    "solutions": [
      "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n"
    ],
    "starter_code": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 6
  },
  {
    "problem_id": "HumanEval/20",
    "question": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n",
    "solutions": [
      "    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n"
    ],
    "starter_code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 6
  },
  {
    "problem_id": "HumanEval/21",
    "question": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n",
    "solutions": [
      "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n"
    ],
    "starter_code": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 6
  },
  {
    "problem_id": "HumanEval/22",
    "question": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n",
    "solutions": [
      "    return [x for x in values if isinstance(x, int)]\n"
    ],
    "starter_code": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 4
  },
  {
    "problem_id": "HumanEval/23",
    "question": "\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n",
    "solutions": [
      "    return len(string)\n"
    ],
    "starter_code": "\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 4
  },
  {
    "problem_id": "HumanEval/24",
    "question": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n",
    "solutions": [
      "    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n"
    ],
    "starter_code": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 6
  },
  {
    "problem_id": "HumanEval/25",
    "question": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n",
    "solutions": [
      "    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n"
    ],
    "starter_code": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 9
  },
  {
    "problem_id": "HumanEval/26",
    "question": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n",
    "solutions": [
      "    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n"
    ],
    "starter_code": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 4
  },
  {
    "problem_id": "HumanEval/27",
    "question": "\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n",
    "solutions": [
      "    return string.swapcase()\n"
    ],
    "starter_code": "\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 4
  },
  {
    "problem_id": "HumanEval/28",
    "question": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n",
    "solutions": [
      "    return ''.join(strings)\n"
    ],
    "starter_code": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 4
  },
  {
    "problem_id": "HumanEval/29",
    "question": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n",
    "solutions": [
      "    return [x for x in strings if x.startswith(prefix)]\n"
    ],
    "starter_code": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 3
  },
  {
    "problem_id": "HumanEval/30",
    "question": "\n\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n",
    "solutions": [
      "    return [e for e in l if e > 0]\n"
    ],
    "starter_code": "\n\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 5
  },
  {
    "problem_id": "HumanEval/31",
    "question": "\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n",
    "solutions": [
      "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n"
    ],
    "starter_code": "\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 14
  },
  {
    "problem_id": "HumanEval/32",
    "question": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n",
    "solutions": [
      "    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n"
    ],
    "starter_code": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 2
  },
  {
    "problem_id": "HumanEval/33",
    "question": "\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n",
    "solutions": [
      "    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n"
    ],
    "starter_code": "\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 8
  },
  {
    "problem_id": "HumanEval/34",
    "question": "\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n",
    "solutions": [
      "    return sorted(list(set(l)))\n"
    ],
    "starter_code": "\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 2
  },
  {
    "problem_id": "HumanEval/35",
    "question": "\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n",
    "solutions": [
      "    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n"
    ],
    "starter_code": "\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 3
  },
  {
    "problem_id": "HumanEval/36",
    "question": "\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n",
    "solutions": [
      "    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n"
    ],
    "starter_code": "\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 9
  },
  {
    "problem_id": "HumanEval/37",
    "question": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n",
    "solutions": [
      "    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n"
    ],
    "starter_code": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 4
  },
  {
    "problem_id": "HumanEval/38",
    "question": "\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n",
    "solutions": [
      "    return encode_cyclic(encode_cyclic(s))\n"
    ],
    "starter_code": "\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 2
  },
  {
    "problem_id": "HumanEval/39",
    "question": "\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n",
    "solutions": [
      "    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n"
    ],
    "starter_code": "\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 11
  },
  {
    "problem_id": "HumanEval/40",
    "question": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n",
    "solutions": [
      "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"
    ],
    "starter_code": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 10
  },
  {
    "problem_id": "HumanEval/41",
    "question": "\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n",
    "solutions": [
      "    return n**2\n"
    ],
    "starter_code": "\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 6
  },
  {
    "problem_id": "HumanEval/42",
    "question": "\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n",
    "solutions": [
      "    return [(e + 1) for e in l]\n"
    ],
    "starter_code": "\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 4
  },
  {
    "problem_id": "HumanEval/43",
    "question": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n",
    "solutions": [
      "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n"
    ],
    "starter_code": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 10
  },
  {
    "problem_id": "HumanEval/44",
    "question": "\n\ndef change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n",
    "solutions": [
      "    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n"
    ],
    "starter_code": "\n\ndef change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 8
  },
  {
    "problem_id": "HumanEval/45",
    "question": "\n\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n",
    "solutions": [
      "    return a * h / 2.0\n"
    ],
    "starter_code": "\n\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 4
  },
  {
    "problem_id": "HumanEval/46",
    "question": "\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n",
    "solutions": [
      "    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n"
    ],
    "starter_code": "\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 5
  },
  {
    "problem_id": "HumanEval/47",
    "question": "\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n",
    "solutions": [
      "    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n"
    ],
    "starter_code": "\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 6
  },
  {
    "problem_id": "HumanEval/48",
    "question": "\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n",
    "solutions": [
      "    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n"
    ],
    "starter_code": "\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 8
  },
  {
    "problem_id": "HumanEval/49",
    "question": "\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n",
    "solutions": [
      "    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n"
    ],
    "starter_code": "\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 8
  },
  {
    "problem_id": "HumanEval/50",
    "question": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n",
    "solutions": [
      "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    ],
    "starter_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 2
  },
  {
    "problem_id": "HumanEval/51",
    "question": "\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n",
    "solutions": [
      "    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n"
    ],
    "starter_code": "\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 8
  },
  {
    "problem_id": "HumanEval/52",
    "question": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n",
    "solutions": [
      "    for e in l:\n        if e >= t:\n            return False\n    return True\n"
    ],
    "starter_code": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 7
  },
  {
    "problem_id": "HumanEval/53",
    "question": "\n\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n",
    "solutions": [
      "    return x + y\n"
    ],
    "starter_code": "\n\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 7
  },
  {
    "problem_id": "HumanEval/54",
    "question": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n",
    "solutions": [
      "    return set(s0) == set(s1)\n"
    ],
    "starter_code": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 8
  },
  {
    "problem_id": "HumanEval/55",
    "question": "\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n",
    "solutions": [
      "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n"
    ],
    "starter_code": "\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 6
  },
  {
    "problem_id": "HumanEval/56",
    "question": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n",
    "solutions": [
      "    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n"
    ],
    "starter_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 13
  },
  {
    "problem_id": "HumanEval/57",
    "question": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n",
    "solutions": [
      "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n"
    ],
    "starter_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 9
  },
  {
    "problem_id": "HumanEval/58",
    "question": "\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n",
    "solutions": [
      "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n"
    ],
    "starter_code": "\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 5
  },
  {
    "problem_id": "HumanEval/59",
    "question": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n",
    "solutions": [
      "    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n"
    ],
    "starter_code": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 6
  },
  {
    "problem_id": "HumanEval/60",
    "question": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n",
    "solutions": [
      "    return sum(range(n + 1))\n"
    ],
    "starter_code": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 6
  },
  {
    "problem_id": "HumanEval/61",
    "question": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n",
    "solutions": [
      "    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n"
    ],
    "starter_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 13
  },
  {
    "problem_id": "HumanEval/62",
    "question": "\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n",
    "solutions": [
      "    return [(i * x) for i, x in enumerate(xs)][1:]\n"
    ],
    "starter_code": "\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 6
  },
  {
    "problem_id": "HumanEval/63",
    "question": "\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n",
    "solutions": [
      "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n"
    ],
    "starter_code": "\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 8
  },
  {
    "problem_id": "HumanEval/64",
    "question": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n",
    "solutions": [
      "    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n"
    ],
    "starter_code": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 10
  },
  {
    "problem_id": "HumanEval/65",
    "question": "\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n",
    "solutions": [
      "    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n"
    ],
    "starter_code": "\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 8
  },
  {
    "problem_id": "HumanEval/66",
    "question": "\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n",
    "solutions": [
      "    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n"
    ],
    "starter_code": "\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 13
  },
  {
    "problem_id": "HumanEval/67",
    "question": "\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n",
    "solutions": [
      "    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n"
    ],
    "starter_code": "\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 8
  },
  {
    "problem_id": "HumanEval/68",
    "question": "\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n",
    "solutions": [
      "    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n"
    ],
    "starter_code": "\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 13
  },
  {
    "problem_id": "HumanEval/69",
    "question": "\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n",
    "solutions": [
      "    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n"
    ],
    "starter_code": "\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 26
  },
  {
    "problem_id": "HumanEval/70",
    "question": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n",
    "solutions": [
      "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n"
    ],
    "starter_code": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 11
  },
  {
    "problem_id": "HumanEval/71",
    "question": "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n",
    "solutions": [
      "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n"
    ],
    "starter_code": "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 12
  },
  {
    "problem_id": "HumanEval/72",
    "question": "\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n",
    "solutions": [
      "    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n"
    ],
    "starter_code": "\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 7
  },
  {
    "problem_id": "HumanEval/73",
    "question": "\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n",
    "solutions": [
      "    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n"
    ],
    "starter_code": "\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 9
  },
  {
    "problem_id": "HumanEval/74",
    "question": "\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n",
    "solutions": [
      "    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n"
    ],
    "starter_code": "\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 14
  },
  {
    "problem_id": "HumanEval/75",
    "question": "\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n",
    "solutions": [
      "    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n"
    ],
    "starter_code": "\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 11
  },
  {
    "problem_id": "HumanEval/76",
    "question": "\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n",
    "solutions": [
      "    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n"
    ],
    "starter_code": "\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 21
  },
  {
    "problem_id": "HumanEval/77",
    "question": "\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n",
    "solutions": [
      "    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n"
    ],
    "starter_code": "\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 9
  },
  {
    "problem_id": "HumanEval/78",
    "question": "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n",
    "solutions": [
      "    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n"
    ],
    "starter_code": "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 8
  },
  {
    "problem_id": "HumanEval/79",
    "question": "\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n",
    "solutions": [
      "    return \"db\" + bin(decimal)[2:] + \"db\"\n"
    ],
    "starter_code": "\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 8
  },
  {
    "problem_id": "HumanEval/80",
    "question": "\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n",
    "solutions": [
      "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n"
    ],
    "starter_code": "\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 9
  },
  {
    "problem_id": "HumanEval/81",
    "question": "\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n",
    "solutions": [
      "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n"
    ],
    "starter_code": "\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 8
  },
  {
    "problem_id": "HumanEval/82",
    "question": "\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n",
    "solutions": [
      "    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n"
    ],
    "starter_code": "\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 17
  },
  {
    "problem_id": "HumanEval/83",
    "question": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n",
    "solutions": [
      "    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n"
    ],
    "starter_code": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 10
  },
  {
    "problem_id": "HumanEval/84",
    "question": "\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n",
    "solutions": [
      "    return bin(sum(int(i) for i in str(N)))[2:]\n"
    ],
    "starter_code": "\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 10
  },
  {
    "problem_id": "HumanEval/85",
    "question": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n",
    "solutions": [
      "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n"
    ],
    "starter_code": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 5
  },
  {
    "problem_id": "HumanEval/86",
    "question": "\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n",
    "solutions": [
      "    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n"
    ],
    "starter_code": "\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 9
  },
  {
    "problem_id": "HumanEval/87",
    "question": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n",
    "solutions": [
      "    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n"
    ],
    "starter_code": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 8
  },
  {
    "problem_id": "HumanEval/88",
    "question": "\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n",
    "solutions": [
      "    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n"
    ],
    "starter_code": "\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 12
  },
  {
    "problem_id": "HumanEval/89",
    "question": "\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n",
    "solutions": [
      "    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n"
    ],
    "starter_code": "\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 17
  },
  {
    "problem_id": "HumanEval/90",
    "question": "\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n",
    "solutions": [
      "    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n"
    ],
    "starter_code": "\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 9
  },
  {
    "problem_id": "HumanEval/91",
    "question": "\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n",
    "solutions": [
      "    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n"
    ],
    "starter_code": "\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 9
  },
  {
    "problem_id": "HumanEval/92",
    "question": "\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n",
    "solutions": [
      "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n"
    ],
    "starter_code": "\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 21
  },
  {
    "problem_id": "HumanEval/93",
    "question": "\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n",
    "solutions": [
      "    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n"
    ],
    "starter_code": "\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 11
  },
  {
    "problem_id": "HumanEval/94",
    "question": "\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n",
    "solutions": [
      "    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n"
    ],
    "starter_code": "\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 19
  },
  {
    "problem_id": "HumanEval/95",
    "question": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n",
    "solutions": [
      "    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n"
    ],
    "starter_code": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 8
  },
  {
    "problem_id": "HumanEval/96",
    "question": "\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n",
    "solutions": [
      "    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n"
    ],
    "starter_code": "\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 11
  },
  {
    "problem_id": "HumanEval/97",
    "question": "\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n",
    "solutions": [
      "    return abs(a % 10) * abs(b % 10)\n"
    ],
    "starter_code": "\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 9
  },
  {
    "problem_id": "HumanEval/98",
    "question": "\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n",
    "solutions": [
      "    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n"
    ],
    "starter_code": "\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 9
  },
  {
    "problem_id": "HumanEval/99",
    "question": "\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n",
    "solutions": [
      "    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n"
    ],
    "starter_code": "\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 6
  },
  {
    "problem_id": "HumanEval/100",
    "question": "\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n",
    "solutions": [
      "    return [n + 2*i for i in range(n)]\n"
    ],
    "starter_code": "\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 8
  },
  {
    "problem_id": "HumanEval/101",
    "question": "\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n",
    "solutions": [
      "    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n"
    ],
    "starter_code": "\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 11
  },
  {
    "problem_id": "HumanEval/102",
    "question": "\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n",
    "solutions": [
      "    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n"
    ],
    "starter_code": "\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 9
  },
  {
    "problem_id": "HumanEval/103",
    "question": "\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n",
    "solutions": [
      "    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n"
    ],
    "starter_code": "\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 13
  },
  {
    "problem_id": "HumanEval/104",
    "question": "\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n",
    "solutions": [
      "    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n"
    ],
    "starter_code": "\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 6
  },
  {
    "problem_id": "HumanEval/105",
    "question": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n",
    "solutions": [
      "    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n"
    ],
    "starter_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 10
  },
  {
    "problem_id": "HumanEval/106",
    "question": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n",
    "solutions": [
      "    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n"
    ],
    "starter_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 5
  },
  {
    "problem_id": "HumanEval/107",
    "question": "\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n",
    "solutions": [
      "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n"
    ],
    "starter_code": "\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 11
  },
  {
    "problem_id": "HumanEval/108",
    "question": "\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n",
    "solutions": [
      "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n"
    ],
    "starter_code": "\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 11
  },
  {
    "problem_id": "HumanEval/109",
    "question": "\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n",
    "solutions": [
      "    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n"
    ],
    "starter_code": "\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 8
  },
  {
    "problem_id": "HumanEval/110",
    "question": "\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n",
    "solutions": [
      "    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n"
    ],
    "starter_code": "\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 8
  },
  {
    "problem_id": "HumanEval/111",
    "question": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n",
    "solutions": [
      "    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n"
    ],
    "starter_code": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 17
  },
  {
    "problem_id": "HumanEval/112",
    "question": "\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n",
    "solutions": [
      "    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n"
    ],
    "starter_code": "\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 10
  },
  {
    "problem_id": "HumanEval/113",
    "question": "\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n",
    "solutions": [
      "    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n"
    ],
    "starter_code": "\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 6
  },
  {
    "problem_id": "HumanEval/114",
    "question": "\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n",
    "solutions": [
      "    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n"
    ],
    "starter_code": "\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 15
  },
  {
    "problem_id": "HumanEval/115",
    "question": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n",
    "solutions": [
      "    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n"
    ],
    "starter_code": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 10
  },
  {
    "problem_id": "HumanEval/116",
    "question": "\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n",
    "solutions": [
      "    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n"
    ],
    "starter_code": "\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 13
  },
  {
    "problem_id": "HumanEval/117",
    "question": "\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n",
    "solutions": [
      "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n"
    ],
    "starter_code": "\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 8
  },
  {
    "problem_id": "HumanEval/118",
    "question": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n",
    "solutions": [
      "    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n"
    ],
    "starter_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 15
  },
  {
    "problem_id": "HumanEval/119",
    "question": "\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n",
    "solutions": [
      "    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n"
    ],
    "starter_code": "\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 13
  },
  {
    "problem_id": "HumanEval/120",
    "question": "\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n",
    "solutions": [
      "    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n"
    ],
    "starter_code": "\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 12
  },
  {
    "problem_id": "HumanEval/121",
    "question": "\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n",
    "solutions": [
      "    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n"
    ],
    "starter_code": "\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 8
  },
  {
    "problem_id": "HumanEval/122",
    "question": "\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n",
    "solutions": [
      "    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n"
    ],
    "starter_code": "\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 8
  },
  {
    "problem_id": "HumanEval/123",
    "question": "\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n",
    "solutions": [
      "    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n"
    ],
    "starter_code": "\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 7
  },
  {
    "problem_id": "HumanEval/124",
    "question": "\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n",
    "solutions": [
      "    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n"
    ],
    "starter_code": "\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 17
  },
  {
    "problem_id": "HumanEval/125",
    "question": "\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n",
    "solutions": [
      "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n"
    ],
    "starter_code": "\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 9
  },
  {
    "problem_id": "HumanEval/126",
    "question": "\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n",
    "solutions": [
      "    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n"
    ],
    "starter_code": "\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 22
  },
  {
    "problem_id": "HumanEval/127",
    "question": "\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n",
    "solutions": [
      "    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n"
    ],
    "starter_code": "\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 9
  },
  {
    "problem_id": "HumanEval/128",
    "question": "\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n",
    "solutions": [
      "    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n"
    ],
    "starter_code": "\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 13
  },
  {
    "problem_id": "HumanEval/129",
    "question": "\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n",
    "solutions": [
      "    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n"
    ],
    "starter_code": "\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 12
  },
  {
    "problem_id": "HumanEval/130",
    "question": "\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n",
    "solutions": [
      "    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n"
    ],
    "starter_code": "\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 11
  },
  {
    "problem_id": "HumanEval/131",
    "question": "\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n",
    "solutions": [
      "    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n"
    ],
    "starter_code": "\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 8
  },
  {
    "problem_id": "HumanEval/132",
    "question": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n",
    "solutions": [
      "    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n"
    ],
    "starter_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 17
  },
  {
    "problem_id": "HumanEval/133",
    "question": "\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n",
    "solutions": [
      "    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n"
    ],
    "starter_code": "\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 25
  },
  {
    "problem_id": "HumanEval/134",
    "question": "\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n",
    "solutions": [
      " \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n"
    ],
    "starter_code": "\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 12
  },
  {
    "problem_id": "HumanEval/135",
    "question": "\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n",
    "solutions": [
      "    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n"
    ],
    "starter_code": "\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 6
  },
  {
    "problem_id": "HumanEval/136",
    "question": "\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n",
    "solutions": [
      "    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n"
    ],
    "starter_code": "\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 13
  },
  {
    "problem_id": "HumanEval/137",
    "question": "\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n",
    "solutions": [
      "    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n"
    ],
    "starter_code": "\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 10
  },
  {
    "problem_id": "HumanEval/138",
    "question": "\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n",
    "solutions": [
      "    return n%2 == 0 and n >= 8\n"
    ],
    "starter_code": "\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 9
  },
  {
    "problem_id": "HumanEval/139",
    "question": "\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n",
    "solutions": [
      "    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n"
    ],
    "starter_code": "\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 5
  },
  {
    "problem_id": "HumanEval/140",
    "question": "\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n",
    "solutions": [
      "    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n"
    ],
    "starter_code": "\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 11
  },
  {
    "problem_id": "HumanEval/141",
    "question": "\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n",
    "solutions": [
      "    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n"
    ],
    "starter_code": "\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 27
  },
  {
    "problem_id": "HumanEval/142",
    "question": "\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n",
    "solutions": [
      "    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n"
    ],
    "starter_code": "\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 12
  },
  {
    "problem_id": "HumanEval/143",
    "question": "\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n",
    "solutions": [
      "    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n"
    ],
    "starter_code": "\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 8
  },
  {
    "problem_id": "HumanEval/144",
    "question": "\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n",
    "solutions": [
      "    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n"
    ],
    "starter_code": "\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 14
  },
  {
    "problem_id": "HumanEval/145",
    "question": "\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n",
    "solutions": [
      "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n"
    ],
    "starter_code": "\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 9
  },
  {
    "problem_id": "HumanEval/146",
    "question": "\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n",
    "solutions": [
      "    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n"
    ],
    "starter_code": "\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 8
  },
  {
    "problem_id": "HumanEval/147",
    "question": "\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n",
    "solutions": [
      "    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n"
    ],
    "starter_code": "\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 5
  },
  {
    "problem_id": "HumanEval/148",
    "question": "\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n",
    "solutions": [
      "    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n"
    ],
    "starter_code": "\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 8
  },
  {
    "problem_id": "HumanEval/149",
    "question": "\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n",
    "solutions": [
      "    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n"
    ],
    "starter_code": "\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 8
  },
  {
    "problem_id": "HumanEval/150",
    "question": "\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n",
    "solutions": [
      "    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n"
    ],
    "starter_code": "\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 11
  },
  {
    "problem_id": "HumanEval/151",
    "question": "\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n",
    "solutions": [
      "    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n"
    ],
    "starter_code": "\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 15
  },
  {
    "problem_id": "HumanEval/152",
    "question": "\ndef compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n",
    "solutions": [
      "    return [abs(x-y) for x,y in zip(game,guess)]\n"
    ],
    "starter_code": "\ndef compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 11
  },
  {
    "problem_id": "HumanEval/153",
    "question": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n",
    "solutions": [
      "    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n"
    ],
    "starter_code": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 10
  },
  {
    "problem_id": "HumanEval/154",
    "question": "\ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n",
    "solutions": [
      "    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n"
    ],
    "starter_code": "\ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 11
  },
  {
    "problem_id": "HumanEval/155",
    "question": "\ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n",
    "solutions": [
      "    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n"
    ],
    "starter_code": "\ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 10
  },
  {
    "problem_id": "HumanEval/156",
    "question": "\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n",
    "solutions": [
      "    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n"
    ],
    "starter_code": "\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 16
  },
  {
    "problem_id": "HumanEval/157",
    "question": "\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n",
    "solutions": [
      "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n"
    ],
    "starter_code": "\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 14
  },
  {
    "problem_id": "HumanEval/158",
    "question": "\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n",
    "solutions": [
      "    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n"
    ],
    "starter_code": "\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 11
  },
  {
    "problem_id": "HumanEval/159",
    "question": "\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n",
    "solutions": [
      "    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n"
    ],
    "starter_code": "\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 11
  },
  {
    "problem_id": "HumanEval/160",
    "question": "\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n",
    "solutions": [
      "    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n"
    ],
    "starter_code": "\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 7
  },
  {
    "problem_id": "HumanEval/161",
    "question": "\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n",
    "solutions": [
      "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n"
    ],
    "starter_code": "\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 9
  },
  {
    "problem_id": "HumanEval/162",
    "question": "\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n",
    "solutions": [
      "    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n"
    ],
    "starter_code": "\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 6
  },
  {
    "problem_id": "HumanEval/163",
    "question": "\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n",
    "solutions": [
      "    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n"
    ],
    "starter_code": "\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/openai/human-eval",
    "source": "HumanEval",
    "test_case_count": 7
  },
  {
    "problem_id": "mbpp_601",
    "question": "Write a function to find the longest chain which can be formed from the given set of pairs.",
    "solutions": [
      "class Pair(object): \r\n\tdef __init__(self, a, b): \r\n\t\tself.a = a \r\n\t\tself.b = b \r\ndef max_chain_length(arr, n): \r\n\tmax = 0\r\n\tmcl = [1 for i in range(n)] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif (arr[i].a > arr[j].b and\r\n\t\t\t\tmcl[i] < mcl[j] + 1): \r\n\t\t\t\tmcl[i] = mcl[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mcl[i]): \r\n\t\t\tmax = mcl[i] \r\n\treturn max"
    ],
    "starter_code": "def solution():\n    # Write a function to find the longest chain which can be formed from the given set of pairs.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_602",
    "question": "Write a python function to find the first repeated character in a given string.",
    "solutions": [
      "def first_repeated_char(str1):\r\n  for index,c in enumerate(str1):\r\n    if str1[:index+1].count(c) > 1:\r\n      return c \r\n  return \"None\""
    ],
    "starter_code": "def solution():\n    # Write a python function to find the first repeated character in a given string.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_603",
    "question": "Write a function to get a lucid number smaller than or equal to n.",
    "solutions": [
      "def get_ludic(n):\r\n\tludics = []\r\n\tfor i in range(1, n + 1):\r\n\t\tludics.append(i)\r\n\tindex = 1\r\n\twhile(index != len(ludics)):\r\n\t\tfirst_ludic = ludics[index]\r\n\t\tremove_index = index + first_ludic\r\n\t\twhile(remove_index < len(ludics)):\r\n\t\t\tludics.remove(ludics[remove_index])\r\n\t\t\tremove_index = remove_index + first_ludic - 1\r\n\t\tindex += 1\r\n\treturn ludics"
    ],
    "starter_code": "def solution():\n    # Write a function to get a lucid number smaller than or equal to n.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_604",
    "question": "Write a function to reverse words in a given string.",
    "solutions": [
      "def reverse_words(s):\r\n        return ' '.join(reversed(s.split()))"
    ],
    "starter_code": "def solution():\n    # Write a function to reverse words in a given string.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_605",
    "question": "Write a function to check if the given integer is a prime number.",
    "solutions": [
      "def prime_num(num):\r\n  if num >=1:\r\n   for i in range(2, num//2):\r\n     if (num % i) == 0:\r\n                return False\r\n     else:\r\n                return True\r\n  else:\r\n          return False"
    ],
    "starter_code": "def solution():\n    # Write a function to check if the given integer is a prime number.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_606",
    "question": "Write a function to convert degrees to radians.",
    "solutions": [
      "import math\r\ndef radian_degree(degree):\r\n radian = degree*(math.pi/180)\r\n return radian"
    ],
    "starter_code": "def solution():\n    # Write a function to convert degrees to radians.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_607",
    "question": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.",
    "solutions": [
      "import re\r\npattern = 'fox'\r\ntext = 'The quick brown fox jumps over the lazy dog.'\r\ndef find_literals(text, pattern):\r\n  match = re.search(pattern, text)\r\n  s = match.start()\r\n  e = match.end()\r\n  return (match.re.pattern, s, e)"
    ],
    "starter_code": "def solution():\n    # Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_608",
    "question": "Write a python function to find nth bell number.",
    "solutions": [
      "def bell_Number(n): \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1):\r\n        bell[i][0] = bell[i-1][i-1]\r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \r\n    return bell[n][0] "
    ],
    "starter_code": "def solution():\n    # Write a python function to find nth bell number.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_609",
    "question": "Write a python function to find minimum possible value for the given periodic function.",
    "solutions": [
      "def floor_Min(A,B,N):\r\n    x = max(B - 1,N)\r\n    return (A*x) // B"
    ],
    "starter_code": "def solution():\n    # Write a python function to find minimum possible value for the given periodic function.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_610",
    "question": "Write a python function to remove the k'th element from a given list.",
    "solutions": [
      "def remove_kth_element(list1, L):\r\n    return  list1[:L-1] + list1[L:]"
    ],
    "starter_code": "def solution():\n    # Write a python function to remove the k'th element from a given list.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_611",
    "question": "Write a function to find the maximum of nth column from the given tuple list.",
    "solutions": [
      "def max_of_nth(test_list, N):\r\n  res = max([sub[N] for sub in test_list])\r\n  return (res) "
    ],
    "starter_code": "def solution():\n    # Write a function to find the maximum of nth column from the given tuple list.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_612",
    "question": "Write a python function to merge the first and last elements separately in a list of lists.",
    "solutions": [
      "def merge(lst):  \r\n    return [list(ele) for ele in list(zip(*lst))] "
    ],
    "starter_code": "def solution():\n    # Write a python function to merge the first and last elements separately in a list of lists.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_613",
    "question": "Write a function to find the maximum value in record list as tuple attribute in the given tuple list.",
    "solutions": [
      "def maximum_value(test_list):\r\n  res = [(key, max(lst)) for key, lst in test_list]\r\n  return (res) "
    ],
    "starter_code": "def solution():\n    # Write a function to find the maximum value in record list as tuple attribute in the given tuple list.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_614",
    "question": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.",
    "solutions": [
      "def cummulative_sum(test_list):\r\n  res = sum(map(sum, test_list))\r\n  return (res)"
    ],
    "starter_code": "def solution():\n    # Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_615",
    "question": "Write a function to find average value of the numbers in a given tuple of tuples.",
    "solutions": [
      "def average_tuple(nums):\r\n    result = [sum(x) / len(x) for x in zip(*nums)]\r\n    return result"
    ],
    "starter_code": "def solution():\n    # Write a function to find average value of the numbers in a given tuple of tuples.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_616",
    "question": "Write a function to perfom the modulo of tuple elements in the given two tuples.",
    "solutions": [
      "def tuple_modulo(test_tup1, test_tup2):\r\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \r\n  return (res) "
    ],
    "starter_code": "def solution():\n    # Write a function to perfom the modulo of tuple elements in the given two tuples.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_617",
    "question": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.",
    "solutions": [
      "def min_Jumps(a, b, d): \r\n    temp = a \r\n    a = min(a, b) \r\n    b = max(temp, b) \r\n    if (d >= b): \r\n        return (d + b - 1) / b \r\n    if (d == 0): \r\n        return 0\r\n    if (d == a): \r\n        return 1\r\n    else:\r\n        return 2"
    ],
    "starter_code": "def solution():\n    # Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_618",
    "question": "Write a function to divide two lists using map and lambda function.",
    "solutions": [
      "def div_list(nums1,nums2):\r\n  result = map(lambda x, y: x / y, nums1, nums2)\r\n  return list(result)"
    ],
    "starter_code": "def solution():\n    # Write a function to divide two lists using map and lambda function.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_619",
    "question": "Write a function to move all the numbers in it to the given string.",
    "solutions": [
      "def move_num(test_str):\r\n  res = ''\r\n  dig = ''\r\n  for ele in test_str:\r\n    if ele.isdigit():\r\n      dig += ele\r\n    else:\r\n      res += ele\r\n  res += dig\r\n  return (res) "
    ],
    "starter_code": "def solution():\n    # Write a function to move all the numbers in it to the given string.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_620",
    "question": "Write a function to find the largest subset where each pair is divisible.",
    "solutions": [
      "def largest_subset(a, n):\r\n\tdp = [0 for i in range(n)]\r\n\tdp[n - 1] = 1; \r\n\tfor i in range(n - 2, -1, -1):\r\n\t\tmxm = 0;\r\n\t\tfor j in range(i + 1, n):\r\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\r\n\t\t\t\tmxm = max(mxm, dp[j])\r\n\t\tdp[i] = 1 + mxm\r\n\treturn max(dp)"
    ],
    "starter_code": "def solution():\n    # Write a function to find the largest subset where each pair is divisible.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_621",
    "question": "Write a function to increment the numeric values in the given strings by k.",
    "solutions": [
      "def increment_numerics(test_list, K):\r\n  res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]\r\n  return res "
    ],
    "starter_code": "def solution():\n    # Write a function to increment the numeric values in the given strings by k.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_622",
    "question": "Write a function to find the median of two sorted arrays of same size.",
    "solutions": [
      "def get_median(arr1, arr2, n):\r\n  i = 0\r\n  j = 0\r\n  m1 = -1\r\n  m2 = -1\r\n  count = 0\r\n  while count < n + 1:\r\n    count += 1\r\n    if i == n:\r\n      m1 = m2\r\n      m2 = arr2[0]\r\n      break\r\n    elif j == n:\r\n      m1 = m2\r\n      m2 = arr1[0]\r\n      break\r\n    if arr1[i] <= arr2[j]:\r\n      m1 = m2\r\n      m2 = arr1[i]\r\n      i += 1\r\n    else:\r\n      m1 = m2\r\n      m2 = arr2[j]\r\n      j += 1\r\n  return (m1 + m2)/2"
    ],
    "starter_code": "def solution():\n    # Write a function to find the median of two sorted arrays of same size.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_623",
    "question": "Write a function to find the n-th power of individual elements in a list using lambda function.",
    "solutions": [
      "def nth_nums(nums,n):\r\n nth_nums = list(map(lambda x: x ** n, nums))\r\n return nth_nums"
    ],
    "starter_code": "def solution():\n    # Write a function to find the n-th power of individual elements in a list using lambda function.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_624",
    "question": "Write a python function to convert the given string to upper case.",
    "solutions": [
      "def is_upper(string):\r\n  return (string.upper())"
    ],
    "starter_code": "def solution():\n    # Write a python function to convert the given string to upper case.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_625",
    "question": "Write a python function to interchange first and last elements in a given list.",
    "solutions": [
      "def swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp   \r\n    return newList "
    ],
    "starter_code": "def solution():\n    # Write a python function to interchange first and last elements in a given list.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_626",
    "question": "Write a python function to find the largest triangle that can be inscribed in the semicircle.",
    "solutions": [
      "def triangle_area(r) :  \r\n    if r < 0 : \r\n        return -1\r\n    return r * r "
    ],
    "starter_code": "def solution():\n    # Write a python function to find the largest triangle that can be inscribed in the semicircle.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_627",
    "question": "Write a python function to find the smallest missing number from the given array.",
    "solutions": [
      "def find_First_Missing(array,start,end): \r\n    if (start > end): \r\n        return end + 1\r\n    if (start != array[start]): \r\n        return start; \r\n    mid = int((start + end) / 2) \r\n    if (array[mid] == mid): \r\n        return find_First_Missing(array,mid+1,end) \r\n    return find_First_Missing(array,start,mid) "
    ],
    "starter_code": "def solution():\n    # Write a python function to find the smallest missing number from the given array.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_628",
    "question": "Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.",
    "solutions": [
      "MAX=1000;\r\ndef replace_spaces(string):\r\n  string=string.strip()\r\n  i=len(string)\r\n  space_count=string.count(' ')\r\n  new_length = i + space_count*2\r\n  if new_length > MAX:\r\n    return -1\r\n  index = new_length-1\r\n  string=list(string)\r\n  for f in range(i-2, new_length-2):\r\n    string.append('0')\r\n  for j in range(i-1, 0, -1):\r\n    if string[j] == ' ':\r\n      string[index] = '0'\r\n      string[index-1] = '2'\r\n      string[index-2] = '%'\r\n      index=index-3\r\n    else:\r\n      string[index] = string[j]\r\n      index -= 1\r\n  return ''.join(string)"
    ],
    "starter_code": "def solution():\n    # Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_629",
    "question": "Write a python function to find even numbers from a mixed list.",
    "solutions": [
      "def Split(list): \r\n    ev_li = [] \r\n    for i in list: \r\n        if (i % 2 == 0): \r\n            ev_li.append(i)  \r\n    return ev_li"
    ],
    "starter_code": "def solution():\n    # Write a python function to find even numbers from a mixed list.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_630",
    "question": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.",
    "solutions": [
      "def adjac(ele, sub = []): \r\n  if not ele: \r\n     yield sub \r\n  else: \r\n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \r\n                for idx in adjac(ele[1:], sub + [j])] \r\ndef get_coordinates(test_tup):\r\n  res = list(adjac(test_tup))\r\n  return (res) "
    ],
    "starter_code": "def solution():\n    # Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_631",
    "question": "Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.",
    "solutions": [
      "import re\r\ntext = 'Python Exercises'\r\ndef replace_spaces(text):\r\n  text =text.replace (\" \", \"_\")\r\n  return (text)\r\n  text =text.replace (\"_\", \" \")\r\n  return (text)"
    ],
    "starter_code": "def solution():\n    # Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_632",
    "question": "Write a python function to move all zeroes to the end of the given list.",
    "solutions": [
      "def move_zero(num_list):\r\n    a = [0 for i in range(num_list.count(0))]\r\n    x = [ i for i in num_list if i != 0]\r\n    x.extend(a)\r\n    return (x)"
    ],
    "starter_code": "def solution():\n    # Write a python function to move all zeroes to the end of the given list.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_633",
    "question": "Write a python function to find the sum of xor of all pairs of numbers in the given array.",
    "solutions": [
      "def pair_OR_Sum(arr,n) : \r\n    ans = 0 \r\n    for i in range(0,n) :    \r\n        for j in range(i + 1,n) :   \r\n            ans = ans + (arr[i] ^ arr[j])          \r\n    return ans "
    ],
    "starter_code": "def solution():\n    # Write a python function to find the sum of xor of all pairs of numbers in the given array.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_634",
    "question": "Write a python function to find the sum of fourth power of first n even natural numbers.",
    "solutions": [
      "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n + 1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j); \r\n    return sum; "
    ],
    "starter_code": "def solution():\n    # Write a python function to find the sum of fourth power of first n even natural numbers.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_635",
    "question": "Write a function to push all values into a heap and then pop off the smallest values one at a time.",
    "solutions": [
      "import heapq as hq\r\ndef heap_sort(iterable):\r\n    h = []\r\n    for value in iterable:\r\n        hq.heappush(h, value)\r\n    return [hq.heappop(h) for i in range(len(h))]"
    ],
    "starter_code": "def solution():\n    # Write a function to push all values into a heap and then pop off the smallest values one at a time.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_636",
    "question": "Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.",
    "solutions": [
      "def Check_Solution(a,b,c): \r\n    if (a == c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); "
    ],
    "starter_code": "def solution():\n    # Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_637",
    "question": "Write a function to check whether the given amount has no profit and no loss",
    "solutions": [
      "def noprofit_noloss(actual_cost,sale_amount): \r\n  if(sale_amount == actual_cost):\r\n    return True\r\n  else:\r\n    return False"
    ],
    "starter_code": "def solution():\n    # Write a function to check whether the given amount has no profit and no loss\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_638",
    "question": "Write a function to calculate wind chill index.",
    "solutions": [
      "import math\r\ndef wind_chill(v,t):\r\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\r\n return int(round(windchill, 0))"
    ],
    "starter_code": "def solution():\n    # Write a function to calculate wind chill index.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_639",
    "question": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.",
    "solutions": [
      "def sample_nam(sample_names):\r\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\r\n  return len(''.join(sample_names))"
    ],
    "starter_code": "def solution():\n    # Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_640",
    "question": "Write a function to remove the parenthesis area in a string.",
    "solutions": [
      "import re\r\ndef remove_parenthesis(items):\r\n for item in items:\r\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))"
    ],
    "starter_code": "def solution():\n    # Write a function to remove the parenthesis area in a string.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_641",
    "question": "Write a function to find the nth nonagonal number.",
    "solutions": [
      "def is_nonagonal(n): \r\n\treturn int(n * (7 * n - 5) / 2) "
    ],
    "starter_code": "def solution():\n    # Write a function to find the nth nonagonal number.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_642",
    "question": "Write a function to remove similar rows from the given tuple matrix.",
    "solutions": [
      "def remove_similar_row(test_list):\r\n  res = set(sorted([tuple(sorted(set(sub))) for sub in test_list]))\r\n  return (res) "
    ],
    "starter_code": "def solution():\n    # Write a function to remove similar rows from the given tuple matrix.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_643",
    "question": "Write a function that matches a word containing 'z', not at the start or end of the word.",
    "solutions": [
      "import re\r\ndef text_match_wordz_middle(text):\r\n        patterns = '\\Bz\\B'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    ],
    "starter_code": "def solution():\n    # Write a function that matches a word containing 'z', not at the start or end of the word.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_644",
    "question": "Write a python function to reverse an array upto a given position.",
    "solutions": [
      "def reverse_Array_Upto_K(input, k): \r\n  return (input[k-1::-1] + input[k:]) "
    ],
    "starter_code": "def solution():\n    # Write a python function to reverse an array upto a given position.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_645",
    "question": "Write a function to find the product of it\u2019s kth index in the given tuples.",
    "solutions": [
      "def get_product(val) : \r\n\tres = 1\r\n\tfor ele in val: \r\n\t\tres *= ele \r\n\treturn res \r\ndef find_k_product(test_list, K):\r\n  res = get_product([sub[K] for sub in test_list])\r\n  return (res) "
    ],
    "starter_code": "def solution():\n    # Write a function to find the product of it\u2019s kth index in the given tuples.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_646",
    "question": "Write a python function to count number of cubes of size k in a cube of size n.",
    "solutions": [
      "def No_of_cubes(N,K):\r\n    No = 0\r\n    No = (N - K + 1)\r\n    No = pow(No, 3)\r\n    return No"
    ],
    "starter_code": "def solution():\n    # Write a python function to count number of cubes of size k in a cube of size n.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_647",
    "question": "Write a function to split a string at uppercase letters.",
    "solutions": [
      "import re\r\ndef split_upperstring(text):\r\n return (re.findall('[A-Z][^A-Z]*', text))"
    ],
    "starter_code": "def solution():\n    # Write a function to split a string at uppercase letters.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_648",
    "question": "Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.",
    "solutions": [
      "from itertools import zip_longest, chain, tee\r\ndef exchange_elements(lst):\r\n    lst1, lst2 = tee(iter(lst), 2)\r\n    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))"
    ],
    "starter_code": "def solution():\n    # Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_649",
    "question": "Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.",
    "solutions": [
      "def sum_Range_list(nums, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += nums[i]                                                                                                                                                                                                  \r\n    return sum_range   "
    ],
    "starter_code": "def solution():\n    # Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_650",
    "question": "Write a python function to check whether the given two arrays are equal or not.",
    "solutions": [
      "def are_Equal(arr1,arr2,n,m):\r\n    if (n != m):\r\n        return False\r\n    arr1.sort()\r\n    arr2.sort()\r\n    for i in range(0,n - 1):\r\n        if (arr1[i] != arr2[i]):\r\n            return False\r\n    return True"
    ],
    "starter_code": "def solution():\n    # Write a python function to check whether the given two arrays are equal or not.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_651",
    "question": "Write a function to check if one tuple is a subset of another tuple.",
    "solutions": [
      "def check_subset(test_tup1, test_tup2):\r\n  res = set(test_tup2).issubset(test_tup1)\r\n  return (res) "
    ],
    "starter_code": "def solution():\n    # Write a function to check if one tuple is a subset of another tuple.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_652",
    "question": "Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.",
    "solutions": [
      "def matrix_to_list(test_list):\r\n  temp = [ele for sub in test_list for ele in sub]\r\n  res = list(zip(*temp))\r\n  return (str(res))"
    ],
    "starter_code": "def solution():\n    # Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_653",
    "question": "Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.",
    "solutions": [
      "from collections import defaultdict\r\ndef grouping_dictionary(l):\r\n    d = defaultdict(list)\r\n    for k, v in l:\r\n        d[k].append(v)\r\n    return d"
    ],
    "starter_code": "def solution():\n    # Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_654",
    "question": "Write a function to find the perimeter of a rectangle.",
    "solutions": [
      "def rectangle_perimeter(l,b):\r\n  perimeter=2*(l+b)\r\n  return perimeter"
    ],
    "starter_code": "def solution():\n    # Write a function to find the perimeter of a rectangle.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_655",
    "question": "Write a python function to find the sum of fifth power of n natural numbers.",
    "solutions": [
      "def fifth_Power_Sum(n) : \r\n    sm = 0 \r\n    for i in range(1,n+1) : \r\n        sm = sm + (i*i*i*i*i) \r\n    return sm "
    ],
    "starter_code": "def solution():\n    # Write a python function to find the sum of fifth power of n natural numbers.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_656",
    "question": "Write a python function to find the minimum sum of absolute differences of two arrays.",
    "solutions": [
      "def find_Min_Sum(a,b,n): \r\n    a.sort() \r\n    b.sort() \r\n    sum = 0  \r\n    for i in range(n): \r\n        sum = sum + abs(a[i] - b[i]) \r\n    return sum"
    ],
    "starter_code": "def solution():\n    # Write a python function to find the minimum sum of absolute differences of two arrays.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_657",
    "question": "Write a python function to find the first digit in factorial of a given number.",
    "solutions": [
      "import math \r\ndef first_Digit(n) : \r\n    fact = 1\r\n    for i in range(2,n + 1) : \r\n        fact = fact * i \r\n        while (fact % 10 == 0) :  \r\n            fact = int(fact / 10) \r\n    while (fact >= 10) : \r\n        fact = int(fact / 10) \r\n    return math.floor(fact) "
    ],
    "starter_code": "def solution():\n    # Write a python function to find the first digit in factorial of a given number.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_658",
    "question": "Write a function to find the item with maximum occurrences in a given list.",
    "solutions": [
      "def max_occurrences(list1):\r\n    max_val = 0\r\n    result = list1[0] \r\n    for i in list1:\r\n        occu = list1.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result"
    ],
    "starter_code": "def solution():\n    # Write a function to find the item with maximum occurrences in a given list.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_659",
    "question": "Write a python function to print duplicants from a list of integers.",
    "solutions": [
      "def Repeat(x): \r\n    _size = len(x) \r\n    repeated = [] \r\n    for i in range(_size): \r\n        k = i + 1\r\n        for j in range(k, _size): \r\n            if x[i] == x[j] and x[i] not in repeated: \r\n                repeated.append(x[i]) \r\n    return repeated "
    ],
    "starter_code": "def solution():\n    # Write a python function to print duplicants from a list of integers.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_660",
    "question": "Write a python function to choose points from two ranges such that no point lies in both the ranges.",
    "solutions": [
      "def find_Points(l1,r1,l2,r2): \r\n    x = min(l1,l2) if (l1 != l2) else -1\r\n    y = max(r1,r2) if (r1 != r2) else -1\r\n    return (x,y)"
    ],
    "starter_code": "def solution():\n    # Write a python function to choose points from two ranges such that no point lies in both the ranges.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_661",
    "question": "Write a function to find the maximum sum that can be formed which has no three consecutive elements present.",
    "solutions": [
      "def max_sum_of_three_consecutive(arr, n): \r\n\tsum = [0 for k in range(n)] \r\n\tif n >= 1: \r\n\t\tsum[0] = arr[0] \r\n\tif n >= 2: \r\n\t\tsum[1] = arr[0] + arr[1] \r\n\tif n > 2: \r\n\t\tsum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) \r\n\tfor i in range(3, n): \r\n\t\tsum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]) \r\n\treturn sum[n-1]"
    ],
    "starter_code": "def solution():\n    # Write a function to find the maximum sum that can be formed which has no three consecutive elements present.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_662",
    "question": "Write a function to sort a list in a dictionary.",
    "solutions": [
      "def sorted_dict(dict1):\r\n  sorted_dict = {x: sorted(y) for x, y in dict1.items()}\r\n  return sorted_dict"
    ],
    "starter_code": "def solution():\n    # Write a function to sort a list in a dictionary.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_663",
    "question": "Write a function to find the largest possible value of k such that k modulo x is y.",
    "solutions": [
      "import sys \r\ndef find_max_val(n, x, y): \r\n\tans = -sys.maxsize \r\n\tfor k in range(n + 1): \r\n\t\tif (k % x == y): \r\n\t\t\tans = max(ans, k) \r\n\treturn (ans if (ans >= 0 and\r\n\t\t\t\t\tans <= n) else -1) "
    ],
    "starter_code": "def solution():\n    # Write a function to find the largest possible value of k such that k modulo x is y.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_664",
    "question": "Write a python function to find the average of even numbers till a given even number.",
    "solutions": [
      "def average_Even(n) : \r\n    if (n% 2!= 0) : \r\n        return (\"Invalid Input\") \r\n        return -1  \r\n    sm = 0\r\n    count = 0\r\n    while (n>= 2) : \r\n        count = count+1\r\n        sm = sm+n \r\n        n = n-2\r\n    return sm // count "
    ],
    "starter_code": "def solution():\n    # Write a python function to find the average of even numbers till a given even number.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_665",
    "question": "Write a python function to shift first element to the end of given list.",
    "solutions": [
      "def move_last(num_list):\r\n    a = [num_list[0] for i in range(num_list.count(num_list[0]))]\r\n    x = [ i for i in num_list if i != num_list[0]]\r\n    x.extend(a)\r\n    return (x)"
    ],
    "starter_code": "def solution():\n    # Write a python function to shift first element to the end of given list.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_666",
    "question": "Write a function to count occurrence of a character in a string.",
    "solutions": [
      "def count_char(string,char):\r\n count = 0\r\n for i in range(len(string)):\r\n    if(string[i] == char):\r\n        count = count + 1\r\n return count"
    ],
    "starter_code": "def solution():\n    # Write a function to count occurrence of a character in a string.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_667",
    "question": "Write a python function to count number of vowels in the string.",
    "solutions": [
      "def Check_Vow(string, vowels): \r\n    final = [each for each in string if each in vowels] \r\n    return(len(final)) \r\n"
    ],
    "starter_code": "def solution():\n    # Write a python function to count number of vowels in the string.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_668",
    "question": "Write a python function to replace multiple occurence of character by single.",
    "solutions": [
      "import re \r\ndef replace(string, char): \r\n    pattern = char + '{2,}'\r\n    string = re.sub(pattern, char, string) \r\n    return string "
    ],
    "starter_code": "def solution():\n    # Write a python function to replace multiple occurence of character by single.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_669",
    "question": "Write a function to check whether the given ip address is valid or not using regex.",
    "solutions": [
      "import re \r\nregex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''\r\ndef check_IP(Ip): \r\n\tif(re.search(regex, Ip)): \r\n\t\treturn (\"Valid IP address\") \r\n\telse: \r\n\t\treturn (\"Invalid IP address\") "
    ],
    "starter_code": "def solution():\n    # Write a function to check whether the given ip address is valid or not using regex.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_670",
    "question": "Write a python function to check whether a sequence of numbers has a decreasing trend or not.",
    "solutions": [
      "def decreasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False"
    ],
    "starter_code": "def solution():\n    # Write a python function to check whether a sequence of numbers has a decreasing trend or not.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_671",
    "question": "Write a python function to set the right most unset bit.",
    "solutions": [
      "import math \r\ndef get_Pos_Of_Right_most_Set_Bit(n): \r\n    return int(math.log2(n&-n)+1)   \r\ndef set_Right_most_Unset_Bit(n): \r\n    if (n == 0): \r\n        return 1\r\n    if ((n & (n + 1)) == 0):     \r\n        return n \r\n    pos = get_Pos_Of_Right_most_Set_Bit(~n)      \r\n    return ((1 << (pos - 1)) | n) "
    ],
    "starter_code": "def solution():\n    # Write a python function to set the right most unset bit.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_672",
    "question": "Write a function to find maximum of three numbers.",
    "solutions": [
      "def max_of_three(num1,num2,num3): \r\n    if (num1 >= num2) and (num1 >= num3):\r\n       lnum = num1\r\n    elif (num2 >= num1) and (num2 >= num3):\r\n       lnum = num2\r\n    else:\r\n       lnum = num3\r\n    return lnum"
    ],
    "starter_code": "def solution():\n    # Write a function to find maximum of three numbers.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_673",
    "question": "Write a python function to convert a list of multiple integers into a single integer.",
    "solutions": [
      "def convert(list): \r\n    s = [str(i) for i in list] \r\n    res = int(\"\".join(s))  \r\n    return (res) "
    ],
    "starter_code": "def solution():\n    # Write a python function to convert a list of multiple integers into a single integer.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_674",
    "question": "Write a function to remove duplicate words from a given string using collections module.",
    "solutions": [
      "from collections import OrderedDict\r\ndef remove_duplicate(string):\r\n  result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())\r\n  return result"
    ],
    "starter_code": "def solution():\n    # Write a function to remove duplicate words from a given string using collections module.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_675",
    "question": "Write a function to add two integers. however, if the sum is between the given range it will return 20.",
    "solutions": [
      "def sum_nums(x, y,m,n):\r\n    sum_nums= x + y\r\n    if sum_nums in range(m, n):\r\n        return 20\r\n    else:\r\n        return sum_nums"
    ],
    "starter_code": "def solution():\n    # Write a function to add two integers. however, if the sum is between the given range it will return 20.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_676",
    "question": "Write a function to remove everything except alphanumeric characters from the given string by using regex.",
    "solutions": [
      "import re\r\ndef remove_extra_char(text1):\r\n  pattern = re.compile('[\\W_]+')\r\n  return (pattern.sub('', text1))"
    ],
    "starter_code": "def solution():\n    # Write a function to remove everything except alphanumeric characters from the given string by using regex.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_677",
    "question": "Write a function to check if the triangle is valid or not.",
    "solutions": [
      "def validity_triangle(a,b,c):\r\n total = a + b + c\r\n if total == 180:\r\n    return True\r\n else:\r\n    return False"
    ],
    "starter_code": "def solution():\n    # Write a function to check if the triangle is valid or not.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_678",
    "question": "Write a python function to remove spaces from a given string.",
    "solutions": [
      "def remove_spaces(str1):\r\n  str1 = str1.replace(' ','')\r\n  return str1"
    ],
    "starter_code": "def solution():\n    # Write a python function to remove spaces from a given string.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_679",
    "question": "Write a function to access dictionary key\u2019s element by index.",
    "solutions": [
      "def access_key(ditionary,key):\r\n  return list(ditionary)[key]"
    ],
    "starter_code": "def solution():\n    # Write a function to access dictionary key\u2019s element by index.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_680",
    "question": "Write a python function to check whether a sequence of numbers has an increasing trend or not.",
    "solutions": [
      "def increasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False"
    ],
    "starter_code": "def solution():\n    # Write a python function to check whether a sequence of numbers has an increasing trend or not.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_681",
    "question": "Write a python function to find the smallest prime divisor of a number.",
    "solutions": [
      "def smallest_Divisor(n): \r\n    if (n % 2 == 0): \r\n        return 2; \r\n    i = 3;  \r\n    while (i*i <= n): \r\n        if (n % i == 0): \r\n            return i; \r\n        i += 2; \r\n    return n; "
    ],
    "starter_code": "def solution():\n    # Write a python function to find the smallest prime divisor of a number.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_682",
    "question": "Write a function to multiply two lists using map and lambda function.",
    "solutions": [
      "def mul_list(nums1,nums2):\r\n  result = map(lambda x, y: x * y, nums1, nums2)\r\n  return list(result)"
    ],
    "starter_code": "def solution():\n    # Write a function to multiply two lists using map and lambda function.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_683",
    "question": "Write a python function to check whether the given number can be represented by sum of two squares or not.",
    "solutions": [
      "def sum_Square(n) : \r\n    i = 1 \r\n    while i*i <= n : \r\n        j = 1\r\n        while (j*j <= n) : \r\n            if (i*i+j*j == n) : \r\n                return True\r\n            j = j+1\r\n        i = i+1     \r\n    return False"
    ],
    "starter_code": "def solution():\n    # Write a python function to check whether the given number can be represented by sum of two squares or not.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_684",
    "question": "Write a python function to count occurences of a character in a repeated string.",
    "solutions": [
      "def count_Char(str,x): \r\n    count = 0\r\n    for i in range(len(str)):  \r\n        if (str[i] == x) : \r\n            count += 1\r\n    n = 10\r\n    repititions = n // len(str)  \r\n    count = count * repititions  \r\n    l = n % len(str)  \r\n    for i in range(l): \r\n        if (str[i] == x):  \r\n            count += 1\r\n    return count  "
    ],
    "starter_code": "def solution():\n    # Write a python function to count occurences of a character in a repeated string.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_685",
    "question": "Write a python function to find sum of prime numbers between 1 to n.",
    "solutions": [
      "def sum_Of_Primes(n): \r\n    prime = [True] * (n + 1)  \r\n    p = 2\r\n    while p * p <= n: \r\n        if prime[p] == True:  \r\n            i = p * 2\r\n            while i <= n: \r\n                prime[i] = False\r\n                i += p \r\n        p += 1    \r\n    sum = 0\r\n    for i in range (2,n + 1): \r\n        if(prime[i]): \r\n            sum += i \r\n    return sum"
    ],
    "starter_code": "def solution():\n    # Write a python function to find sum of prime numbers between 1 to n.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_686",
    "question": "Write a function to find the frequency of each element in the given list.",
    "solutions": [
      "from collections import defaultdict \r\ndef freq_element(test_tup):\r\n  res = defaultdict(int)\r\n  for ele in test_tup:\r\n    res[ele] += 1\r\n  return (str(dict(res))) "
    ],
    "starter_code": "def solution():\n    # Write a function to find the frequency of each element in the given list.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_687",
    "question": "Write a function to find the greatest common divisor (gcd) of two integers by using recursion.",
    "solutions": [
      "def recur_gcd(a, b):\r\n\tlow = min(a, b)\r\n\thigh = max(a, b)\r\n\tif low == 0:\r\n\t\treturn high\r\n\telif low == 1:\r\n\t\treturn 1\r\n\telse:\r\n\t\treturn recur_gcd(low, high%low)"
    ],
    "starter_code": "def solution():\n    # Write a function to find the greatest common divisor (gcd) of two integers by using recursion.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_688",
    "question": "Write a function to get the length of a complex number.",
    "solutions": [
      "import cmath\r\ndef len_complex(a,b):\r\n  cn=complex(a,b)\r\n  length=abs(cn)\r\n  return length"
    ],
    "starter_code": "def solution():\n    # Write a function to get the length of a complex number.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_689",
    "question": "## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block",
    "solutions": [
      "def min_jumps(arr, n):\r\n\tjumps = [0 for i in range(n)]\r\n\tif (n == 0) or (arr[0] == 0):\r\n\t\treturn float('inf')\r\n\tjumps[0] = 0\r\n\tfor i in range(1, n):\r\n\t\tjumps[i] = float('inf')\r\n\t\tfor j in range(i):\r\n\t\t\tif (i <= j + arr[j]) and (jumps[j] != float('inf')):\r\n\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1)\r\n\t\t\t\tbreak\r\n\treturn jumps[n-1]"
    ],
    "starter_code": "def solution():\n    # ## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_690",
    "question": "Write a function to multiply consecutive numbers of a given list.",
    "solutions": [
      "def mul_consecutive_nums(nums):\r\n    result = [b*a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"
    ],
    "starter_code": "def solution():\n    # Write a function to multiply consecutive numbers of a given list.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_691",
    "question": "Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.",
    "solutions": [
      "from itertools import groupby \r\ndef group_element(test_list):\r\n  res = dict()\r\n  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):\r\n    res[key] = [ele[0] for ele in val] \r\n  return (res)\r\n"
    ],
    "starter_code": "def solution():\n    # Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_692",
    "question": "Write a python function to find the last two digits in factorial of a given number.",
    "solutions": [
      "def last_Two_Digits(N): \r\n    if (N >= 10): \r\n        return\r\n    fac = 1\r\n    for i in range(1,N + 1): \r\n        fac = (fac * i) % 100\r\n    return (fac) "
    ],
    "starter_code": "def solution():\n    # Write a python function to find the last two digits in factorial of a given number.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_693",
    "question": "Write a function to remove multiple spaces in a string by using regex.",
    "solutions": [
      "import re\r\ndef remove_multiple_spaces(text1):\r\n  return (re.sub(' +',' ',text1))"
    ],
    "starter_code": "def solution():\n    # Write a function to remove multiple spaces in a string by using regex.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_694",
    "question": "Write a function to extract unique values from the given dictionary values.",
    "solutions": [
      "def extract_unique(test_dict):\r\n  res = list(sorted({ele for val in test_dict.values() for ele in val}))\r\n  return res"
    ],
    "starter_code": "def solution():\n    # Write a function to extract unique values from the given dictionary values.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_695",
    "question": "Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.",
    "solutions": [
      "def check_greater(test_tup1, test_tup2):\r\n  res = all(x < y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) "
    ],
    "starter_code": "def solution():\n    # Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_696",
    "question": "Write a function to zip two given lists of lists.",
    "solutions": [
      "def zip_list(list1,list2):  \r\n result = list(map(list.__add__, list1, list2)) \r\n return result"
    ],
    "starter_code": "def solution():\n    # Write a function to zip two given lists of lists.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_697",
    "question": "Write a function to find number of even elements in the given list using lambda function.",
    "solutions": [
      "def count_even(array_nums):\r\n   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))\r\n   return count_even"
    ],
    "starter_code": "def solution():\n    # Write a function to find number of even elements in the given list using lambda function.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_698",
    "question": "Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.",
    "solutions": [
      "def sort_dict_item(test_dict):\r\n  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}\r\n  return  (res) \r\n"
    ],
    "starter_code": "def solution():\n    # Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_699",
    "question": "Write a python function to find the minimum number of swaps required to convert one binary string to another.",
    "solutions": [
      "def min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) : \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") "
    ],
    "starter_code": "def solution():\n    # Write a python function to find the minimum number of swaps required to convert one binary string to another.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_700",
    "question": "Write a function to count the number of elements in a list which are within a specific range.",
    "solutions": [
      "def count_range_in_list(li, min, max):\r\n\tctr = 0\r\n\tfor x in li:\r\n\t\tif min <= x <= max:\r\n\t\t\tctr += 1\r\n\treturn ctr"
    ],
    "starter_code": "def solution():\n    # Write a function to count the number of elements in a list which are within a specific range.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_701",
    "question": "Write a function to find the equilibrium index of the given array.",
    "solutions": [
      "def equilibrium_index(arr):\r\n  total_sum = sum(arr)\r\n  left_sum=0\r\n  for i, num in enumerate(arr):\r\n    total_sum -= num\r\n    if left_sum == total_sum:\r\n      return i\r\n    left_sum += num\r\n  return -1"
    ],
    "starter_code": "def solution():\n    # Write a function to find the equilibrium index of the given array.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_702",
    "question": "Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.",
    "solutions": [
      "def find_ind(key, i, n, \r\n\t\t\tk, arr):\r\n\tind = -1\r\n\tstart = i + 1\r\n\tend = n - 1;\r\n\twhile (start < end):\r\n\t\tmid = int(start +\r\n\t\t\t\t(end - start) / 2)\r\n\t\tif (arr[mid] - key <= k):\r\n\t\t\tind = mid\r\n\t\t\tstart = mid + 1\r\n\t\telse:\r\n\t\t\tend = mid\r\n\treturn ind\r\ndef removals(arr, n, k):\r\n\tans = n - 1\r\n\tarr.sort()\r\n\tfor i in range(0, n):\r\n\t\tj = find_ind(arr[i], i, \r\n\t\t\t\t\tn, k, arr)\r\n\t\tif (j != -1):\r\n\t\t\tans = min(ans, n -\r\n\t\t\t\t\t\t(j - i + 1))\r\n\treturn ans"
    ],
    "starter_code": "def solution():\n    # Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_703",
    "question": "Write a function to check whether the given key is present in the dictionary or not.",
    "solutions": [
      "def is_key_present(d,x):\r\n  if x in d:\r\n    return True\r\n  else:\r\n     return False"
    ],
    "starter_code": "def solution():\n    # Write a function to check whether the given key is present in the dictionary or not.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_704",
    "question": "Write a function to calculate the harmonic sum of n-1.",
    "solutions": [
      "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1))"
    ],
    "starter_code": "def solution():\n    # Write a function to calculate the harmonic sum of n-1.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_705",
    "question": "Write a function to sort a list of lists by length and value.",
    "solutions": [
      "def sort_sublists(list1):\r\n      list1.sort()  \r\n      list1.sort(key=len)\r\n      return  list1"
    ],
    "starter_code": "def solution():\n    # Write a function to sort a list of lists by length and value.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_706",
    "question": "Write a function to find whether an array is subset of another array.",
    "solutions": [
      "def is_subset(arr1, m, arr2, n): \r\n\thashset = set() \r\n\tfor i in range(0, m): \r\n\t\thashset.add(arr1[i]) \r\n\tfor i in range(0, n): \r\n\t\tif arr2[i] in hashset: \r\n\t\t\tcontinue\r\n\t\telse: \r\n\t\t\treturn False\r\n\treturn True\t\t"
    ],
    "starter_code": "def solution():\n    # Write a function to find whether an array is subset of another array.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_707",
    "question": "Write a python function to count the total set bits from 1 to n.",
    "solutions": [
      "def count_Set_Bits(n) :  \r\n    n += 1; \r\n    powerOf2 = 2;   \r\n    cnt = n // 2;  \r\n    while (powerOf2 <= n) : \r\n        totalPairs = n // powerOf2;  \r\n        cnt += (totalPairs // 2) * powerOf2;  \r\n        if (totalPairs & 1) : \r\n            cnt += (n % powerOf2) \r\n        else : \r\n            cnt += 0\r\n        powerOf2 <<= 1;    \r\n    return cnt;  "
    ],
    "starter_code": "def solution():\n    # Write a python function to count the total set bits from 1 to n.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_708",
    "question": "Write a python function to convert a string to a list.",
    "solutions": [
      "def Convert(string): \r\n    li = list(string.split(\" \")) \r\n    return li "
    ],
    "starter_code": "def solution():\n    # Write a python function to convert a string to a list.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_709",
    "question": "Write a function to count unique keys for each value present in the tuple.",
    "solutions": [
      "from collections import defaultdict \r\ndef get_unique(test_list):\r\n  res = defaultdict(list)\r\n  for sub in test_list:\r\n    res[sub[1]].append(sub[0])\r\n  res = dict(res)\r\n  res_dict = dict()\r\n  for key in res:\r\n    res_dict[key] = len(list(set(res[key])))\r\n  return (str(res_dict)) "
    ],
    "starter_code": "def solution():\n    # Write a function to count unique keys for each value present in the tuple.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_710",
    "question": "Write a function to access the initial and last data of the given tuple record.",
    "solutions": [
      "def front_and_rear(test_tup):\r\n  res = (test_tup[0], test_tup[-1])\r\n  return (res) "
    ],
    "starter_code": "def solution():\n    # Write a function to access the initial and last data of the given tuple record.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_711",
    "question": "Write a python function to check whether the product of digits of a number at even and odd places is equal or not.",
    "solutions": [
      "def product_Equal(n): \r\n    if n < 10: \r\n        return False\r\n    prodOdd = 1; prodEven = 1\r\n    while n > 0: \r\n        digit = n % 10\r\n        prodOdd *= digit \r\n        n = n//10\r\n        if n == 0: \r\n            break; \r\n        digit = n % 10\r\n        prodEven *= digit \r\n        n = n//10\r\n    if prodOdd == prodEven: \r\n        return True\r\n    return False"
    ],
    "starter_code": "def solution():\n    # Write a python function to check whether the product of digits of a number at even and odd places is equal or not.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_712",
    "question": "Write a function to remove duplicates from a list of lists.",
    "solutions": [
      "import itertools\r\ndef remove_duplicate(list1):\r\n list.sort(list1)\r\n remove_duplicate = list(list1 for list1,_ in itertools.groupby(list1))\r\n return remove_duplicate"
    ],
    "starter_code": "def solution():\n    # Write a function to remove duplicates from a list of lists.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_713",
    "question": "Write a function to check if the given tuple contains all valid values or not.",
    "solutions": [
      "def check_valid(test_tup):\r\n  res = not any(map(lambda ele: not ele, test_tup))\r\n  return (res) "
    ],
    "starter_code": "def solution():\n    # Write a function to check if the given tuple contains all valid values or not.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_714",
    "question": "Write a python function to count the number of distinct power of prime factor of given number.",
    "solutions": [
      "def count_Fac(n):  \r\n    m = n \r\n    count = 0\r\n    i = 2\r\n    while((i * i) <= m): \r\n        total = 0\r\n        while (n % i == 0): \r\n            n /= i \r\n            total += 1 \r\n        temp = 0\r\n        j = 1\r\n        while((temp + j) <= total): \r\n            temp += j \r\n            count += 1\r\n            j += 1 \r\n        i += 1\r\n    if (n != 1): \r\n        count += 1 \r\n    return count "
    ],
    "starter_code": "def solution():\n    # Write a python function to count the number of distinct power of prime factor of given number.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_715",
    "question": "Write a function to convert the given string of integers into a tuple.",
    "solutions": [
      "def str_to_tuple(test_str):\r\n  res = tuple(map(int, test_str.split(', ')))\r\n  return (res) "
    ],
    "starter_code": "def solution():\n    # Write a function to convert the given string of integers into a tuple.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_716",
    "question": "Write a function to find the perimeter of a rombus.",
    "solutions": [
      "def rombus_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter"
    ],
    "starter_code": "def solution():\n    # Write a function to find the perimeter of a rombus.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_717",
    "question": "Write a function to calculate the standard deviation.",
    "solutions": [
      "import math\r\nimport sys\r\ndef sd_calc(data):\r\n    n = len(data)\r\n    if n <= 1:\r\n        return 0.0\r\n    mean, sd = avg_calc(data), 0.0\r\n    for el in data:\r\n        sd += (float(el) - mean)**2\r\n    sd = math.sqrt(sd / float(n-1))\r\n    return sd\r\ndef avg_calc(ls):\r\n    n, mean = len(ls), 0.0\r\n    if n <= 1:\r\n        return ls[0]\r\n    for el in ls:\r\n        mean = mean + float(el)\r\n    mean = mean / float(n)\r\n    return mean"
    ],
    "starter_code": "def solution():\n    # Write a function to calculate the standard deviation.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_718",
    "question": "Write a function to create a list taking alternate elements from another given list.",
    "solutions": [
      "def alternate_elements(list1):\r\n    result=[]\r\n    for item in list1[::2]:\r\n        result.append(item)\r\n    return result "
    ],
    "starter_code": "def solution():\n    # Write a function to create a list taking alternate elements from another given list.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_719",
    "question": "Write a function that matches a string that has an a followed by zero or more b's.",
    "solutions": [
      "import re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    ],
    "starter_code": "def solution():\n    # Write a function that matches a string that has an a followed by zero or more b's.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_720",
    "question": "Write a function to add a dictionary to the tuple.",
    "solutions": [
      "def add_dict_to_tuple(test_tup, test_dict):\r\n  test_tup = list(test_tup)\r\n  test_tup.append(test_dict)\r\n  test_tup = tuple(test_tup)\r\n  return (test_tup) "
    ],
    "starter_code": "def solution():\n    # Write a function to add a dictionary to the tuple.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_721",
    "question": "Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.",
    "solutions": [
      "M = 100\r\ndef maxAverageOfPath(cost, N): \r\n\tdp = [[0 for i in range(N + 1)] for j in range(N + 1)] \r\n\tdp[0][0] = cost[0][0] \r\n\tfor i in range(1, N): \r\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0] \r\n\tfor j in range(1, N): \r\n\t\tdp[0][j] = dp[0][j - 1] + cost[0][j] \r\n\tfor i in range(1, N): \r\n\t\tfor j in range(1, N): \r\n\t\t\tdp[i][j] = max(dp[i - 1][j], \r\n\t\t\t\t\t\tdp[i][j - 1]) + cost[i][j] \r\n\treturn dp[N - 1][N - 1] / (2 * N - 1)"
    ],
    "starter_code": "def solution():\n    # Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_722",
    "question": "Write a function to filter the height and width of students which are stored in a dictionary.",
    "solutions": [
      "def filter_data(students,h,w):\r\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\r\n    return result    "
    ],
    "starter_code": "def solution():\n    # Write a function to filter the height and width of students which are stored in a dictionary.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_723",
    "question": "Write a function to count the same pair in two given lists using map function.",
    "solutions": [
      "from operator import eq\r\ndef count_same_pair(nums1, nums2):\r\n    result = sum(map(eq, nums1, nums2))\r\n    return result"
    ],
    "starter_code": "def solution():\n    # Write a function to count the same pair in two given lists using map function.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_724",
    "question": "Write a function to calculate the sum of all digits of the base to the specified power.",
    "solutions": [
      "def power_base_sum(base, power):\r\n    return sum([int(i) for i in str(pow(base, power))])"
    ],
    "starter_code": "def solution():\n    # Write a function to calculate the sum of all digits of the base to the specified power.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_725",
    "question": "Write a function to extract values between quotation marks of the given string by using regex.",
    "solutions": [
      "import re\r\ndef extract_quotation(text1):\r\n  return (re.findall(r'\"(.*?)\"', text1))"
    ],
    "starter_code": "def solution():\n    # Write a function to extract values between quotation marks of the given string by using regex.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_726",
    "question": "Write a function to multiply the adjacent elements of the given tuple.",
    "solutions": [
      "def multiply_elements(test_tup):\r\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "
    ],
    "starter_code": "def solution():\n    # Write a function to multiply the adjacent elements of the given tuple.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_727",
    "question": "Write a function to remove all characters except letters and numbers using regex",
    "solutions": [
      "import re \r\ndef remove_char(S):\r\n  result = re.sub('[\\W_]+', '', S) \r\n  return result"
    ],
    "starter_code": "def solution():\n    # Write a function to remove all characters except letters and numbers using regex\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_728",
    "question": "Write a function to sum elements in two lists.",
    "solutions": [
      "def sum_list(lst1,lst2):\r\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \r\n  return res_list"
    ],
    "starter_code": "def solution():\n    # Write a function to sum elements in two lists.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_729",
    "question": "Write a function to add two lists using map and lambda function.",
    "solutions": [
      "def add_list(nums1,nums2):\r\n  result = map(lambda x, y: x + y, nums1, nums2)\r\n  return list(result)"
    ],
    "starter_code": "def solution():\n    # Write a function to add two lists using map and lambda function.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_730",
    "question": "Write a function to remove consecutive duplicates of a given list.",
    "solutions": [
      "from itertools import groupby\r\ndef consecutive_duplicates(nums):\r\n    return [key for key, group in groupby(nums)] "
    ],
    "starter_code": "def solution():\n    # Write a function to remove consecutive duplicates of a given list.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_731",
    "question": "Write a function to find the lateral surface area of a cone.",
    "solutions": [
      "import math\r\ndef lateralsurface_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  LSA = math.pi * r  * l\r\n  return LSA"
    ],
    "starter_code": "def solution():\n    # Write a function to find the lateral surface area of a cone.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_732",
    "question": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.",
    "solutions": [
      "import re\r\ndef replace_specialchar(text):\r\n return (re.sub(\"[ ,.]\", \":\", text))\r"
    ],
    "starter_code": "def solution():\n    # Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_733",
    "question": "Write a function to find the index of the first occurrence of a given number in a sorted array.",
    "solutions": [
      "def find_first_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            right = mid - 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result"
    ],
    "starter_code": "def solution():\n    # Write a function to find the index of the first occurrence of a given number in a sorted array.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_734",
    "question": "Write a python function to find sum of products of all possible subarrays.",
    "solutions": [
      "def sum_Of_Subarray_Prod(arr,n):\r\n    ans = 0\r\n    res = 0\r\n    i = n - 1\r\n    while (i >= 0):\r\n        incr = arr[i]*(1 + res)\r\n        ans += incr\r\n        res = incr\r\n        i -= 1\r\n    return (ans)"
    ],
    "starter_code": "def solution():\n    # Write a python function to find sum of products of all possible subarrays.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_735",
    "question": "Write a python function to toggle bits of the number except the first and the last bit.",
    "solutions": [
      "def set_middle_bits(n):  \r\n    n |= n >> 1; \r\n    n |= n >> 2; \r\n    n |= n >> 4; \r\n    n |= n >> 8; \r\n    n |= n >> 16;  \r\n    return (n >> 1) ^ 1\r\ndef toggle_middle_bits(n): \r\n    if (n == 1): \r\n        return 1\r\n    return n ^ set_middle_bits(n) "
    ],
    "starter_code": "def solution():\n    # Write a python function to toggle bits of the number except the first and the last bit.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_736",
    "question": "Write a function to locate the left insertion point for a specified value in sorted order.",
    "solutions": [
      "import bisect\r\ndef left_insertion(a, x):\r\n    i = bisect.bisect_left(a, x)\r\n    return i"
    ],
    "starter_code": "def solution():\n    # Write a function to locate the left insertion point for a specified value in sorted order.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_737",
    "question": "Write a function to check whether the given string is starting with a vowel or not using regex.",
    "solutions": [
      "import re \r\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\r\ndef check_str(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Valid\") \r\n\telse: \r\n\t\treturn (\"Invalid\") "
    ],
    "starter_code": "def solution():\n    # Write a function to check whether the given string is starting with a vowel or not using regex.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_738",
    "question": "Write a function to calculate the geometric sum of n-1.",
    "solutions": [
      "def geometric_sum(n):\r\n  if n < 0:\r\n    return 0\r\n  else:\r\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)"
    ],
    "starter_code": "def solution():\n    # Write a function to calculate the geometric sum of n-1.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_739",
    "question": "Write a python function to find the index of smallest triangular number with n digits.",
    "solutions": [
      "import math \r\ndef find_Index(n): \r\n    x = math.sqrt(2 * math.pow(10,(n - 1))); \r\n    return round(x); "
    ],
    "starter_code": "def solution():\n    # Write a python function to find the index of smallest triangular number with n digits.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_740",
    "question": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements.",
    "solutions": [
      "def tuple_to_dict(test_tup):\r\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\r\n  return (res) "
    ],
    "starter_code": "def solution():\n    # Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_741",
    "question": "Write a python function to check whether all the characters are same or not.",
    "solutions": [
      "def all_Characters_Same(s) :\r\n    n = len(s)\r\n    for i in range(1,n) :\r\n        if s[i] != s[0] :\r\n            return False\r\n    return True"
    ],
    "starter_code": "def solution():\n    # Write a python function to check whether all the characters are same or not.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_742",
    "question": "Write a function to caluclate the area of a tetrahedron.",
    "solutions": [
      "import math\r\ndef area_tetrahedron(side):\r\n  area = math.sqrt(3)*(side*side)\r\n  return area"
    ],
    "starter_code": "def solution():\n    # Write a function to caluclate the area of a tetrahedron.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_743",
    "question": "Write a function to rotate a given list by specified number of items to the right direction.",
    "solutions": [
      "def rotate_right(list1,m,n):\r\n  result =  list1[-(m):]+list1[:-(n)]\r\n  return result"
    ],
    "starter_code": "def solution():\n    # Write a function to rotate a given list by specified number of items to the right direction.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_744",
    "question": "Write a function to check if the given tuple has any none value or not.",
    "solutions": [
      "def check_none(test_tup):\r\n  res = any(map(lambda ele: ele is None, test_tup))\r\n  return (res) "
    ],
    "starter_code": "def solution():\n    # Write a function to check if the given tuple has any none value or not.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_745",
    "question": "Write a function to find numbers within a given range where every number is divisible by every digit it contains.",
    "solutions": [
      "def divisible_by_digits(startnum, endnum):\r\n    return [n for n in range(startnum, endnum+1) \\\r\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]"
    ],
    "starter_code": "def solution():\n    # Write a function to find numbers within a given range where every number is divisible by every digit it contains.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_746",
    "question": "Write a function to find area of a sector.",
    "solutions": [
      "def sector_area(r,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    sectorarea = (pi*r**2) * (a/360)\r\n    return sectorarea"
    ],
    "starter_code": "def solution():\n    # Write a function to find area of a sector.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_747",
    "question": "Write a function to find the longest common subsequence for the given three string sequence.",
    "solutions": [
      "def lcs_of_three(X, Y, Z, m, n, o): \r\n\tL = [[[0 for i in range(o+1)] for j in range(n+1)] \r\n\t\tfor k in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tfor k in range(o+1): \r\n\t\t\t\tif (i == 0 or j == 0 or k == 0): \r\n\t\t\t\t\tL[i][j][k] = 0\r\n\t\t\t\telif (X[i-1] == Y[j-1] and\r\n\t\t\t\t\tX[i-1] == Z[k-1]): \r\n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1\r\n\t\t\t\telse: \r\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \r\n\t\t\t\t\tL[i][j-1][k]), \r\n\t\t\t\t\t\t\t\t\tL[i][j][k-1]) \r\n\treturn L[m][n][o]"
    ],
    "starter_code": "def solution():\n    # Write a function to find the longest common subsequence for the given three string sequence.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_748",
    "question": "Write a function to put spaces between words starting with capital letters in a given string by using regex.",
    "solutions": [
      "import re\r\ndef capital_words_spaces(str1):\r\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)"
    ],
    "starter_code": "def solution():\n    # Write a function to put spaces between words starting with capital letters in a given string by using regex.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_749",
    "question": "Write a function to sort a given list of strings of numbers numerically.",
    "solutions": [
      "def sort_numeric_strings(nums_str):\r\n    result = [int(x) for x in nums_str]\r\n    result.sort()\r\n    return result"
    ],
    "starter_code": "def solution():\n    # Write a function to sort a given list of strings of numbers numerically.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_750",
    "question": "Write a function to add the given tuple to the given list.",
    "solutions": [
      "def add_tuple(test_list, test_tup):\r\n  test_list += test_tup\r\n  return (test_list) "
    ],
    "starter_code": "def solution():\n    # Write a function to add the given tuple to the given list.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_751",
    "question": "Write a function to check if the given array represents min heap or not.",
    "solutions": [
      "def check_min_heap(arr, i):\r\n    if 2 * i + 2 > len(arr):\r\n        return True\r\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)\r\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \r\n                                      and check_min_heap(arr, 2 * i + 2))\r\n    return left_child and right_child"
    ],
    "starter_code": "def solution():\n    # Write a function to check if the given array represents min heap or not.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_752",
    "question": "Write a function to find the nth jacobsthal number.",
    "solutions": [
      "def jacobsthal_num(n): \r\n\tdp = [0] * (n + 1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \r\n\treturn dp[n]"
    ],
    "starter_code": "def solution():\n    # Write a function to find the nth jacobsthal number.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_753",
    "question": "Write a function to find minimum k records from tuple list.",
    "solutions": [
      "def min_k(test_list, K):\r\n  res = sorted(test_list, key = lambda x: x[1])[:K]\r\n  return (res) "
    ],
    "starter_code": "def solution():\n    # Write a function to find minimum k records from tuple list.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_754",
    "question": "Write a function to find common index elements from three lists.",
    "solutions": [
      "def extract_index_list(l1, l2, l3):\r\n    result = []\r\n    for m, n, o in zip(l1, l2, l3):\r\n        if (m == n == o):\r\n            result.append(m)\r\n    return result"
    ],
    "starter_code": "def solution():\n    # Write a function to find common index elements from three lists.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_755",
    "question": "Write a function to find the second smallest number in a list.",
    "solutions": [
      "def second_smallest(numbers):\r\n  if (len(numbers)<2):\r\n    return\r\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\r\n    return\r\n  dup_items = set()\r\n  uniq_items = []\r\n  for x in numbers:\r\n    if x not in dup_items:\r\n      uniq_items.append(x)\r\n      dup_items.add(x)\r\n  uniq_items.sort()    \r\n  return  uniq_items[1] "
    ],
    "starter_code": "def solution():\n    # Write a function to find the second smallest number in a list.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_756",
    "question": "Write a function that matches a string that has an a followed by zero or one 'b'.",
    "solutions": [
      "import re\r\ndef text_match_zero_one(text):\r\n        patterns = 'ab?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    ],
    "starter_code": "def solution():\n    # Write a function that matches a string that has an a followed by zero or one 'b'.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_757",
    "question": "Write a function to count the pairs of reverse strings in the given string list.",
    "solutions": [
      "def count_reverse_pairs(test_list):\r\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \r\n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \r\n  return str(res)"
    ],
    "starter_code": "def solution():\n    # Write a function to count the pairs of reverse strings in the given string list.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_758",
    "question": "Write a function to count number of unique lists within a list.",
    "solutions": [
      "def unique_sublists(list1):\r\n    result ={}\r\n    for l in  list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result"
    ],
    "starter_code": "def solution():\n    # Write a function to count number of unique lists within a list.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_759",
    "question": "Write a function to check a decimal with a precision of 2.",
    "solutions": [
      "def is_decimal(num):\r\n    import re\r\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n    result = dnumre.search(num)\r\n    return bool(result)"
    ],
    "starter_code": "def solution():\n    # Write a function to check a decimal with a precision of 2.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_760",
    "question": "Write a python function to check whether an array contains only one distinct element or not.",
    "solutions": [
      "def unique_Element(arr,n):\r\n    s = set(arr)\r\n    if (len(s) == 1):\r\n        return ('YES')\r\n    else:\r\n        return ('NO')"
    ],
    "starter_code": "def solution():\n    # Write a python function to check whether an array contains only one distinct element or not.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_761",
    "question": "Write a function to caluclate arc length of an angle.",
    "solutions": [
      "def arc_length(d,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    arclength = (pi*d) * (a/360)\r\n    return arclength"
    ],
    "starter_code": "def solution():\n    # Write a function to caluclate arc length of an angle.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_762",
    "question": "Write a function to check whether the given month number contains 30 days or not.",
    "solutions": [
      "def check_monthnumber_number(monthnum3):\r\n  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):\r\n    return True\r\n  else:\r\n    return False"
    ],
    "starter_code": "def solution():\n    # Write a function to check whether the given month number contains 30 days or not.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_763",
    "question": "Write a python function to find the minimum difference between any two elements in a given array.",
    "solutions": [
      "def find_Min_Diff(arr,n): \r\n    arr = sorted(arr) \r\n    diff = 10**20 \r\n    for i in range(n-1): \r\n        if arr[i+1] - arr[i] < diff: \r\n            diff = arr[i+1] - arr[i]  \r\n    return diff "
    ],
    "starter_code": "def solution():\n    # Write a python function to find the minimum difference between any two elements in a given array.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_764",
    "question": "Write a python function to count numeric values in a given string.",
    "solutions": [
      "def number_ctr(str):\r\n      number_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \r\n      return  number_ctr"
    ],
    "starter_code": "def solution():\n    # Write a python function to count numeric values in a given string.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_765",
    "question": "Write a function to find nth polite number.",
    "solutions": [
      "import math \r\ndef is_polite(n): \r\n\tn = n + 1\r\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) "
    ],
    "starter_code": "def solution():\n    # Write a function to find nth polite number.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_766",
    "question": "Write a function to iterate over all pairs of consecutive items in a given list.",
    "solutions": [
      "def pair_wise(l1):\r\n    temp = []\r\n    for i in range(len(l1) - 1):\r\n        current_element, next_element = l1[i], l1[i + 1]\r\n        x = (current_element, next_element)\r\n        temp.append(x)\r\n    return temp"
    ],
    "starter_code": "def solution():\n    # Write a function to iterate over all pairs of consecutive items in a given list.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_767",
    "question": "Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019.",
    "solutions": [
      "def get_Pairs_Count(arr,n,sum):\r\n    count = 0  \r\n    for i in range(0,n):\r\n        for j in range(i + 1,n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count"
    ],
    "starter_code": "def solution():\n    # Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_768",
    "question": "Write a python function to check for odd parity of a given number.",
    "solutions": [
      "def check_Odd_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 1): \r\n        return True\r\n    else: \r\n        return False"
    ],
    "starter_code": "def solution():\n    # Write a python function to check for odd parity of a given number.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_769",
    "question": "Write a python function to get the difference between two lists.",
    "solutions": [
      "def Diff(li1,li2):\r\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\r\n "
    ],
    "starter_code": "def solution():\n    # Write a python function to get the difference between two lists.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_770",
    "question": "Write a python function to find the sum of fourth power of first n odd natural numbers.",
    "solutions": [
      "def odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n + 1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j)   \r\n    return sm "
    ],
    "starter_code": "def solution():\n    # Write a python function to find the sum of fourth power of first n odd natural numbers.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_771",
    "question": "Write a function to check if the given expression is balanced or not.",
    "solutions": [
      "from collections import deque\r\ndef check_expression(exp):\r\n    if len(exp) & 1:\r\n        return False\r\n    stack = deque()\r\n    for ch in exp:\r\n        if ch == '(' or ch == '{' or ch == '[':\r\n            stack.append(ch)\r\n        if ch == ')' or ch == '}' or ch == ']':\r\n            if not stack:\r\n                return False\r\n            top = stack.pop()\r\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\r\n                return False\r\n    return not stack"
    ],
    "starter_code": "def solution():\n    # Write a function to check if the given expression is balanced or not.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_772",
    "question": "Write a function to remove all the words with k length in the given string.",
    "solutions": [
      "def remove_length(test_str, K):\r\n  temp = test_str.split()\r\n  res = [ele for ele in temp if len(ele) != K]\r\n  res = ' '.join(res)\r\n  return (res) "
    ],
    "starter_code": "def solution():\n    # Write a function to remove all the words with k length in the given string.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_773",
    "question": "Write a function to find the occurrence and position of the substrings within a string.",
    "solutions": [
      "import re\r\ndef occurance_substring(text,pattern):\r\n for match in re.finditer(pattern, text):\r\n    s = match.start()\r\n    e = match.end()\r\n    return (text[s:e], s, e)"
    ],
    "starter_code": "def solution():\n    # Write a function to find the occurrence and position of the substrings within a string.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_774",
    "question": "Write a function to check if the string is a valid email address or not using regex.",
    "solutions": [
      "import re \r\nregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\r\ndef check_email(email): \r\n\tif(re.search(regex,email)): \r\n\t\treturn (\"Valid Email\") \r\n\telse: \r\n\t\treturn (\"Invalid Email\") "
    ],
    "starter_code": "def solution():\n    # Write a function to check if the string is a valid email address or not using regex.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_775",
    "question": "Write a python function to check whether every odd index contains odd numbers of a given list.",
    "solutions": [
      "def odd_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))"
    ],
    "starter_code": "def solution():\n    # Write a python function to check whether every odd index contains odd numbers of a given list.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_776",
    "question": "Write a function to count those characters which have vowels as their neighbors in the given string.",
    "solutions": [
      "def count_vowels(test_str):\r\n  res = 0\r\n  vow_list = ['a', 'e', 'i', 'o', 'u']\r\n  for idx in range(1, len(test_str) - 1):\r\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\r\n      res += 1\r\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\r\n    res += 1\r\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\r\n    res += 1\r\n  return (res) "
    ],
    "starter_code": "def solution():\n    # Write a function to count those characters which have vowels as their neighbors in the given string.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_777",
    "question": "Write a python function to find the sum of non-repeated elements in a given array.",
    "solutions": [
      "def find_Sum(arr,n): \r\n    arr.sort() \r\n    sum = arr[0] \r\n    for i in range(0,n-1): \r\n        if (arr[i] != arr[i+1]): \r\n            sum = sum + arr[i+1]   \r\n    return sum"
    ],
    "starter_code": "def solution():\n    # Write a python function to find the sum of non-repeated elements in a given array.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_778",
    "question": "Write a function to pack consecutive duplicates of a given list elements into sublists.",
    "solutions": [
      "from itertools import groupby\r\ndef pack_consecutive_duplicates(list1):\r\n    return [list(group) for key, group in groupby(list1)]"
    ],
    "starter_code": "def solution():\n    # Write a function to pack consecutive duplicates of a given list elements into sublists.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_779",
    "question": "Write a function to count the number of unique lists within a list.",
    "solutions": [
      "def unique_sublists(list1):\r\n    result ={}\r\n    for l in list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result"
    ],
    "starter_code": "def solution():\n    # Write a function to count the number of unique lists within a list.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_780",
    "question": "Write a function to find the combinations of sums with tuples in the given tuple list.",
    "solutions": [
      "from itertools import combinations \r\ndef find_combinations(test_list):\r\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\r\n  return (res) "
    ],
    "starter_code": "def solution():\n    # Write a function to find the combinations of sums with tuples in the given tuple list.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_781",
    "question": "Write a python function to check whether the count of divisors is even or odd.",
    "solutions": [
      "import math \r\ndef count_Divisors(n) : \r\n    count = 0\r\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \r\n        if (n % i == 0) : \r\n            if( n // i == i) : \r\n                count = count + 1\r\n            else : \r\n                count = count + 2\r\n    if (count % 2 == 0) : \r\n        return (\"Even\") \r\n    else : \r\n        return (\"Odd\") "
    ],
    "starter_code": "def solution():\n    # Write a python function to check whether the count of divisors is even or odd.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_782",
    "question": "Write a python function to find the sum of all odd length subarrays.",
    "solutions": [
      "def Odd_Length_Sum(arr):\r\n    Sum = 0\r\n    l = len(arr)\r\n    for i in range(l):\r\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\r\n    return Sum"
    ],
    "starter_code": "def solution():\n    # Write a python function to find the sum of all odd length subarrays.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_783",
    "question": "Write a function to convert rgb color to hsv color.",
    "solutions": [
      "def rgb_to_hsv(r, g, b):\r\n    r, g, b = r/255.0, g/255.0, b/255.0\r\n    mx = max(r, g, b)\r\n    mn = min(r, g, b)\r\n    df = mx-mn\r\n    if mx == mn:\r\n        h = 0\r\n    elif mx == r:\r\n        h = (60 * ((g-b)/df) + 360) % 360\r\n    elif mx == g:\r\n        h = (60 * ((b-r)/df) + 120) % 360\r\n    elif mx == b:\r\n        h = (60 * ((r-g)/df) + 240) % 360\r\n    if mx == 0:\r\n        s = 0\r\n    else:\r\n        s = (df/mx)*100\r\n    v = mx*100\r\n    return h, s, v"
    ],
    "starter_code": "def solution():\n    # Write a function to convert rgb color to hsv color.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_784",
    "question": "Write a function to find the product of first even and odd number of a given list.",
    "solutions": [
      "def mul_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even*first_odd)"
    ],
    "starter_code": "def solution():\n    # Write a function to find the product of first even and odd number of a given list.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_785",
    "question": "Write a function to convert tuple string to integer tuple.",
    "solutions": [
      "def tuple_str_int(test_str):\r\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\r\n  return (res) "
    ],
    "starter_code": "def solution():\n    # Write a function to convert tuple string to integer tuple.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_786",
    "question": "Write a function to locate the right insertion point for a specified value in sorted order.",
    "solutions": [
      "import bisect\r\ndef right_insertion(a, x):\r\n    i = bisect.bisect_right(a, x)\r\n    return i"
    ],
    "starter_code": "def solution():\n    # Write a function to locate the right insertion point for a specified value in sorted order.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_787",
    "question": "Write a function that matches a string that has an a followed by three 'b'.",
    "solutions": [
      "import re\r\ndef text_match_three(text):\r\n        patterns = 'ab{3}?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    ],
    "starter_code": "def solution():\n    # Write a function that matches a string that has an a followed by three 'b'.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_788",
    "question": "Write a function to create a new tuple from the given string and list.",
    "solutions": [
      "def new_tuple(test_list, test_str):\r\n  res = tuple(test_list + [test_str])\r\n  return (res) "
    ],
    "starter_code": "def solution():\n    # Write a function to create a new tuple from the given string and list.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_789",
    "question": "Write a function to calculate the perimeter of a regular polygon.",
    "solutions": [
      "from math import tan, pi\r\ndef perimeter_polygon(s,l):\r\n  perimeter = s*l\r\n  return perimeter"
    ],
    "starter_code": "def solution():\n    # Write a function to calculate the perimeter of a regular polygon.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_790",
    "question": "Write a python function to check whether every even index contains even numbers of a given list.",
    "solutions": [
      "def even_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))"
    ],
    "starter_code": "def solution():\n    # Write a python function to check whether every even index contains even numbers of a given list.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_791",
    "question": "Write a function to remove the nested record from the given tuple.",
    "solutions": [
      "def remove_nested(test_tup):\r\n  res = tuple()\r\n  for count, ele in enumerate(test_tup):\r\n    if not isinstance(ele, tuple):\r\n      res = res + (ele, )\r\n  return (res) "
    ],
    "starter_code": "def solution():\n    # Write a function to remove the nested record from the given tuple.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_792",
    "question": "Write a python function to count the number of lists in a given number of lists.",
    "solutions": [
      "def count_list(input_list): \r\n    return len(input_list)"
    ],
    "starter_code": "def solution():\n    # Write a python function to count the number of lists in a given number of lists.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_793",
    "question": "Write a python function to find the last position of an element in a sorted array.",
    "solutions": [
      "def last(arr,x,n):\r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            low = mid + 1\r\n    return res"
    ],
    "starter_code": "def solution():\n    # Write a python function to find the last position of an element in a sorted array.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_794",
    "question": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.",
    "solutions": [
      "import re\r\ndef text_starta_endb(text):\r\n        patterns = 'a.*?b$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    ],
    "starter_code": "def solution():\n    # Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_795",
    "question": "Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.",
    "solutions": [
      "import heapq\r\ndef cheap_items(items,n):\r\n  cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])\r\n  return cheap_items"
    ],
    "starter_code": "def solution():\n    # Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_796",
    "question": "Write function to find the sum of all items in the given dictionary.",
    "solutions": [
      "def return_sum(dict):\r\n  sum = 0\r\n  for i in dict.values():\r\n    sum = sum + i\r\n  return sum"
    ],
    "starter_code": "def solution():\n    # Write function to find the sum of all items in the given dictionary.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_797",
    "question": "Write a python function to find the sum of all odd natural numbers within the range l and r.",
    "solutions": [
      "def sum_Odd(n): \r\n    terms = (n + 1)//2\r\n    sum1 = terms * terms \r\n    return sum1  \r\ndef sum_in_Range(l,r): \r\n    return sum_Odd(r) - sum_Odd(l - 1)"
    ],
    "starter_code": "def solution():\n    # Write a python function to find the sum of all odd natural numbers within the range l and r.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_798",
    "question": "Write a python function to find the sum of an array.",
    "solutions": [
      "def _sum(arr):  \r\n    sum=0\r\n    for i in arr: \r\n        sum = sum + i      \r\n    return(sum)  "
    ],
    "starter_code": "def solution():\n    # Write a python function to find the sum of an array.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_799",
    "question": "Write a python function to left rotate the bits of a given number.",
    "solutions": [
      "INT_BITS = 32\r\ndef left_Rotate(n,d):   \r\n    return (n << d)|(n >> (INT_BITS - d))  "
    ],
    "starter_code": "def solution():\n    # Write a python function to left rotate the bits of a given number.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_800",
    "question": "Write a function to remove all whitespaces from a string.",
    "solutions": [
      "import re\r\ndef remove_all_spaces(text):\r\n return (re.sub(r'\\s+', '',text))"
    ],
    "starter_code": "def solution():\n    # Write a function to remove all whitespaces from a string.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_801",
    "question": "Write a python function to count the number of equal numbers from three given integers.",
    "solutions": [
      "def test_three_equal(x,y,z):\r\n  result= set([x,y,z])\r\n  if len(result)==3:\r\n    return 0\r\n  else:\r\n    return (4-len(result))"
    ],
    "starter_code": "def solution():\n    # Write a python function to count the number of equal numbers from three given integers.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_802",
    "question": "Write a python function to count the number of rotations required to generate a sorted array.",
    "solutions": [
      "def count_Rotation(arr,n):   \r\n    for i in range (1,n): \r\n        if (arr[i] < arr[i - 1]): \r\n            return i  \r\n    return 0"
    ],
    "starter_code": "def solution():\n    # Write a python function to count the number of rotations required to generate a sorted array.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_803",
    "question": "Write a python function to check whether the given number is a perfect square or not.",
    "solutions": [
      "def is_Perfect_Square(n) :\r\n    i = 1\r\n    while (i * i<= n):\r\n        if ((n % i == 0) and (n / i == i)):\r\n            return True     \r\n        i = i + 1\r\n    return False"
    ],
    "starter_code": "def solution():\n    # Write a python function to check whether the given number is a perfect square or not.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_804",
    "question": "Write a python function to check whether the product of numbers is even or not.",
    "solutions": [
      "def is_Product_Even(arr,n): \r\n    for i in range(0,n): \r\n        if ((arr[i] & 1) == 0): \r\n            return True\r\n    return False"
    ],
    "starter_code": "def solution():\n    # Write a python function to check whether the product of numbers is even or not.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_805",
    "question": "Write a function to find the list in a list of lists whose sum of elements is the highest.",
    "solutions": [
      "def max_sum_list(lists):\r\n return max(lists, key=sum)"
    ],
    "starter_code": "def solution():\n    # Write a function to find the list in a list of lists whose sum of elements is the highest.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_806",
    "question": "Write a function to find maximum run of uppercase characters in the given string.",
    "solutions": [
      "def max_run_uppercase(test_str):\r\n  cnt = 0\r\n  res = 0\r\n  for idx in range(0, len(test_str)):\r\n    if test_str[idx].isupper():\r\n      cnt += 1\r\n    else:\r\n      res = cnt\r\n      cnt = 0\r\n  if test_str[len(test_str) - 1].isupper():\r\n    res = cnt\r\n  return (res)"
    ],
    "starter_code": "def solution():\n    # Write a function to find maximum run of uppercase characters in the given string.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_807",
    "question": "Write a python function to find the first odd number in a given list of numbers.",
    "solutions": [
      "def first_odd(nums):\r\n  first_odd = next((el for el in nums if el%2!=0),-1)\r\n  return first_odd"
    ],
    "starter_code": "def solution():\n    # Write a python function to find the first odd number in a given list of numbers.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_808",
    "question": "Write a function to check if the given tuples contain the k or not.",
    "solutions": [
      "def check_K(test_tup, K):\r\n  res = False\r\n  for ele in test_tup:\r\n    if ele == K:\r\n      res = True\r\n      break\r\n  return (res) "
    ],
    "starter_code": "def solution():\n    # Write a function to check if the given tuples contain the k or not.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_809",
    "question": "Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.",
    "solutions": [
      "def check_smaller(test_tup1, test_tup2):\r\n  res = all(x > y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) "
    ],
    "starter_code": "def solution():\n    # Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_810",
    "question": "Write a function to iterate over elements repeating each as many times as its count.",
    "solutions": [
      "from collections import Counter\r\ndef count_variable(a,b,c,d):\r\n  c = Counter(p=a, q=b, r=c, s=d)\r\n  return list(c.elements())"
    ],
    "starter_code": "def solution():\n    # Write a function to iterate over elements repeating each as many times as its count.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_811",
    "question": "Write a function to check if two lists of tuples are identical or not.",
    "solutions": [
      "def check_identical(test_list1, test_list2):\r\n  res = test_list1 == test_list2\r\n  return (res) "
    ],
    "starter_code": "def solution():\n    # Write a function to check if two lists of tuples are identical or not.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_812",
    "question": "Write a function to abbreviate 'road' as 'rd.' in a given string.",
    "solutions": [
      "import re\r\ndef road_rd(street):\r\n  return (re.sub('Road$', 'Rd.', street))"
    ],
    "starter_code": "def solution():\n    # Write a function to abbreviate 'road' as 'rd.' in a given string.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_813",
    "question": "Write a function to find length of the string.",
    "solutions": [
      "def string_length(str1):\r\n    count = 0\r\n    for char in str1:\r\n        count += 1\r\n    return count"
    ],
    "starter_code": "def solution():\n    # Write a function to find length of the string.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_814",
    "question": "Write a function to find the area of a rombus.",
    "solutions": [
      "def rombus_area(p,q):\r\n  area=(p*q)/2\r\n  return area"
    ],
    "starter_code": "def solution():\n    # Write a function to find the area of a rombus.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_815",
    "question": "Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.",
    "solutions": [
      "def sort_by_dnf(arr, n):\r\n  low=0\r\n  mid=0\r\n  high=n-1\r\n  while mid <= high:\r\n    if arr[mid] == 0:\r\n      arr[low], arr[mid] = arr[mid], arr[low]\r\n      low = low + 1\r\n      mid = mid + 1\r\n    elif arr[mid] == 1:\r\n      mid = mid + 1\r\n    else:\r\n      arr[mid], arr[high] = arr[high], arr[mid]\r\n      high = high - 1\r\n  return arr"
    ],
    "starter_code": "def solution():\n    # Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_816",
    "question": "Write a function to clear the values of the given tuples.",
    "solutions": [
      "def clear_tuple(test_tup):\r\n  temp = list(test_tup)\r\n  temp.clear()\r\n  test_tup = tuple(temp)\r\n  return (test_tup) "
    ],
    "starter_code": "def solution():\n    # Write a function to clear the values of the given tuples.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_817",
    "question": "Write a function to find numbers divisible by m or n from a list of numbers using lambda function.",
    "solutions": [
      "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums)) \r\n return result"
    ],
    "starter_code": "def solution():\n    # Write a function to find numbers divisible by m or n from a list of numbers using lambda function.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_818",
    "question": "Write a python function to count lower case letters in a given string.",
    "solutions": [
      "def lower_ctr(str):\r\n      lower_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1     \r\n      return  lower_ctr"
    ],
    "starter_code": "def solution():\n    # Write a python function to count lower case letters in a given string.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_819",
    "question": "Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.",
    "solutions": [
      "def count_duplic(lists):\r\n    element = []\r\n    frequency = []\r\n    if not lists:\r\n        return element\r\n    running_count = 1\r\n    for i in range(len(lists)-1):\r\n        if lists[i] == lists[i+1]:\r\n            running_count += 1\r\n        else:\r\n            frequency.append(running_count)\r\n            element.append(lists[i])\r\n            running_count = 1\r\n    frequency.append(running_count)\r\n    element.append(lists[i+1])\r\n    return element,frequency\r\n"
    ],
    "starter_code": "def solution():\n    # Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_820",
    "question": "Write a function to check whether the given month number contains 28 days or not.",
    "solutions": [
      "def check_monthnum_number(monthnum1):\r\n  if monthnum1 == 2:\r\n    return True\r\n  else:\r\n    return False"
    ],
    "starter_code": "def solution():\n    # Write a function to check whether the given month number contains 28 days or not.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_821",
    "question": "Write a function to merge two dictionaries into a single expression.",
    "solutions": [
      "import collections as ct\r\ndef merge_dictionaries(dict1,dict2):\r\n    merged_dict = dict(ct.ChainMap({}, dict1, dict2))\r\n    return merged_dict"
    ],
    "starter_code": "def solution():\n    # Write a function to merge two dictionaries into a single expression.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_822",
    "question": "Write a function to return true if the password is valid.",
    "solutions": [
      "import re\r\ndef pass_validity(p):\r\n x = True\r\n while x:  \r\n    if (len(p)<6 or len(p)>12):\r\n        break\r\n    elif not re.search(\"[a-z]\",p):\r\n        break\r\n    elif not re.search(\"[0-9]\",p):\r\n        break\r\n    elif not re.search(\"[A-Z]\",p):\r\n        break\r\n    elif not re.search(\"[$#@]\",p):\r\n        break\r\n    elif re.search(\"\\s\",p):\r\n        break\r\n    else:\r\n        return True\r\n        x=False\r\n        break\r\n\r\n if x:\r\n    return False"
    ],
    "starter_code": "def solution():\n    # Write a function to return true if the password is valid.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_823",
    "question": "Write a function to check if the given string starts with a substring using regex.",
    "solutions": [
      "import re \r\ndef check_substring(string, sample) : \r\n  if (sample in string): \r\n      y = \"\\A\" + sample \r\n      x = re.search(y, string) \r\n      if x : \r\n          return (\"string starts with the given substring\") \r\n      else : \r\n          return (\"string doesnt start with the given substring\") \r\n  else : \r\n      return (\"entered string isnt a substring\")"
    ],
    "starter_code": "def solution():\n    # Write a function to check if the given string starts with a substring using regex.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_824",
    "question": "Write a python function to remove even numbers from a given list.",
    "solutions": [
      "def remove_even(l):\r\n    for i in l:\r\n        if i % 2 == 0:\r\n            l.remove(i)\r\n    return l"
    ],
    "starter_code": "def solution():\n    # Write a python function to remove even numbers from a given list.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_825",
    "question": "Write a python function to access multiple elements of specified index from a given list.",
    "solutions": [
      "def access_elements(nums, list_index):\r\n    result = [nums[i] for i in list_index]\r\n    return result"
    ],
    "starter_code": "def solution():\n    # Write a python function to access multiple elements of specified index from a given list.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_826",
    "question": "Write a python function to find the type of triangle from the given sides.",
    "solutions": [
      "def check_Type_Of_Triangle(a,b,c): \r\n    sqa = pow(a,2) \r\n    sqb = pow(b,2) \r\n    sqc = pow(c,2) \r\n    if (sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb): \r\n        return (\"Right-angled Triangle\") \r\n    elif (sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb): \r\n        return (\"Obtuse-angled Triangle\") \r\n    else: \r\n        return (\"Acute-angled Triangle\") "
    ],
    "starter_code": "def solution():\n    # Write a python function to find the type of triangle from the given sides.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_827",
    "question": "Write a function to sum a specific column of a list in a given list of lists.",
    "solutions": [
      "def sum_column(list1, C):\r\n    result = sum(row[C] for row in list1)\r\n    return result"
    ],
    "starter_code": "def solution():\n    # Write a function to sum a specific column of a list in a given list of lists.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_828",
    "question": "Write a function to count alphabets,digits and special charactes in a given string.",
    "solutions": [
      "def count_alpha_dig_spl(string):\r\n  alphabets=digits = special = 0\r\n  for i in range(len(string)):\r\n    if(string[i].isalpha()):\r\n        alphabets = alphabets + 1\r\n    elif(string[i].isdigit()):\r\n        digits = digits + 1\r\n    else:\r\n        special = special + 1\r\n  return (alphabets,digits,special)   "
    ],
    "starter_code": "def solution():\n    # Write a function to count alphabets,digits and special charactes in a given string.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_829",
    "question": "Write a function to find out the second most repeated (or frequent) string in the given sequence.",
    "solutions": [
      "from collections import Counter \r\n\t\r\ndef second_frequent(input): \r\n\tdict = Counter(input) \r\n\tvalue = sorted(dict.values(), reverse=True)  \r\n\tsecond_large = value[1] \r\n\tfor (key, val) in dict.items(): \r\n\t\tif val == second_large: \r\n\t\t\treturn (key) "
    ],
    "starter_code": "def solution():\n    # Write a function to find out the second most repeated (or frequent) string in the given sequence.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_830",
    "question": "Write a function to round up a number to specific digits.",
    "solutions": [
      "import math\r\ndef round_up(a, digits):\r\n    n = 10**-digits\r\n    return round(math.ceil(a / n) * n, digits)"
    ],
    "starter_code": "def solution():\n    # Write a function to round up a number to specific digits.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_831",
    "question": "Write a python function to count equal element pairs from the given array.",
    "solutions": [
      "def count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] == arr[j]): \r\n                cnt += 1; \r\n    return cnt; "
    ],
    "starter_code": "def solution():\n    # Write a python function to count equal element pairs from the given array.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_832",
    "question": "Write a function to extract the maximum numeric value from a string by using regex.",
    "solutions": [
      "import re \r\ndef extract_max(input): \r\n\tnumbers = re.findall('\\d+',input) \r\n\tnumbers = map(int,numbers) \r\n\treturn max(numbers)"
    ],
    "starter_code": "def solution():\n    # Write a function to extract the maximum numeric value from a string by using regex.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_833",
    "question": "Write a function to get dictionary keys as a list.",
    "solutions": [
      "def get_key(dict): \r\n    list = [] \r\n    for key in dict.keys(): \r\n        list.append(key)           \r\n    return list"
    ],
    "starter_code": "def solution():\n    # Write a function to get dictionary keys as a list.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_834",
    "question": "Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.",
    "solutions": [
      "def generate_matrix(n):\r\n        if n<=0:\r\n            return [] \r\n        matrix=[row[:] for row in [[0]*n]*n]        \r\n        row_st=0\r\n        row_ed=n-1        \r\n        col_st=0\r\n        col_ed=n-1\r\n        current=1        \r\n        while (True):\r\n            if current>n*n:\r\n                break\r\n            for c in range (col_st, col_ed+1):\r\n                matrix[row_st][c]=current\r\n                current+=1\r\n            row_st+=1\r\n            for r in range (row_st, row_ed+1):\r\n                matrix[r][col_ed]=current\r\n                current+=1\r\n            col_ed-=1\r\n            for c in range (col_ed, col_st-1, -1):\r\n                matrix[row_ed][c]=current\r\n                current+=1\r\n            row_ed-=1\r\n            for r in range (row_ed, row_st-1, -1):\r\n                matrix[r][col_st]=current\r\n                current+=1\r\n            col_st+=1\r\n        return matrix"
    ],
    "starter_code": "def solution():\n    # Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_835",
    "question": "Write a python function to find the slope of a line.",
    "solutions": [
      "def slope(x1,y1,x2,y2): \r\n    return (float)(y2-y1)/(x2-x1)  "
    ],
    "starter_code": "def solution():\n    # Write a python function to find the slope of a line.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_836",
    "question": "Write a function to find length of the subarray having maximum sum.",
    "solutions": [
      "from sys import maxsize \r\ndef max_sub_array_sum(a,size): \r\n\tmax_so_far = -maxsize - 1\r\n\tmax_ending_here = 0\r\n\tstart = 0\r\n\tend = 0\r\n\ts = 0\r\n\tfor i in range(0,size): \r\n\t\tmax_ending_here += a[i] \r\n\t\tif max_so_far < max_ending_here: \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\t\tstart = s \r\n\t\t\tend = i \r\n\t\tif max_ending_here < 0: \r\n\t\t\tmax_ending_here = 0\r\n\t\t\ts = i+1\r\n\treturn (end - start + 1)"
    ],
    "starter_code": "def solution():\n    # Write a function to find length of the subarray having maximum sum.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_837",
    "question": "Write a python function to find the cube sum of first n odd natural numbers.",
    "solutions": [
      "def cube_Sum(n): \r\n    sum = 0   \r\n    for i in range(0,n) : \r\n        sum += (2*i+1)*(2*i+1)*(2*i+1) \r\n    return sum"
    ],
    "starter_code": "def solution():\n    # Write a python function to find the cube sum of first n odd natural numbers.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_838",
    "question": "Write a python function to find minimum number swaps required to make two binary strings equal.",
    "solutions": [
      "def min_Swaps(s1,s2) :  \r\n    c0 = 0; c1 = 0;  \r\n    for i in range(len(s1)) :  \r\n        if (s1[i] == '0' and s2[i] == '1') : \r\n            c0 += 1;    \r\n        elif (s1[i] == '1' and s2[i] == '0') : \r\n            c1 += 1;  \r\n    result = c0 // 2 + c1 // 2;  \r\n    if (c0 % 2 == 0 and c1 % 2 == 0) : \r\n        return result;  \r\n    elif ((c0 + c1) % 2 == 0) : \r\n        return result + 2;  \r\n    else : \r\n        return -1;  "
    ],
    "starter_code": "def solution():\n    # Write a python function to find minimum number swaps required to make two binary strings equal.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_839",
    "question": "Write a function to sort the tuples alphabetically by the first item of each tuple.",
    "solutions": [
      "def sort_tuple(tup): \r\n\tn = len(tup) \r\n\tfor i in range(n): \r\n\t\tfor j in range(n-i-1): \r\n\t\t\tif tup[j][0] > tup[j + 1][0]: \r\n\t\t\t\ttup[j], tup[j + 1] = tup[j + 1], tup[j] \r\n\treturn tup"
    ],
    "starter_code": "def solution():\n    # Write a function to sort the tuples alphabetically by the first item of each tuple.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_840",
    "question": "Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.",
    "solutions": [
      "def Check_Solution(a,b,c):  \r\n    if b == 0:  \r\n        return (\"Yes\")  \r\n    else: \r\n        return (\"No\")  "
    ],
    "starter_code": "def solution():\n    # Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_841",
    "question": "Write a function to count the number of inversions in the given array.",
    "solutions": [
      "def get_inv_count(arr, n): \r\n\tinv_count = 0\r\n\tfor i in range(n): \r\n\t\tfor j in range(i + 1, n): \r\n\t\t\tif (arr[i] > arr[j]): \r\n\t\t\t\tinv_count += 1\r\n\treturn inv_count "
    ],
    "starter_code": "def solution():\n    # Write a function to count the number of inversions in the given array.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_842",
    "question": "Write a function to find the number which occurs for odd number of times in the given array.",
    "solutions": [
      "def get_odd_occurence(arr, arr_size):\r\n  for i in range(0, arr_size):\r\n    count = 0\r\n    for j in range(0, arr_size):\r\n      if arr[i] == arr[j]:\r\n        count += 1\r\n    if (count % 2 != 0):\r\n      return arr[i]\r\n  return -1"
    ],
    "starter_code": "def solution():\n    # Write a function to find the number which occurs for odd number of times in the given array.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_843",
    "question": "Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.",
    "solutions": [
      "import heapq\r\ndef nth_super_ugly_number(n, primes):\r\n    uglies = [1]\r\n    def gen(prime):\r\n        for ugly in uglies:\r\n            yield ugly * prime\r\n    merged = heapq.merge(*map(gen, primes))\r\n    while len(uglies) < n:\r\n        ugly = next(merged)\r\n        if ugly != uglies[-1]:\r\n            uglies.append(ugly)\r\n    return uglies[-1]"
    ],
    "starter_code": "def solution():\n    # Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_844",
    "question": "Write a python function to find the kth element in an array containing odd elements first and then even elements.",
    "solutions": [
      "def get_Number(n, k): \r\n    arr = [0] * n; \r\n    i = 0; \r\n    odd = 1; \r\n    while (odd <= n):   \r\n        arr[i] = odd; \r\n        i += 1; \r\n        odd += 2;\r\n    even = 2; \r\n    while (even <= n): \r\n        arr[i] = even; \r\n        i += 1;\r\n        even += 2; \r\n    return arr[k - 1]; "
    ],
    "starter_code": "def solution():\n    # Write a python function to find the kth element in an array containing odd elements first and then even elements.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_845",
    "question": "Write a python function to count the number of digits in factorial of a given number.",
    "solutions": [
      "import math \r\ndef find_Digits(n): \r\n    if (n < 0): \r\n        return 0;\r\n    if (n <= 1): \r\n        return 1; \r\n    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0)); \r\n    return math.floor(x) + 1; "
    ],
    "starter_code": "def solution():\n    # Write a python function to count the number of digits in factorial of a given number.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_846",
    "question": "Write a function to find the minimum number of platforms required for a railway/bus station.",
    "solutions": [
      "def find_platform(arr, dep, n): \r\n    arr.sort() \r\n    dep.sort() \r\n    plat_needed = 1\r\n    result = 1\r\n    i = 1\r\n    j = 0\r\n    while (i < n and j < n): \r\n        if (arr[i] <= dep[j]):           \r\n            plat_needed+= 1\r\n            i+= 1\r\n        elif (arr[i] > dep[j]):           \r\n            plat_needed-= 1\r\n            j+= 1\r\n        if (plat_needed > result):  \r\n            result = plat_needed           \r\n    return result"
    ],
    "starter_code": "def solution():\n    # Write a function to find the minimum number of platforms required for a railway/bus station.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_847",
    "question": "Write a python function to copy a list from a singleton tuple.",
    "solutions": [
      "def lcopy(xs):\n  return xs[:]\n"
    ],
    "starter_code": "def solution():\n    # Write a python function to copy a list from a singleton tuple.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_848",
    "question": "Write a function to find the area of a trapezium.",
    "solutions": [
      "def area_trapezium(base1,base2,height):\r\n area = 0.5 * (base1 + base2) * height\r\n return area"
    ],
    "starter_code": "def solution():\n    # Write a function to find the area of a trapezium.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_849",
    "question": "Write a python function to find sum of all prime divisors of a given number.",
    "solutions": [
      "def Sum(N): \r\n    SumOfPrimeDivisors = [0]*(N + 1)   \r\n    for i in range(2,N + 1) : \r\n        if (SumOfPrimeDivisors[i] == 0) : \r\n            for j in range(i,N + 1,i) : \r\n                SumOfPrimeDivisors[j] += i           \r\n    return SumOfPrimeDivisors[N] "
    ],
    "starter_code": "def solution():\n    # Write a python function to find sum of all prime divisors of a given number.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_850",
    "question": "Write a function to check if a triangle of positive area is possible with the given angles.",
    "solutions": [
      "def is_triangleexists(a,b,c): \r\n    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): \r\n        if((a + b)>= c or (b + c)>= a or (a + c)>= b): \r\n            return True \r\n        else:\r\n            return False\r\n    else:\r\n        return False"
    ],
    "starter_code": "def solution():\n    # Write a function to check if a triangle of positive area is possible with the given angles.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_851",
    "question": "Write a python function to find sum of inverse of divisors.",
    "solutions": [
      "def Sum_of_Inverse_Divisors(N,Sum): \r\n    ans = float(Sum)*1.0 /float(N);  \r\n    return round(ans,2); "
    ],
    "starter_code": "def solution():\n    # Write a python function to find sum of inverse of divisors.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_852",
    "question": "Write a python function to remove negative numbers from a list.",
    "solutions": [
      "def remove_negs(num_list): \r\n    for item in num_list: \r\n        if item < 0: \r\n           num_list.remove(item) \r\n    return num_list"
    ],
    "starter_code": "def solution():\n    # Write a python function to remove negative numbers from a list.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_853",
    "question": "Write a python function to find sum of odd factors of a number.",
    "solutions": [
      "import math\r\ndef sum_of_odd_Factors(n): \r\n    res = 1\r\n    while n % 2 == 0: \r\n        n = n // 2 \r\n    for i in range(3,int(math.sqrt(n) + 1)): \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while n % i == 0: \r\n            count+=1 \r\n            n = n // i \r\n            curr_term *= i \r\n            curr_sum += curr_term    \r\n        res *= curr_sum  \r\n    if n >= 2: \r\n        res *= (1 + n) \r\n    return res "
    ],
    "starter_code": "def solution():\n    # Write a python function to find sum of odd factors of a number.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_854",
    "question": "Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.",
    "solutions": [
      "import heapq as hq\r\ndef raw_heap(rawheap):\r\n  hq.heapify(rawheap)\r\n  return rawheap"
    ],
    "starter_code": "def solution():\n    # Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_855",
    "question": "Write a python function to check for even parity of a given number.",
    "solutions": [
      "def check_Even_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 0): \r\n        return True\r\n    else: \r\n        return False"
    ],
    "starter_code": "def solution():\n    # Write a python function to check for even parity of a given number.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_856",
    "question": "Write a python function to find minimum adjacent swaps required to sort binary array.",
    "solutions": [
      "def find_Min_Swaps(arr,n) : \r\n    noOfZeroes = [0] * n \r\n    count = 0 \r\n    noOfZeroes[n - 1] = 1 - arr[n - 1] \r\n    for i in range(n-2,-1,-1) : \r\n        noOfZeroes[i] = noOfZeroes[i + 1] \r\n        if (arr[i] == 0) : \r\n            noOfZeroes[i] = noOfZeroes[i] + 1\r\n    for i in range(0,n) : \r\n        if (arr[i] == 1) : \r\n            count = count + noOfZeroes[i] \r\n    return count "
    ],
    "starter_code": "def solution():\n    # Write a python function to find minimum adjacent swaps required to sort binary array.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_857",
    "question": "Write a function to list out the list of given strings individually using map function.",
    "solutions": [
      "def listify_list(list1):\r\n  result = list(map(list,list1)) \r\n  return result "
    ],
    "starter_code": "def solution():\n    # Write a function to list out the list of given strings individually using map function.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_858",
    "question": "Write a function to count number of lists in a given list of lists and square the count.",
    "solutions": [
      "def count_list(input_list): \r\n    return (len(input_list))**2"
    ],
    "starter_code": "def solution():\n    # Write a function to count number of lists in a given list of lists and square the count.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_859",
    "question": "Write a function to generate all sublists of a given list.",
    "solutions": [
      "from itertools import combinations\r\ndef sub_lists(my_list):\r\n\tsubs = []\r\n\tfor i in range(0, len(my_list)+1):\r\n\t  temp = [list(x) for x in combinations(my_list, i)]\r\n\t  if len(temp)>0:\r\n\t    subs.extend(temp)\r\n\treturn subs"
    ],
    "starter_code": "def solution():\n    # Write a function to generate all sublists of a given list.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_860",
    "question": "Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.",
    "solutions": [
      "import re \r\nregex = '[a-zA-z0-9]$'\r\ndef check_alphanumeric(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Accept\") \r\n\telse: \r\n\t\treturn (\"Discard\") "
    ],
    "starter_code": "def solution():\n    # Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_861",
    "question": "Write a function to find all anagrams of a string in a given list of strings using lambda function.",
    "solutions": [
      "from collections import Counter \r\ndef anagram_lambda(texts,str):\r\n  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) \r\n  return result"
    ],
    "starter_code": "def solution():\n    # Write a function to find all anagrams of a string in a given list of strings using lambda function.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_862",
    "question": "Write a function to find the occurrences of n most common words in a given text.",
    "solutions": [
      "from collections import Counter\r\nimport re\r\ndef n_common_words(text,n):\r\n  words = re.findall('\\w+',text)\r\n  n_common_words= Counter(words).most_common(n)\r\n  return list(n_common_words)"
    ],
    "starter_code": "def solution():\n    # Write a function to find the occurrences of n most common words in a given text.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_863",
    "question": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.",
    "solutions": [
      "def find_longest_conseq_subseq(arr, n): \r\n\tans = 0\r\n\tcount = 0\r\n\tarr.sort() \r\n\tv = [] \r\n\tv.append(arr[0]) \r\n\tfor i in range(1, n): \r\n\t\tif (arr[i] != arr[i - 1]): \r\n\t\t\tv.append(arr[i]) \r\n\tfor i in range(len(v)): \r\n\t\tif (i > 0 and v[i] == v[i - 1] + 1): \r\n\t\t\tcount += 1\r\n\t\telse: \r\n\t\t\tcount = 1\r\n\t\tans = max(ans, count) \r\n\treturn ans "
    ],
    "starter_code": "def solution():\n    # Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_864",
    "question": "Write a function to find palindromes in a given list of strings using lambda function.",
    "solutions": [
      "def palindrome_lambda(texts):\r\n  result = list(filter(lambda x: (x == \"\".join(reversed(x))), texts))\r\n  return result"
    ],
    "starter_code": "def solution():\n    # Write a function to find palindromes in a given list of strings using lambda function.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_865",
    "question": "Write a function to print n-times a list using map function.",
    "solutions": [
      "def ntimes_list(nums,n):\r\n    result = map(lambda x:n*x, nums) \r\n    return list(result)"
    ],
    "starter_code": "def solution():\n    # Write a function to print n-times a list using map function.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_866",
    "question": "Write a function to check whether the given month name contains 31 days or not.",
    "solutions": [
      "def check_monthnumb(monthname2):\r\n  if(monthname2==\"January\" or monthname2==\"March\"or monthname2==\"May\" or monthname2==\"July\" or monthname2==\"Augest\" or monthname2==\"October\" or monthname2==\"December\"):\r\n    return True\r\n  else:\r\n    return False"
    ],
    "starter_code": "def solution():\n    # Write a function to check whether the given month name contains 31 days or not.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_867",
    "question": "Write a python function to add a minimum number such that the sum of array becomes even.",
    "solutions": [
      "def min_Num(arr,n):  \r\n    odd = 0\r\n    for i in range(n): \r\n        if (arr[i] % 2): \r\n            odd += 1 \r\n    if (odd % 2): \r\n        return 1\r\n    return 2"
    ],
    "starter_code": "def solution():\n    # Write a python function to add a minimum number such that the sum of array becomes even.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_868",
    "question": "Write a python function to find the length of the last word in a given string.",
    "solutions": [
      "def length_Of_Last_Word(a): \r\n    l = 0\r\n    x = a.strip() \r\n    for i in range(len(x)): \r\n        if x[i] == \" \": \r\n            l = 0\r\n        else: \r\n            l += 1\r\n    return l "
    ],
    "starter_code": "def solution():\n    # Write a python function to find the length of the last word in a given string.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_869",
    "question": "Write a function to remove sublists from a given list of lists, which are outside a given range.",
    "solutions": [
      "def remove_list_range(list1, leftrange, rigthrange):\r\n   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]\r\n   return result"
    ],
    "starter_code": "def solution():\n    # Write a function to remove sublists from a given list of lists, which are outside a given range.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_870",
    "question": "Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.",
    "solutions": [
      "def sum_positivenum(nums):\r\n  sum_positivenum = list(filter(lambda nums:nums>0,nums))\r\n  return sum(sum_positivenum)"
    ],
    "starter_code": "def solution():\n    # Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_871",
    "question": "Write a python function to check whether the given strings are rotations of each other or not.",
    "solutions": [
      "def are_Rotations(string1,string2): \r\n    size1 = len(string1) \r\n    size2 = len(string2) \r\n    temp = '' \r\n    if size1 != size2: \r\n        return False\r\n    temp = string1 + string1 \r\n    if (temp.count(string2)> 0): \r\n        return True\r\n    else: \r\n        return False"
    ],
    "starter_code": "def solution():\n    # Write a python function to check whether the given strings are rotations of each other or not.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_872",
    "question": "Write a function to check if a nested list is a subset of another nested list.",
    "solutions": [
      "def check_subset(list1,list2): \r\n    return all(map(list1.__contains__,list2)) "
    ],
    "starter_code": "def solution():\n    # Write a function to check if a nested list is a subset of another nested list.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_873",
    "question": "Write a function to solve the fibonacci sequence using recursion.",
    "solutions": [
      "def fibonacci(n):\r\n  if n == 1 or n == 2:\r\n    return 1\r\n  else:\r\n    return (fibonacci(n - 1) + (fibonacci(n - 2)))"
    ],
    "starter_code": "def solution():\n    # Write a function to solve the fibonacci sequence using recursion.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_874",
    "question": "Write a python function to check if the string is a concatenation of another string.",
    "solutions": [
      "def check_Concat(str1,str2):\r\n    N = len(str1)\r\n    M = len(str2)\r\n    if (N % M != 0):\r\n        return False\r\n    for i in range(N):\r\n        if (str1[i] != str2[i % M]):\r\n            return False         \r\n    return True"
    ],
    "starter_code": "def solution():\n    # Write a python function to check if the string is a concatenation of another string.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_875",
    "question": "Write a function to find the minimum difference in the tuple pairs of given tuples.",
    "solutions": [
      "def min_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = min(temp)\r\n  return (res) "
    ],
    "starter_code": "def solution():\n    # Write a function to find the minimum difference in the tuple pairs of given tuples.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_876",
    "question": "Write a python function to find lcm of two positive integers.",
    "solutions": [
      "def lcm(x, y):\r\n   if x > y:\r\n       z = x\r\n   else:\r\n       z = y\r\n   while(True):\r\n       if((z % x == 0) and (z % y == 0)):\r\n           lcm = z\r\n           break\r\n       z += 1\r\n   return lcm"
    ],
    "starter_code": "def solution():\n    # Write a python function to find lcm of two positive integers.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_877",
    "question": "Write a python function to sort the given string.",
    "solutions": [
      "def sort_String(str) : \r\n    str = ''.join(sorted(str)) \r\n    return (str) "
    ],
    "starter_code": "def solution():\n    # Write a python function to sort the given string.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_878",
    "question": "Write a function to check if the given tuple contains only k elements.",
    "solutions": [
      "def check_tuples(test_tuple, K):\r\n  res = all(ele in K for ele in test_tuple)\r\n  return (res) "
    ],
    "starter_code": "def solution():\n    # Write a function to check if the given tuple contains only k elements.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_879",
    "question": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.",
    "solutions": [
      "import re\r\ndef text_match(text):\r\n  patterns = 'a.*?b$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')"
    ],
    "starter_code": "def solution():\n    # Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_880",
    "question": "Write a python function to find number of solutions in quadratic equation.",
    "solutions": [
      "def Check_Solution(a,b,c) : \r\n    if ((b*b) - (4*a*c)) > 0 : \r\n        return (\"2 solutions\") \r\n    elif ((b*b) - (4*a*c)) == 0 : \r\n        return (\"1 solution\") \r\n    else : \r\n        return (\"No solutions\") "
    ],
    "starter_code": "def solution():\n    # Write a python function to find number of solutions in quadratic equation.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_881",
    "question": "Write a function to find the sum of first even and odd number of a given list.",
    "solutions": [
      "def sum_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even+first_odd)"
    ],
    "starter_code": "def solution():\n    # Write a function to find the sum of first even and odd number of a given list.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_882",
    "question": "Write a function to caluclate perimeter of a parallelogram.",
    "solutions": [
      "def parallelogram_perimeter(b,h):\r\n  perimeter=2*(b*h)\r\n  return perimeter"
    ],
    "starter_code": "def solution():\n    # Write a function to caluclate perimeter of a parallelogram.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_883",
    "question": "Write a function to find numbers divisible by m and n from a list of numbers using lambda function.",
    "solutions": [
      "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) \r\n return result"
    ],
    "starter_code": "def solution():\n    # Write a function to find numbers divisible by m and n from a list of numbers using lambda function.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_884",
    "question": "Write a python function to check whether all the bits are within a given range or not.",
    "solutions": [
      "def all_Bits_Set_In_The_Given_Range(n,l,r): \r\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) \r\n    new_num = n & num \r\n    if (num == new_num): \r\n        return True\r\n    return False"
    ],
    "starter_code": "def solution():\n    # Write a python function to check whether all the bits are within a given range or not.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_885",
    "question": "Write a python function to check whether the two given strings are isomorphic to each other or not.",
    "solutions": [
      "def is_Isomorphic(str1,str2):          \r\n    dict_str1 = {}\r\n    dict_str2 = {}\r\n    for i, value in enumerate(str1):\r\n        dict_str1[value] = dict_str1.get(value,[]) + [i]        \r\n    for j, value in enumerate(str2):\r\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\r\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\r\n        return True\r\n    else:\r\n        return False"
    ],
    "starter_code": "def solution():\n    # Write a python function to check whether the two given strings are isomorphic to each other or not.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_886",
    "question": "Write a function to add all the numbers in a list and divide it with the length of the list.",
    "solutions": [
      "def sum_num(numbers):\r\n    total = 0\r\n    for x in numbers:\r\n        total += x\r\n    return total/len(numbers) "
    ],
    "starter_code": "def solution():\n    # Write a function to add all the numbers in a list and divide it with the length of the list.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_887",
    "question": "Write a python function to check whether the given number is odd or not using bitwise operator.",
    "solutions": [
      "def is_odd(n) : \r\n    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False; "
    ],
    "starter_code": "def solution():\n    # Write a python function to check whether the given number is odd or not using bitwise operator.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_888",
    "question": "Write a function to substract the elements of the given nested tuples.",
    "solutions": [
      "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    ],
    "starter_code": "def solution():\n    # Write a function to substract the elements of the given nested tuples.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_889",
    "question": "Write a function to reverse each list in a given list of lists.",
    "solutions": [
      "def reverse_list_lists(lists):\r\n    for l in lists:\r\n        l.sort(reverse = True)\r\n    return lists "
    ],
    "starter_code": "def solution():\n    # Write a function to reverse each list in a given list of lists.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_890",
    "question": "Write a python function to find the index of an extra element present in one sorted array.",
    "solutions": [
      "def find_Extra(arr1,arr2,n) : \r\n    for i in range(0, n) : \r\n        if (arr1[i] != arr2[i]) : \r\n            return i \r\n    return n "
    ],
    "starter_code": "def solution():\n    # Write a python function to find the index of an extra element present in one sorted array.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_891",
    "question": "Write a python function to check whether the given two numbers have same number of digits or not.",
    "solutions": [
      "def same_Length(A,B): \r\n    while (A > 0 and B > 0): \r\n        A = A / 10; \r\n        B = B / 10; \r\n    if (A == 0 and B == 0): \r\n        return True; \r\n    return False; "
    ],
    "starter_code": "def solution():\n    # Write a python function to check whether the given two numbers have same number of digits or not.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_892",
    "question": "Write a function to remove multiple spaces in a string.",
    "solutions": [
      "import re\r\ndef remove_spaces(text):\r\n return (re.sub(' +',' ',text))"
    ],
    "starter_code": "def solution():\n    # Write a function to remove multiple spaces in a string.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_893",
    "question": "Write a python function to get the last element of each sublist.",
    "solutions": [
      "def Extract(lst): \r\n    return [item[-1] for item in lst] "
    ],
    "starter_code": "def solution():\n    # Write a python function to get the last element of each sublist.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_894",
    "question": "Write a function to convert the given string of float type into tuple.",
    "solutions": [
      "def float_to_tuple(test_str):\r\n  res = tuple(map(float, test_str.split(', ')))\r\n  return (res) "
    ],
    "starter_code": "def solution():\n    # Write a function to convert the given string of float type into tuple.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_895",
    "question": "Write a function to find the maximum sum of subsequences of given array with no adjacent elements.",
    "solutions": [
      "def max_sum_subseq(A):\r\n    n = len(A)\r\n    if n == 1:\r\n        return A[0]\r\n    look_up = [None] * n\r\n    look_up[0] = A[0]\r\n    look_up[1] = max(A[0], A[1])\r\n    for i in range(2, n):\r\n        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])\r\n        look_up[i] = max(look_up[i], A[i])\r\n    return look_up[n - 1]"
    ],
    "starter_code": "def solution():\n    # Write a function to find the maximum sum of subsequences of given array with no adjacent elements.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_896",
    "question": "Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.",
    "solutions": [
      "def last(n):\r\n   return n[-1]\r\ndef sort_list_last(tuples):\r\n  return sorted(tuples, key=last)"
    ],
    "starter_code": "def solution():\n    # Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_897",
    "question": "Write a python function to check whether the word is present in a given sentence or not.",
    "solutions": [
      "def is_Word_Present(sentence,word): \r\n    s = sentence.split(\" \") \r\n    for i in s:  \r\n        if (i == word): \r\n            return True\r\n    return False"
    ],
    "starter_code": "def solution():\n    # Write a python function to check whether the word is present in a given sentence or not.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_898",
    "question": "Write a function to extract specified number of elements from a given list, which follow each other continuously.",
    "solutions": [
      "from itertools import groupby \r\ndef extract_elements(numbers, n):\r\n    result = [i for i, j in groupby(numbers) if len(list(j)) == n] \r\n    return result"
    ],
    "starter_code": "def solution():\n    # Write a function to extract specified number of elements from a given list, which follow each other continuously.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_899",
    "question": "Write a python function to check whether an array can be sorted or not by picking only the corner elements.",
    "solutions": [
      "def check(arr,n): \r\n    g = 0 \r\n    for i in range(1,n): \r\n        if (arr[i] - arr[i - 1] > 0 and g == 1): \r\n            return False\r\n        if (arr[i] - arr[i] < 0): \r\n            g = 1\r\n    return True"
    ],
    "starter_code": "def solution():\n    # Write a python function to check whether an array can be sorted or not by picking only the corner elements.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_900",
    "question": "Write a function where a string will start with a specific number.",
    "solutions": [
      "import re\r\ndef match_num(string):\r\n    text = re.compile(r\"^5\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False"
    ],
    "starter_code": "def solution():\n    # Write a function where a string will start with a specific number.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_901",
    "question": "Write a function to find the smallest multiple of the first n numbers.",
    "solutions": [
      "def smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i"
    ],
    "starter_code": "def solution():\n    # Write a function to find the smallest multiple of the first n numbers.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_902",
    "question": "Write a function to combine two dictionaries by adding values for common keys.",
    "solutions": [
      "from collections import Counter\r\ndef add_dict(d1,d2):\r\n   add_dict = Counter(d1) + Counter(d2)\r\n   return add_dict"
    ],
    "starter_code": "def solution():\n    # Write a function to combine two dictionaries by adding values for common keys.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_903",
    "question": "Write a python function to count the total unset bits from 1 to n.",
    "solutions": [
      "def count_Unset_Bits(n) :  \r\n    cnt = 0;  \r\n    for i in range(1,n + 1) : \r\n        temp = i;  \r\n        while (temp) :  \r\n            if (temp % 2 == 0) : \r\n                cnt += 1;  \r\n            temp = temp // 2;  \r\n    return cnt;  "
    ],
    "starter_code": "def solution():\n    # Write a python function to count the total unset bits from 1 to n.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_904",
    "question": "Write a function to return true if the given number is even else return false.",
    "solutions": [
      "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False"
    ],
    "starter_code": "def solution():\n    # Write a function to return true if the given number is even else return false.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_905",
    "question": "Write a python function to find the sum of squares of binomial co-efficients.",
    "solutions": [
      "def factorial(start,end): \r\n    res = 1 \r\n    for i in range(start,end + 1): \r\n        res *= i      \r\n    return res \r\ndef sum_of_square(n): \r\n   return int(factorial(n + 1, 2 * n)  /factorial(1, n)) "
    ],
    "starter_code": "def solution():\n    # Write a python function to find the sum of squares of binomial co-efficients.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_906",
    "question": "Write a function to extract year, month and date from a url by using regex.",
    "solutions": [
      "import re\r\ndef extract_date(url):\r\n        return re.findall(r'/(\\d{4})/(\\d{1,2})/(\\d{1,2})/', url)"
    ],
    "starter_code": "def solution():\n    # Write a function to extract year, month and date from a url by using regex.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_907",
    "question": "Write a function to print the first n lucky numbers.",
    "solutions": [
      "def lucky_num(n):\r\n List=range(-1,n*n+9,2)\r\n i=2\r\n while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1\r\n return List[1:n+1]"
    ],
    "starter_code": "def solution():\n    # Write a function to print the first n lucky numbers.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_908",
    "question": "Write a function to find the fixed point in the given array.",
    "solutions": [
      "def find_fixed_point(arr, n): \r\n\tfor i in range(n): \r\n\t\tif arr[i] is i: \r\n\t\t\treturn i \r\n\treturn -1"
    ],
    "starter_code": "def solution():\n    # Write a function to find the fixed point in the given array.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_909",
    "question": "Write a function to find the previous palindrome of a specified number.",
    "solutions": [
      "def previous_palindrome(num):\r\n    for x in range(num-1,0,-1):\r\n        if str(x) == str(x)[::-1]:\r\n            return x"
    ],
    "starter_code": "def solution():\n    # Write a function to find the previous palindrome of a specified number.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_910",
    "question": "Write a function to validate a gregorian date.",
    "solutions": [
      "import datetime\r\ndef check_date(m, d, y):\r\n    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False"
    ],
    "starter_code": "def solution():\n    # Write a function to validate a gregorian date.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_911",
    "question": "Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.",
    "solutions": [
      "def maximum_product(nums):\r\n    import heapq\r\n    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)\r\n    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])"
    ],
    "starter_code": "def solution():\n    # Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_912",
    "question": "Write a function to find ln, m lobb number.",
    "solutions": [
      "def binomial_coeff(n, k): \r\n\tC = [[0 for j in range(k + 1)] \r\n\t\t\tfor i in range(n + 1)] \r\n\tfor i in range(0, n + 1): \r\n\t\tfor j in range(0, min(i, k) + 1): \r\n\t\t\tif (j == 0 or j == i): \r\n\t\t\t\tC[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tC[i][j] = (C[i - 1][j - 1] \r\n\t\t\t\t\t\t\t+ C[i - 1][j]) \r\n\treturn C[n][k] \r\ndef lobb_num(n, m): \r\n\treturn (((2 * m + 1) *\r\n\t\tbinomial_coeff(2 * n, m + n)) \r\n\t\t\t\t\t/ (m + n + 1))"
    ],
    "starter_code": "def solution():\n    # Write a function to find ln, m lobb number.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_913",
    "question": "Write a function to check for a number at the end of a string.",
    "solutions": [
      "import re\r\ndef end_num(string):\r\n    text = re.compile(r\".*[0-9]$\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False"
    ],
    "starter_code": "def solution():\n    # Write a function to check for a number at the end of a string.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_914",
    "question": "Write a python function to check whether the given string is made up of two alternating characters or not.",
    "solutions": [
      "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True"
    ],
    "starter_code": "def solution():\n    # Write a python function to check whether the given string is made up of two alternating characters or not.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_915",
    "question": "Write a function to rearrange positive and negative numbers in a given array using lambda function.",
    "solutions": [
      "def rearrange_numbs(array_nums):\r\n  result = sorted(array_nums, key = lambda i: 0 if i == 0 else -1 / i)\r\n  return result "
    ],
    "starter_code": "def solution():\n    # Write a function to rearrange positive and negative numbers in a given array using lambda function.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_916",
    "question": "Write a function to find if there is a triplet in the array whose sum is equal to a given value.",
    "solutions": [
      "def find_triplet_array(A, arr_size, sum): \r\n\tfor i in range( 0, arr_size-2): \r\n\t\tfor j in range(i + 1, arr_size-1): \r\n\t\t\tfor k in range(j + 1, arr_size): \r\n\t\t\t\tif A[i] + A[j] + A[k] == sum: \r\n\t\t\t\t\treturn  A[i],A[j],A[k] \r\n\t\t\t\t\treturn True\r\n\treturn False"
    ],
    "starter_code": "def solution():\n    # Write a function to find if there is a triplet in the array whose sum is equal to a given value.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_917",
    "question": "Write a function to find the sequences of one upper case letter followed by lower case letters.",
    "solutions": [
      "import re\r\ndef text_uppercase_lowercase(text):\r\n        patterns = '[A-Z]+[a-z]+$'\r\n        if re.search(patterns, text):\r\n                return 'Found a match!'\r\n        else:\r\n                return ('Not matched!')"
    ],
    "starter_code": "def solution():\n    # Write a function to find the sequences of one upper case letter followed by lower case letters.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_918",
    "question": "Write a function to count coin change.",
    "solutions": [
      "def coin_change(S, m, n): \r\n    table = [[0 for x in range(m)] for x in range(n+1)] \r\n    for i in range(m): \r\n        table[0][i] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(m): \r\n            x = table[i - S[j]][j] if i-S[j] >= 0 else 0\r\n            y = table[i][j-1] if j >= 1 else 0 \r\n            table[i][j] = x + y   \r\n    return table[n][m-1] "
    ],
    "starter_code": "def solution():\n    # Write a function to count coin change.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_919",
    "question": "Write a python function to multiply all items in the list.",
    "solutions": [
      "def multiply_list(items):\r\n    tot = 1\r\n    for x in items:\r\n        tot *= x\r\n    return tot"
    ],
    "starter_code": "def solution():\n    # Write a python function to multiply all items in the list.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_920",
    "question": "Write a function to remove all tuples with all none values in the given tuple list.",
    "solutions": [
      "def remove_tuple(test_list):\r\n  res = [sub for sub in test_list if not all(ele == None for ele in sub)]\r\n  return (str(res)) "
    ],
    "starter_code": "def solution():\n    # Write a function to remove all tuples with all none values in the given tuple list.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_921",
    "question": "Write a function to perform chunking of tuples each of size n.",
    "solutions": [
      "def chunk_tuples(test_tup, N):\r\n  res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]\r\n  return (res) "
    ],
    "starter_code": "def solution():\n    # Write a function to perform chunking of tuples each of size n.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_922",
    "question": "Write a function to find a pair with the highest product from a given array of integers.",
    "solutions": [
      "def max_product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return None     \r\n    x = arr[0]; y = arr[1]    \r\n    for i in range(0, arr_len): \r\n        for j in range(i + 1, arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y   "
    ],
    "starter_code": "def solution():\n    # Write a function to find a pair with the highest product from a given array of integers.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_923",
    "question": "Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.",
    "solutions": [
      "def super_seq(X, Y, m, n):\r\n\tif (not m):\r\n\t\treturn n\r\n\tif (not n):\r\n\t\treturn m\r\n\tif (X[m - 1] == Y[n - 1]):\r\n\t\treturn 1 + super_seq(X, Y, m - 1, n - 1)\r\n\treturn 1 + min(super_seq(X, Y, m - 1, n),\tsuper_seq(X, Y, m, n - 1))"
    ],
    "starter_code": "def solution():\n    # Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_924",
    "question": "Write a function to find maximum of two numbers.",
    "solutions": [
      "def max_of_two( x, y ):\r\n    if x > y:\r\n        return x\r\n    return y"
    ],
    "starter_code": "def solution():\n    # Write a function to find maximum of two numbers.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_925",
    "question": "Write a python function to calculate the product of all the numbers of a given tuple.",
    "solutions": [
      "def mutiple_tuple(nums):\r\n    temp = list(nums)\r\n    product = 1 \r\n    for x in temp:\r\n        product *= x\r\n    return product"
    ],
    "starter_code": "def solution():\n    # Write a python function to calculate the product of all the numbers of a given tuple.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_926",
    "question": "Write a function to find n-th rencontres number.",
    "solutions": [
      "def binomial_coeffi(n, k): \r\n\tif (k == 0 or k == n): \r\n\t\treturn 1\r\n\treturn (binomial_coeffi(n - 1, k - 1) \r\n\t\t+ binomial_coeffi(n - 1, k)) \r\ndef rencontres_number(n, m): \r\n\tif (n == 0 and m == 0): \r\n\t\treturn 1\r\n\tif (n == 1 and m == 0): \r\n\t\treturn 0\r\n\tif (m == 0): \r\n\t\treturn ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0))) \r\n\treturn (binomial_coeffi(n, m) * rencontres_number(n - m, 0))"
    ],
    "starter_code": "def solution():\n    # Write a function to find n-th rencontres number.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_927",
    "question": "Write a function to calculate the height of the given binary tree.",
    "solutions": [
      "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef max_height(node): \r\n\tif node is None: \r\n\t\treturn 0 ; \r\n\telse : \r\n\t\tleft_height = max_height(node.left) \r\n\t\tright_height = max_height(node.right) \r\n\t\tif (left_height > right_height): \r\n\t\t\treturn left_height+1\r\n\t\telse: \r\n\t\t\treturn right_height+1"
    ],
    "starter_code": "def solution():\n    # Write a function to calculate the height of the given binary tree.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_928",
    "question": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.",
    "solutions": [
      "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\r\n        return change_date_format(dt)"
    ],
    "starter_code": "def solution():\n    # Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_929",
    "question": "Write a function to count repeated items of a tuple.",
    "solutions": [
      "def count_tuplex(tuplex,value):  \r\n  count = tuplex.count(value)\r\n  return count"
    ],
    "starter_code": "def solution():\n    # Write a function to count repeated items of a tuple.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_930",
    "question": "Write a function that matches a string that has an a followed by zero or more b's by using regex.",
    "solutions": [
      "import re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return ('Found a match!')\r\n        else:\r\n                return ('Not matched!')"
    ],
    "starter_code": "def solution():\n    # Write a function that matches a string that has an a followed by zero or more b's by using regex.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_931",
    "question": "Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.",
    "solutions": [
      "import math \r\ndef sum_series(number):\r\n total = 0\r\n total = math.pow((number * (number + 1)) /2, 2)\r\n return total"
    ],
    "starter_code": "def solution():\n    # Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_932",
    "question": "Write a function to remove duplicate words from a given list of strings.",
    "solutions": [
      "def remove_duplic_list(l):\r\n    temp = []\r\n    for x in l:\r\n        if x not in temp:\r\n            temp.append(x)\r\n    return temp"
    ],
    "starter_code": "def solution():\n    # Write a function to remove duplicate words from a given list of strings.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_933",
    "question": "Write a function to convert camel case string to snake case string by using regex.",
    "solutions": [
      "import re\r\ndef camel_to_snake(text):\r\n  str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n  return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()"
    ],
    "starter_code": "def solution():\n    # Write a function to convert camel case string to snake case string by using regex.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_934",
    "question": "Write a function to find the nth delannoy number.",
    "solutions": [
      "def dealnnoy_num(n, m): \r\n\tif (m == 0 or n == 0) : \r\n\t\treturn 1\r\n\treturn dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)"
    ],
    "starter_code": "def solution():\n    # Write a function to find the nth delannoy number.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_935",
    "question": "Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.",
    "solutions": [
      "def series_sum(number):\r\n total = 0\r\n total = (number * (number + 1) * (2 * number + 1)) / 6\r\n return total"
    ],
    "starter_code": "def solution():\n    # Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_936",
    "question": "Write a function to re-arrange the given tuples based on the given ordered list.",
    "solutions": [
      "def re_arrange_tuples(test_list, ord_list):\r\n  temp = dict(test_list)\r\n  res = [(key, temp[key]) for key in ord_list]\r\n  return (res) "
    ],
    "starter_code": "def solution():\n    # Write a function to re-arrange the given tuples based on the given ordered list.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_937",
    "question": "Write a function to count the most common character in a given string.",
    "solutions": [
      "from collections import Counter \r\ndef max_char(str1):\r\n    temp = Counter(str1) \r\n    max_char = max(temp, key = temp.get)\r\n    return max_char"
    ],
    "starter_code": "def solution():\n    # Write a function to count the most common character in a given string.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_938",
    "question": "Write a function to find three closest elements from three sorted arrays.",
    "solutions": [
      "import sys \r\n\r\ndef find_closet(A, B, C, p, q, r): \r\n\tdiff = sys.maxsize \r\n\tres_i = 0\r\n\tres_j = 0\r\n\tres_k = 0\r\n\ti = 0\r\n\tj = 0\r\n\tk = 0\r\n\twhile(i < p and j < q and k < r): \r\n\t\tminimum = min(A[i], min(B[j], C[k])) \r\n\t\tmaximum = max(A[i], max(B[j], C[k])); \r\n\t\tif maximum-minimum < diff: \r\n\t\t\tres_i = i \r\n\t\t\tres_j = j \r\n\t\t\tres_k = k \r\n\t\t\tdiff = maximum - minimum; \r\n\t\tif diff == 0: \r\n\t\t\tbreak\r\n\t\tif A[i] == minimum: \r\n\t\t\ti = i+1\r\n\t\telif B[j] == minimum: \r\n\t\t\tj = j+1\r\n\t\telse: \r\n\t\t\tk = k+1\r\n\treturn A[res_i],B[res_j],C[res_k]"
    ],
    "starter_code": "def solution():\n    # Write a function to find three closest elements from three sorted arrays.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_939",
    "question": "Write a function to sort a list of dictionaries using lambda function.",
    "solutions": [
      "def sorted_models(models):\r\n sorted_models = sorted(models, key = lambda x: x['color'])\r\n return sorted_models"
    ],
    "starter_code": "def solution():\n    # Write a function to sort a list of dictionaries using lambda function.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_940",
    "question": "Write a function to sort the given array by using heap sort.",
    "solutions": [
      "def heap_sort(arr):\r\n    heapify(arr)  \r\n    end = len(arr) - 1\r\n    while end > 0:\r\n        arr[end], arr[0] = arr[0], arr[end]\r\n        shift_down(arr, 0, end - 1)\r\n        end -= 1\r\n    return arr\r\n\r\ndef heapify(arr):\r\n    start = len(arr) // 2\r\n    while start >= 0:\r\n        shift_down(arr, start, len(arr) - 1)\r\n        start -= 1\r\ndef shift_down(arr, start, end):\r\n    root = start\r\n    while root * 2 + 1 <= end:\r\n        child = root * 2 + 1\r\n        if child + 1 <= end and arr[child] < arr[child + 1]:\r\n            child += 1\r\n        if child <= end and arr[root] < arr[child]:\r\n            arr[root], arr[child] = arr[child], arr[root]\r\n            root = child\r\n        else:\r\n            return\r\n"
    ],
    "starter_code": "def solution():\n    # Write a function to sort the given array by using heap sort.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_941",
    "question": "Write a function to count the elements in a list until an element is a tuple.",
    "solutions": [
      "def count_elim(num):\r\n  count_elim = 0\r\n  for n in num:\r\n    if isinstance(n, tuple):\r\n        break\r\n    count_elim += 1\r\n  return count_elim"
    ],
    "starter_code": "def solution():\n    # Write a function to count the elements in a list until an element is a tuple.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_942",
    "question": "Write a function to check if any list element is present in the given list.",
    "solutions": [
      "def check_element(test_tup, check_list):\r\n  res = False\r\n  for ele in check_list:\r\n    if ele in test_tup:\r\n      res = True\r\n      break\r\n  return (res) "
    ],
    "starter_code": "def solution():\n    # Write a function to check if any list element is present in the given list.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_943",
    "question": "Write a function to combine two given sorted lists using heapq module.",
    "solutions": [
      "from heapq import merge\r\ndef combine_lists(num1,num2):\r\n  combine_lists=list(merge(num1, num2))\r\n  return combine_lists"
    ],
    "starter_code": "def solution():\n    # Write a function to combine two given sorted lists using heapq module.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_944",
    "question": "Write a function to separate and print the numbers and their position of a given string.",
    "solutions": [
      "import re\r\ndef num_position(text):\r\n for m in re.finditer(\"\\d+\", text):\r\n    return m.start()"
    ],
    "starter_code": "def solution():\n    # Write a function to separate and print the numbers and their position of a given string.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_945",
    "question": "Write a function to convert the given tuples into set.",
    "solutions": [
      "def tuple_to_set(t):\r\n  s = set(t)\r\n  return (s) "
    ],
    "starter_code": "def solution():\n    # Write a function to convert the given tuples into set.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_946",
    "question": "Write a function to find the most common elements and their counts of a specified text.",
    "solutions": [
      "from collections import Counter \r\ndef most_common_elem(s,a):\r\n  most_common_elem=Counter(s).most_common(a)\r\n  return most_common_elem"
    ],
    "starter_code": "def solution():\n    # Write a function to find the most common elements and their counts of a specified text.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_947",
    "question": "Write a python function to find the length of the shortest word.",
    "solutions": [
      "def len_log(list1):\r\n    min=len(list1[0])\r\n    for i in list1:\r\n        if len(i)<min:\r\n            min=len(i)\r\n    return min"
    ],
    "starter_code": "def solution():\n    # Write a python function to find the length of the shortest word.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_948",
    "question": "Write a function to get an item of a tuple.",
    "solutions": [
      "def get_item(tup1,index):\r\n  item = tup1[index]\r\n  return item"
    ],
    "starter_code": "def solution():\n    # Write a function to get an item of a tuple.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_949",
    "question": "Write a function to sort the given tuple list basis the total digits in tuple.",
    "solutions": [
      "def count_digs(tup):\r\n  return sum([len(str(ele)) for ele in tup ]) \r\ndef sort_list(test_list):\r\n  test_list.sort(key = count_digs)\r\n  return (str(test_list))"
    ],
    "starter_code": "def solution():\n    # Write a function to sort the given tuple list basis the total digits in tuple.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_950",
    "question": "Write a function to display sign of the chinese zodiac for given year.",
    "solutions": [
      "def chinese_zodiac(year):\r\n if (year - 2000) % 12 == 0:\r\n     sign = 'Dragon'\r\n elif (year - 2000) % 12 == 1:\r\n     sign = 'Snake'\r\n elif (year - 2000) % 12 == 2:\r\n     sign = 'Horse'\r\n elif (year - 2000) % 12 == 3:\r\n     sign = 'sheep'\r\n elif (year - 2000) % 12 == 4:\r\n     sign = 'Monkey'\r\n elif (year - 2000) % 12 == 5:\r\n     sign = 'Rooster'\r\n elif (year - 2000) % 12 == 6:\r\n     sign = 'Dog'\r\n elif (year - 2000) % 12 == 7:\r\n     sign = 'Pig'\r\n elif (year - 2000) % 12 == 8:\r\n     sign = 'Rat'\r\n elif (year - 2000) % 12 == 9:\r\n     sign = 'Ox'\r\n elif (year - 2000) % 12 == 10:\r\n     sign = 'Tiger'\r\n else:\r\n     sign = 'Hare'\r\n return sign"
    ],
    "starter_code": "def solution():\n    # Write a function to display sign of the chinese zodiac for given year.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_951",
    "question": "Write a function to find the maximum of similar indices in two lists of tuples.",
    "solutions": [
      "def max_similar_indices(test_list1, test_list2):\r\n  res = [(max(x[0], y[0]), max(x[1], y[1]))\r\n   for x, y in zip(test_list1, test_list2)]\r\n  return (res) "
    ],
    "starter_code": "def solution():\n    # Write a function to find the maximum of similar indices in two lists of tuples.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_952",
    "question": "Write a function to compute the value of ncr mod p.",
    "solutions": [
      "def nCr_mod_p(n, r, p): \r\n\tif (r > n- r): \r\n\t\tr = n - r \r\n\tC = [0 for i in range(r + 1)] \r\n\tC[0] = 1 \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(min(i, r), 0, -1): \r\n\t\t\tC[j] = (C[j] + C[j-1]) % p \r\n\treturn C[r] "
    ],
    "starter_code": "def solution():\n    # Write a function to compute the value of ncr mod p.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_953",
    "question": "Write a python function to find the minimun number of subsets with distinct elements.",
    "solutions": [
      "def subset(ar, n): \r\n    res = 0\r\n    ar.sort() \r\n    for i in range(0, n) : \r\n        count = 1\r\n        for i in range(n - 1): \r\n            if ar[i] == ar[i + 1]: \r\n                count+=1\r\n            else: \r\n                break \r\n        res = max(res, count)  \r\n    return res "
    ],
    "starter_code": "def solution():\n    # Write a python function to find the minimun number of subsets with distinct elements.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_954",
    "question": "Write a function that gives profit amount if the given amount has profit else return none.",
    "solutions": [
      "def profit_amount(actual_cost,sale_amount): \r\n if(actual_cost > sale_amount):\r\n    amount = actual_cost - sale_amount\r\n    return amount\r\n else:\r\n    return None"
    ],
    "starter_code": "def solution():\n    # Write a function that gives profit amount if the given amount has profit else return none.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_955",
    "question": "Write a function to find out, if the given number is abundant.",
    "solutions": [
      "def is_abundant(n):\r\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\r\n    return fctrsum > n"
    ],
    "starter_code": "def solution():\n    # Write a function to find out, if the given number is abundant.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_956",
    "question": "Write a function to split the given string at uppercase letters by using regex.",
    "solutions": [
      "import re\r\ndef split_list(text):\r\n  return (re.findall('[A-Z][^A-Z]*', text))"
    ],
    "starter_code": "def solution():\n    # Write a function to split the given string at uppercase letters by using regex.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_957",
    "question": "Write a python function to get the position of rightmost set bit.",
    "solutions": [
      "import math\r\ndef get_First_Set_Bit_Pos(n):\r\n     return math.log2(n&-n)+1"
    ],
    "starter_code": "def solution():\n    # Write a python function to get the position of rightmost set bit.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_958",
    "question": "Write a function to convert an integer into a roman numeral.",
    "solutions": [
      "def int_to_roman( num):\r\n        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]\r\n        syb = [\"M\", \"CM\", \"D\", \"CD\",\"C\", \"XC\", \"L\", \"XL\",\"X\", \"IX\", \"V\", \"IV\",\"I\"]\r\n        roman_num = ''\r\n        i = 0\r\n        while  num > 0:\r\n            for _ in range(num // val[i]):\r\n                roman_num += syb[i]\r\n                num -= val[i]\r\n            i += 1\r\n        return roman_num"
    ],
    "starter_code": "def solution():\n    # Write a function to convert an integer into a roman numeral.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_959",
    "question": "Write a python function to find the average of a list.",
    "solutions": [
      "def Average(lst): \r\n    return sum(lst) / len(lst) "
    ],
    "starter_code": "def solution():\n    # Write a python function to find the average of a list.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_960",
    "question": "Write a function to solve tiling problem.",
    "solutions": [
      "def get_noOfways(n):\r\n    if (n == 0):\r\n        return 0;\r\n    if (n == 1):\r\n        return 1; \r\n    return get_noOfways(n - 1) + get_noOfways(n - 2);"
    ],
    "starter_code": "def solution():\n    # Write a function to solve tiling problem.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_961",
    "question": "Write a function to convert a roman numeral to an integer.",
    "solutions": [
      "def roman_to_int(s):\r\n        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\r\n        int_val = 0\r\n        for i in range(len(s)):\r\n            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:\r\n                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]\r\n            else:\r\n                int_val += rom_val[s[i]]\r\n        return int_val"
    ],
    "starter_code": "def solution():\n    # Write a function to convert a roman numeral to an integer.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_962",
    "question": "Write a python function to find the sum of all even natural numbers within the range l and r.",
    "solutions": [
      "def sum_Natural(n): \r\n    sum = (n * (n + 1)) \r\n    return int(sum) \r\ndef sum_Even(l,r): \r\n    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2))) "
    ],
    "starter_code": "def solution():\n    # Write a python function to find the sum of all even natural numbers within the range l and r.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_963",
    "question": "Write a function to calculate the discriminant value.",
    "solutions": [
      "def discriminant_value(x,y,z):\r\n    discriminant = (y**2) - (4*x*z)\r\n    if discriminant > 0:\r\n        return (\"Two solutions\",discriminant)\r\n    elif discriminant == 0:\r\n        return (\"one solution\",discriminant)\r\n    elif discriminant < 0:\r\n        return (\"no real solution\",discriminant)"
    ],
    "starter_code": "def solution():\n    # Write a function to calculate the discriminant value.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_964",
    "question": "Write a python function to check whether the length of the word is even or not.",
    "solutions": [
      "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2==0: \r\n            return True  \r\n        else:\r\n          return False"
    ],
    "starter_code": "def solution():\n    # Write a python function to check whether the length of the word is even or not.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_965",
    "question": "Write a function to convert camel case string to snake case string.",
    "solutions": [
      "def camel_to_snake(text):\r\n        import re\r\n        str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n        return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()"
    ],
    "starter_code": "def solution():\n    # Write a function to convert camel case string to snake case string.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_966",
    "question": "Write a function to remove an empty tuple from a list of tuples.",
    "solutions": [
      "def remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\r\n   tuple1 = [t for t in tuple1 if t]\r\n   return tuple1"
    ],
    "starter_code": "def solution():\n    # Write a function to remove an empty tuple from a list of tuples.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_967",
    "question": "Write a python function to accept the strings which contains all vowels.",
    "solutions": [
      "def check(string): \r\n  if len(set(string).intersection(\"AEIOUaeiou\"))>=5: \r\n    return ('accepted') \r\n  else: \r\n    return (\"not accepted\") "
    ],
    "starter_code": "def solution():\n    # Write a python function to accept the strings which contains all vowels.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_968",
    "question": "Write a python function to find maximum possible value for the given periodic function.",
    "solutions": [
      "def floor_Max(A,B,N):\r\n    x = min(B - 1,N)\r\n    return (A*x) // B"
    ],
    "starter_code": "def solution():\n    # Write a python function to find maximum possible value for the given periodic function.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_969",
    "question": "Write a function to join the tuples if they have similar initial elements.",
    "solutions": [
      "def join_tuples(test_list):\r\n  res = []\r\n  for sub in test_list:\r\n    if res and res[-1][0] == sub[0]:\r\n      res[-1].extend(sub[1:])\r\n    else:\r\n      res.append([ele for ele in sub])\r\n  res = list(map(tuple, res))\r\n  return (res) "
    ],
    "starter_code": "def solution():\n    # Write a function to join the tuples if they have similar initial elements.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_970",
    "question": "Write a function to find minimum of two numbers.",
    "solutions": [
      "def min_of_two( x, y ):\r\n    if x < y:\r\n        return x\r\n    return y"
    ],
    "starter_code": "def solution():\n    # Write a function to find minimum of two numbers.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_971",
    "question": "Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.",
    "solutions": [
      "def maximum_segments(n, a, b, c) : \r\n\tdp = [-1] * (n + 10) \r\n\tdp[0] = 0\r\n\tfor i in range(0, n) : \r\n\t\tif (dp[i] != -1) : \r\n\t\t\tif(i + a <= n ): \r\n\t\t\t\tdp[i + a] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + a]) \r\n\t\t\tif(i + b <= n ): \r\n\t\t\t\tdp[i + b] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + b]) \r\n\t\t\tif(i + c <= n ): \r\n\t\t\t\tdp[i + c] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + c]) \r\n\treturn dp[n]"
    ],
    "starter_code": "def solution():\n    # Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "medium",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_972",
    "question": "Write a function to concatenate the given two tuples to a nested tuple.",
    "solutions": [
      "def concatenate_nested(test_tup1, test_tup2):\r\n  res = test_tup1 + test_tup2\r\n  return (res) "
    ],
    "starter_code": "def solution():\n    # Write a function to concatenate the given two tuples to a nested tuple.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_973",
    "question": "Write a python function to left rotate the string.",
    "solutions": [
      "def left_rotate(s,d):\r\n    tmp = s[d : ] + s[0 : d]\r\n    return tmp  "
    ],
    "starter_code": "def solution():\n    # Write a python function to left rotate the string.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "easy",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "mbpp_974",
    "question": "Write a function to find the minimum total path sum in the given triangle.",
    "solutions": [
      "def min_sum_path(A): \r\n\tmemo = [None] * len(A) \r\n\tn = len(A) - 1\r\n\tfor i in range(len(A[n])): \r\n\t\tmemo[i] = A[n][i] \r\n\tfor i in range(len(A) - 2, -1,-1): \r\n\t\tfor j in range( len(A[i])): \r\n\t\t\tmemo[j] = A[i][j] + min(memo[j], \r\n\t\t\t\t\t\t\t\t\tmemo[j + 1]) \r\n\treturn memo[0]"
    ],
    "starter_code": "def solution():\n    # Write a function to find the minimum total path sum in the given triangle.\n    pass",
    "input_output": {
      "inputs": [],
      "outputs": []
    },
    "difficulty": "hard",
    "url": "https://github.com/google-research/google-research/tree/master/mbpp",
    "source": "MBPP",
    "test_case_count": 3
  },
  {
    "problem_id": "hard_001_v0",
    "question": "Implement Dijkstra's shortest path algorithm for a weighted graph.\n\nFunction signature: def dijkstra(graph: Dict[int, List[Tuple[int, int]]], start: int) -> Dict[int, int]:\n\nReturn distances from start to all nodes.",
    "solutions": [
      "def dijkstra(graph, start):\n    import heapq\n    distances = {node: float('inf') for node in graph}\n    distances[start] = 0\n    pq = [(0, start)]\n    \n    while pq:\n        current_dist, current = heapq.heappop(pq)\n        if current_dist > distances[current]:\n            continue\n        for neighbor, weight in graph[current]:\n            distance = current_dist + weight\n            if distance < distances[neighbor]:\n                distances[neighbor] = distance\n                heapq.heappush(pq, (distance, neighbor))\n    return distances"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement Dijkstra's shortest path algorithm for a weighted graph.\n\nFunction signature: def dijkstra(graph: Dict[int, List[Tuple[int, int]]], start: int) -> Dict[int, int]:\n\nReturn distances from start to all nodes.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_0\"]"
      ],
      "outputs": [
        "\"test_output_hard_0\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  },
  {
    "problem_id": "hard_002_v0",
    "question": "Implement a Trie (prefix tree) with insert, search, and startsWith operations.",
    "solutions": [
      "class Trie:\n    def __init__(self):\n        self.root = {}\n    def insert(self, word):\n        node = self.root\n        for char in word:\n            if char not in node:\n                node[char] = {}\n            node = node[char]\n        node['$'] = True\n    def search(self, word):\n        node = self.root\n        for char in word:\n            if char not in node:\n                return False\n            node = node[char]\n        return '$' in node"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement a Trie (prefix tree) with insert, search, and startsWith operations.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_1\"]"
      ],
      "outputs": [
        "\"test_output_hard_1\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  },
  {
    "problem_id": "hard_003_v0",
    "question": "Implement merge sort algorithm with optimal space complexity.",
    "solutions": [
      "def mergeSort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = mergeSort(arr[:mid])\n    right = mergeSort(arr[mid:])\n    return merge(left, right)\ndef merge(left, right):\n    result = []\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement merge sort algorithm with optimal space complexity.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_2\"]"
      ],
      "outputs": [
        "\"test_output_hard_2\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  },
  {
    "problem_id": "hard_001_v1",
    "question": "Implement Dijkstra's shortest path algorithm for a weighted graph.\n\nFunction signature: def dijkstra(graph: Dict[int, List[Tuple[int, int]]], start: int) -> Dict[int, int]:\n\nReturn distances from start to all nodes.",
    "solutions": [
      "def dijkstra(graph, start):\n    import heapq\n    distances = {node: float('inf') for node in graph}\n    distances[start] = 0\n    pq = [(0, start)]\n    \n    while pq:\n        current_dist, current = heapq.heappop(pq)\n        if current_dist > distances[current]:\n            continue\n        for neighbor, weight in graph[current]:\n            distance = current_dist + weight\n            if distance < distances[neighbor]:\n                distances[neighbor] = distance\n                heapq.heappush(pq, (distance, neighbor))\n    return distances"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement Dijkstra's shortest path algorithm for a weighted graph.\n\nFunction signature: def dijkstra(graph: Dict[int, List[Tuple[int, int]]], start: int) -> Dict[int, int]:\n\nReturn distances from start to all nodes.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_0\"]"
      ],
      "outputs": [
        "\"test_output_hard_0\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  },
  {
    "problem_id": "hard_002_v1",
    "question": "Implement a Trie (prefix tree) with insert, search, and startsWith operations.",
    "solutions": [
      "class Trie:\n    def __init__(self):\n        self.root = {}\n    def insert(self, word):\n        node = self.root\n        for char in word:\n            if char not in node:\n                node[char] = {}\n            node = node[char]\n        node['$'] = True\n    def search(self, word):\n        node = self.root\n        for char in word:\n            if char not in node:\n                return False\n            node = node[char]\n        return '$' in node"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement a Trie (prefix tree) with insert, search, and startsWith operations.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_1\"]"
      ],
      "outputs": [
        "\"test_output_hard_1\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  },
  {
    "problem_id": "hard_003_v1",
    "question": "Implement merge sort algorithm with optimal space complexity.",
    "solutions": [
      "def mergeSort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = mergeSort(arr[:mid])\n    right = mergeSort(arr[mid:])\n    return merge(left, right)\ndef merge(left, right):\n    result = []\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement merge sort algorithm with optimal space complexity.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_2\"]"
      ],
      "outputs": [
        "\"test_output_hard_2\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  },
  {
    "problem_id": "hard_001_v2",
    "question": "Implement Dijkstra's shortest path algorithm for a weighted graph.\n\nFunction signature: def dijkstra(graph: Dict[int, List[Tuple[int, int]]], start: int) -> Dict[int, int]:\n\nReturn distances from start to all nodes.",
    "solutions": [
      "def dijkstra(graph, start):\n    import heapq\n    distances = {node: float('inf') for node in graph}\n    distances[start] = 0\n    pq = [(0, start)]\n    \n    while pq:\n        current_dist, current = heapq.heappop(pq)\n        if current_dist > distances[current]:\n            continue\n        for neighbor, weight in graph[current]:\n            distance = current_dist + weight\n            if distance < distances[neighbor]:\n                distances[neighbor] = distance\n                heapq.heappush(pq, (distance, neighbor))\n    return distances"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement Dijkstra's shortest path algorithm for a weighted graph.\n\nFunction signature: def dijkstra(graph: Dict[int, List[Tuple[int, int]]], start: int) -> Dict[int, int]:\n\nReturn distances from start to all nodes.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_0\"]"
      ],
      "outputs": [
        "\"test_output_hard_0\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  },
  {
    "problem_id": "hard_002_v2",
    "question": "Implement a Trie (prefix tree) with insert, search, and startsWith operations.",
    "solutions": [
      "class Trie:\n    def __init__(self):\n        self.root = {}\n    def insert(self, word):\n        node = self.root\n        for char in word:\n            if char not in node:\n                node[char] = {}\n            node = node[char]\n        node['$'] = True\n    def search(self, word):\n        node = self.root\n        for char in word:\n            if char not in node:\n                return False\n            node = node[char]\n        return '$' in node"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement a Trie (prefix tree) with insert, search, and startsWith operations.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_1\"]"
      ],
      "outputs": [
        "\"test_output_hard_1\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  },
  {
    "problem_id": "hard_003_v2",
    "question": "Implement merge sort algorithm with optimal space complexity.",
    "solutions": [
      "def mergeSort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = mergeSort(arr[:mid])\n    right = mergeSort(arr[mid:])\n    return merge(left, right)\ndef merge(left, right):\n    result = []\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement merge sort algorithm with optimal space complexity.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_2\"]"
      ],
      "outputs": [
        "\"test_output_hard_2\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  },
  {
    "problem_id": "hard_001_v3",
    "question": "Implement Dijkstra's shortest path algorithm for a weighted graph.\n\nFunction signature: def dijkstra(graph: Dict[int, List[Tuple[int, int]]], start: int) -> Dict[int, int]:\n\nReturn distances from start to all nodes.",
    "solutions": [
      "def dijkstra(graph, start):\n    import heapq\n    distances = {node: float('inf') for node in graph}\n    distances[start] = 0\n    pq = [(0, start)]\n    \n    while pq:\n        current_dist, current = heapq.heappop(pq)\n        if current_dist > distances[current]:\n            continue\n        for neighbor, weight in graph[current]:\n            distance = current_dist + weight\n            if distance < distances[neighbor]:\n                distances[neighbor] = distance\n                heapq.heappush(pq, (distance, neighbor))\n    return distances"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement Dijkstra's shortest path algorithm for a weighted graph.\n\nFunction signature: def dijkstra(graph: Dict[int, List[Tuple[int, int]]], start: int) -> Dict[int, int]:\n\nReturn distances from start to all nodes.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_0\"]"
      ],
      "outputs": [
        "\"test_output_hard_0\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  },
  {
    "problem_id": "hard_002_v3",
    "question": "Implement a Trie (prefix tree) with insert, search, and startsWith operations.",
    "solutions": [
      "class Trie:\n    def __init__(self):\n        self.root = {}\n    def insert(self, word):\n        node = self.root\n        for char in word:\n            if char not in node:\n                node[char] = {}\n            node = node[char]\n        node['$'] = True\n    def search(self, word):\n        node = self.root\n        for char in word:\n            if char not in node:\n                return False\n            node = node[char]\n        return '$' in node"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement a Trie (prefix tree) with insert, search, and startsWith operations.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_1\"]"
      ],
      "outputs": [
        "\"test_output_hard_1\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  },
  {
    "problem_id": "hard_003_v3",
    "question": "Implement merge sort algorithm with optimal space complexity.",
    "solutions": [
      "def mergeSort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = mergeSort(arr[:mid])\n    right = mergeSort(arr[mid:])\n    return merge(left, right)\ndef merge(left, right):\n    result = []\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement merge sort algorithm with optimal space complexity.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_2\"]"
      ],
      "outputs": [
        "\"test_output_hard_2\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  },
  {
    "problem_id": "hard_001_v4",
    "question": "Implement Dijkstra's shortest path algorithm for a weighted graph.\n\nFunction signature: def dijkstra(graph: Dict[int, List[Tuple[int, int]]], start: int) -> Dict[int, int]:\n\nReturn distances from start to all nodes.",
    "solutions": [
      "def dijkstra(graph, start):\n    import heapq\n    distances = {node: float('inf') for node in graph}\n    distances[start] = 0\n    pq = [(0, start)]\n    \n    while pq:\n        current_dist, current = heapq.heappop(pq)\n        if current_dist > distances[current]:\n            continue\n        for neighbor, weight in graph[current]:\n            distance = current_dist + weight\n            if distance < distances[neighbor]:\n                distances[neighbor] = distance\n                heapq.heappush(pq, (distance, neighbor))\n    return distances"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement Dijkstra's shortest path algorithm for a weighted graph.\n\nFunction signature: def dijkstra(graph: Dict[int, List[Tuple[int, int]]], start: int) -> Dict[int, int]:\n\nReturn distances from start to all nodes.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_0\"]"
      ],
      "outputs": [
        "\"test_output_hard_0\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  },
  {
    "problem_id": "hard_002_v4",
    "question": "Implement a Trie (prefix tree) with insert, search, and startsWith operations.",
    "solutions": [
      "class Trie:\n    def __init__(self):\n        self.root = {}\n    def insert(self, word):\n        node = self.root\n        for char in word:\n            if char not in node:\n                node[char] = {}\n            node = node[char]\n        node['$'] = True\n    def search(self, word):\n        node = self.root\n        for char in word:\n            if char not in node:\n                return False\n            node = node[char]\n        return '$' in node"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement a Trie (prefix tree) with insert, search, and startsWith operations.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_1\"]"
      ],
      "outputs": [
        "\"test_output_hard_1\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  },
  {
    "problem_id": "hard_003_v4",
    "question": "Implement merge sort algorithm with optimal space complexity.",
    "solutions": [
      "def mergeSort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = mergeSort(arr[:mid])\n    right = mergeSort(arr[mid:])\n    return merge(left, right)\ndef merge(left, right):\n    result = []\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement merge sort algorithm with optimal space complexity.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_2\"]"
      ],
      "outputs": [
        "\"test_output_hard_2\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  },
  {
    "problem_id": "hard_001_v5",
    "question": "Implement Dijkstra's shortest path algorithm for a weighted graph.\n\nFunction signature: def dijkstra(graph: Dict[int, List[Tuple[int, int]]], start: int) -> Dict[int, int]:\n\nReturn distances from start to all nodes.",
    "solutions": [
      "def dijkstra(graph, start):\n    import heapq\n    distances = {node: float('inf') for node in graph}\n    distances[start] = 0\n    pq = [(0, start)]\n    \n    while pq:\n        current_dist, current = heapq.heappop(pq)\n        if current_dist > distances[current]:\n            continue\n        for neighbor, weight in graph[current]:\n            distance = current_dist + weight\n            if distance < distances[neighbor]:\n                distances[neighbor] = distance\n                heapq.heappush(pq, (distance, neighbor))\n    return distances"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement Dijkstra's shortest path algorithm for a weighted graph.\n\nFunction signature: def dijkstra(graph: Dict[int, List[Tuple[int, int]]], start: int) -> Dict[int, int]:\n\nReturn distances from start to all nodes.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_0\"]"
      ],
      "outputs": [
        "\"test_output_hard_0\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  },
  {
    "problem_id": "hard_002_v5",
    "question": "Implement a Trie (prefix tree) with insert, search, and startsWith operations.",
    "solutions": [
      "class Trie:\n    def __init__(self):\n        self.root = {}\n    def insert(self, word):\n        node = self.root\n        for char in word:\n            if char not in node:\n                node[char] = {}\n            node = node[char]\n        node['$'] = True\n    def search(self, word):\n        node = self.root\n        for char in word:\n            if char not in node:\n                return False\n            node = node[char]\n        return '$' in node"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement a Trie (prefix tree) with insert, search, and startsWith operations.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_1\"]"
      ],
      "outputs": [
        "\"test_output_hard_1\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  },
  {
    "problem_id": "hard_003_v5",
    "question": "Implement merge sort algorithm with optimal space complexity.",
    "solutions": [
      "def mergeSort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = mergeSort(arr[:mid])\n    right = mergeSort(arr[mid:])\n    return merge(left, right)\ndef merge(left, right):\n    result = []\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement merge sort algorithm with optimal space complexity.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_2\"]"
      ],
      "outputs": [
        "\"test_output_hard_2\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  },
  {
    "problem_id": "hard_001_v6",
    "question": "Implement Dijkstra's shortest path algorithm for a weighted graph.\n\nFunction signature: def dijkstra(graph: Dict[int, List[Tuple[int, int]]], start: int) -> Dict[int, int]:\n\nReturn distances from start to all nodes.",
    "solutions": [
      "def dijkstra(graph, start):\n    import heapq\n    distances = {node: float('inf') for node in graph}\n    distances[start] = 0\n    pq = [(0, start)]\n    \n    while pq:\n        current_dist, current = heapq.heappop(pq)\n        if current_dist > distances[current]:\n            continue\n        for neighbor, weight in graph[current]:\n            distance = current_dist + weight\n            if distance < distances[neighbor]:\n                distances[neighbor] = distance\n                heapq.heappush(pq, (distance, neighbor))\n    return distances"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement Dijkstra's shortest path algorithm for a weighted graph.\n\nFunction signature: def dijkstra(graph: Dict[int, List[Tuple[int, int]]], start: int) -> Dict[int, int]:\n\nReturn distances from start to all nodes.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_0\"]"
      ],
      "outputs": [
        "\"test_output_hard_0\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  },
  {
    "problem_id": "hard_002_v6",
    "question": "Implement a Trie (prefix tree) with insert, search, and startsWith operations.",
    "solutions": [
      "class Trie:\n    def __init__(self):\n        self.root = {}\n    def insert(self, word):\n        node = self.root\n        for char in word:\n            if char not in node:\n                node[char] = {}\n            node = node[char]\n        node['$'] = True\n    def search(self, word):\n        node = self.root\n        for char in word:\n            if char not in node:\n                return False\n            node = node[char]\n        return '$' in node"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement a Trie (prefix tree) with insert, search, and startsWith operations.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_1\"]"
      ],
      "outputs": [
        "\"test_output_hard_1\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  },
  {
    "problem_id": "hard_003_v6",
    "question": "Implement merge sort algorithm with optimal space complexity.",
    "solutions": [
      "def mergeSort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = mergeSort(arr[:mid])\n    right = mergeSort(arr[mid:])\n    return merge(left, right)\ndef merge(left, right):\n    result = []\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement merge sort algorithm with optimal space complexity.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_2\"]"
      ],
      "outputs": [
        "\"test_output_hard_2\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  },
  {
    "problem_id": "hard_001_v7",
    "question": "Implement Dijkstra's shortest path algorithm for a weighted graph.\n\nFunction signature: def dijkstra(graph: Dict[int, List[Tuple[int, int]]], start: int) -> Dict[int, int]:\n\nReturn distances from start to all nodes.",
    "solutions": [
      "def dijkstra(graph, start):\n    import heapq\n    distances = {node: float('inf') for node in graph}\n    distances[start] = 0\n    pq = [(0, start)]\n    \n    while pq:\n        current_dist, current = heapq.heappop(pq)\n        if current_dist > distances[current]:\n            continue\n        for neighbor, weight in graph[current]:\n            distance = current_dist + weight\n            if distance < distances[neighbor]:\n                distances[neighbor] = distance\n                heapq.heappush(pq, (distance, neighbor))\n    return distances"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement Dijkstra's shortest path algorithm for a weighted graph.\n\nFunction signature: def dijkstra(graph: Dict[int, List[Tuple[int, int]]], start: int) -> Dict[int, int]:\n\nReturn distances from start to all nodes.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_0\"]"
      ],
      "outputs": [
        "\"test_output_hard_0\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  },
  {
    "problem_id": "hard_002_v7",
    "question": "Implement a Trie (prefix tree) with insert, search, and startsWith operations.",
    "solutions": [
      "class Trie:\n    def __init__(self):\n        self.root = {}\n    def insert(self, word):\n        node = self.root\n        for char in word:\n            if char not in node:\n                node[char] = {}\n            node = node[char]\n        node['$'] = True\n    def search(self, word):\n        node = self.root\n        for char in word:\n            if char not in node:\n                return False\n            node = node[char]\n        return '$' in node"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement a Trie (prefix tree) with insert, search, and startsWith operations.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_1\"]"
      ],
      "outputs": [
        "\"test_output_hard_1\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  },
  {
    "problem_id": "hard_003_v7",
    "question": "Implement merge sort algorithm with optimal space complexity.",
    "solutions": [
      "def mergeSort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = mergeSort(arr[:mid])\n    right = mergeSort(arr[mid:])\n    return merge(left, right)\ndef merge(left, right):\n    result = []\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement merge sort algorithm with optimal space complexity.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_2\"]"
      ],
      "outputs": [
        "\"test_output_hard_2\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  },
  {
    "problem_id": "hard_001_v8",
    "question": "Implement Dijkstra's shortest path algorithm for a weighted graph.\n\nFunction signature: def dijkstra(graph: Dict[int, List[Tuple[int, int]]], start: int) -> Dict[int, int]:\n\nReturn distances from start to all nodes.",
    "solutions": [
      "def dijkstra(graph, start):\n    import heapq\n    distances = {node: float('inf') for node in graph}\n    distances[start] = 0\n    pq = [(0, start)]\n    \n    while pq:\n        current_dist, current = heapq.heappop(pq)\n        if current_dist > distances[current]:\n            continue\n        for neighbor, weight in graph[current]:\n            distance = current_dist + weight\n            if distance < distances[neighbor]:\n                distances[neighbor] = distance\n                heapq.heappush(pq, (distance, neighbor))\n    return distances"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement Dijkstra's shortest path algorithm for a weighted graph.\n\nFunction signature: def dijkstra(graph: Dict[int, List[Tuple[int, int]]], start: int) -> Dict[int, int]:\n\nReturn distances from start to all nodes.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_0\"]"
      ],
      "outputs": [
        "\"test_output_hard_0\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  },
  {
    "problem_id": "hard_002_v8",
    "question": "Implement a Trie (prefix tree) with insert, search, and startsWith operations.",
    "solutions": [
      "class Trie:\n    def __init__(self):\n        self.root = {}\n    def insert(self, word):\n        node = self.root\n        for char in word:\n            if char not in node:\n                node[char] = {}\n            node = node[char]\n        node['$'] = True\n    def search(self, word):\n        node = self.root\n        for char in word:\n            if char not in node:\n                return False\n            node = node[char]\n        return '$' in node"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement a Trie (prefix tree) with insert, search, and startsWith operations.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_1\"]"
      ],
      "outputs": [
        "\"test_output_hard_1\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  },
  {
    "problem_id": "hard_003_v8",
    "question": "Implement merge sort algorithm with optimal space complexity.",
    "solutions": [
      "def mergeSort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = mergeSort(arr[:mid])\n    right = mergeSort(arr[mid:])\n    return merge(left, right)\ndef merge(left, right):\n    result = []\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result"
    ],
    "difficulty": "hard",
    "source": "synthetic_hard",
    "starter_code": "# Implement merge sort algorithm with optimal space complexity.\npass",
    "input_output": {
      "inputs": [
        "[\"test_input_hard_2\"]"
      ],
      "outputs": [
        "\"test_output_hard_2\""
      ]
    },
    "url": "synthetic://hard_problems",
    "test_case_count": 3
  }
]