[
  {
    "problem_id": "expanded_0160",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0160",
      "question": "Write a Python function (variant 160) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_001",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0160",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0160",
      "question": "Write a Python function (variant 160) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_001",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0160",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0160",
      "question": "Write a Python function (variant 160) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_001",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0160",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0160",
      "question": "Write a Python function (variant 160) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_001",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0160",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Returns the sum of two integers a and b.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0160",
      "question": "Write a Python function (variant 160) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_001",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0160",
    "code": "def add_numbers(a: int, b: int) -> int:\n    # This function takes two integers as input and returns their sum.\n    return a + b",
    "problem": {
      "problem_id": "expanded_0160",
      "question": "Write a Python function (variant 160) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_001",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7,
    "true_score": 0.7,
    "generation_temperature": 0.5,
    "solution_length": 3,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0161",
    "code": "def reverse_string(s: str) -> str:\n    # Check if the input is an empty string\n    if not s:\n        return \"\"\n    \n    # Initialize an empty list to store the characters of the reversed string\n    reversed_chars = []\n    \n    # Iterate over the string in reverse order\n    for i in range(len(s) - 1, -1, -1):\n        reversed_chars.append(s[i])\n    \n    # Join the list of characters into a single string and return it\n    return ''.join(reversed_chars)",
    "problem": {
      "problem_id": "expanded_0161",
      "question": "Write a Python function (variant 161) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_002",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 14,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0161",
    "code": "def reverse_string(s: str) -> str:\n    # Check if the input is empty\n    if not s:\n        return \"\"\n    \n    # Initialize an empty string to store the reversed version\n    reversed_str = \"\"\n    \n    # Iterate over the string in reverse order\n    for char in s:\n        reversed_str = char + reversed_str\n    \n    return reversed_str",
    "problem": {
      "problem_id": "expanded_0161",
      "question": "Write a Python function (variant 161) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_002",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 13,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0161",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0161",
      "question": "Write a Python function (variant 161) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_002",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0161",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0161",
      "question": "Write a Python function (variant 161) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_002",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0161",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0161",
      "question": "Write a Python function (variant 161) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_002",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0161",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0161",
      "question": "Write a Python function (variant 161) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_002",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0162",
    "code": "from typing import List\n\ndef find_max(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError(\"The list cannot be empty\")\n    \n    max_element = numbers[0]\n    for number in numbers:\n        if number > max_element:\n            max_element = number\n    \n    return max_element",
    "problem": {
      "problem_id": "expanded_0162",
      "question": "Write a Python function (variant 162) that finds the maximum element in a list of integers.\n\nFunction signature: def find_max(numbers: List[int]) -> int:\n\nExample:\n- find_max([1, 3, 2]) should return 3\n- find_max([-1, -5, -2]) should return -1\n",
      "solutions": [
        "def find_max(numbers: List[int]) -> int:\n    return max(numbers)"
      ],
      "starter_code": "def find_max(numbers: List[int]) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "[1, 3, 2]"
          ],
          [
            "[-1, -5, -2]"
          ],
          [
            "[42]"
          ],
          [
            "[0, 0, 0]"
          ],
          [
            "[100, 99, 101, 50]"
          ]
        ],
        "outputs": [
          "3",
          "-1",
          "42",
          "0",
          "101"
        ]
      },
      "difficulty": "interview",
      "url": "synthetic://test_003",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0162",
    "code": "from typing import List\n\ndef find_max(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError(\"The list cannot be empty\")\n    \n    max_element = numbers[0]\n    for number in numbers:\n        if number > max_element:\n            max_element = number\n    \n    return max_element",
    "problem": {
      "problem_id": "expanded_0162",
      "question": "Write a Python function (variant 162) that finds the maximum element in a list of integers.\n\nFunction signature: def find_max(numbers: List[int]) -> int:\n\nExample:\n- find_max([1, 3, 2]) should return 3\n- find_max([-1, -5, -2]) should return -1\n",
      "solutions": [
        "def find_max(numbers: List[int]) -> int:\n    return max(numbers)"
      ],
      "starter_code": "def find_max(numbers: List[int]) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "[1, 3, 2]"
          ],
          [
            "[-1, -5, -2]"
          ],
          [
            "[42]"
          ],
          [
            "[0, 0, 0]"
          ],
          [
            "[100, 99, 101, 50]"
          ]
        ],
        "outputs": [
          "3",
          "-1",
          "42",
          "0",
          "101"
        ]
      },
      "difficulty": "interview",
      "url": "synthetic://test_003",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0162",
    "code": "from typing import List\n\ndef find_max(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError(\"The list cannot be empty\")\n    \n    max_element = numbers[0]\n    for number in numbers:\n        if number > max_element:\n            max_element = number\n    \n    return max_element",
    "problem": {
      "problem_id": "expanded_0162",
      "question": "Write a Python function (variant 162) that finds the maximum element in a list of integers.\n\nFunction signature: def find_max(numbers: List[int]) -> int:\n\nExample:\n- find_max([1, 3, 2]) should return 3\n- find_max([-1, -5, -2]) should return -1\n",
      "solutions": [
        "def find_max(numbers: List[int]) -> int:\n    return max(numbers)"
      ],
      "starter_code": "def find_max(numbers: List[int]) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "[1, 3, 2]"
          ],
          [
            "[-1, -5, -2]"
          ],
          [
            "[42]"
          ],
          [
            "[0, 0, 0]"
          ],
          [
            "[100, 99, 101, 50]"
          ]
        ],
        "outputs": [
          "3",
          "-1",
          "42",
          "0",
          "101"
        ]
      },
      "difficulty": "interview",
      "url": "synthetic://test_003",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0162",
    "code": "from typing import List\n\ndef find_max(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError(\"The list cannot be empty\")\n    \n    max_element = numbers[0]\n    for number in numbers[1:]:\n        if number > max_element:\n            max_element = number\n    \n    return max_element",
    "problem": {
      "problem_id": "expanded_0162",
      "question": "Write a Python function (variant 162) that finds the maximum element in a list of integers.\n\nFunction signature: def find_max(numbers: List[int]) -> int:\n\nExample:\n- find_max([1, 3, 2]) should return 3\n- find_max([-1, -5, -2]) should return -1\n",
      "solutions": [
        "def find_max(numbers: List[int]) -> int:\n    return max(numbers)"
      ],
      "starter_code": "def find_max(numbers: List[int]) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "[1, 3, 2]"
          ],
          [
            "[-1, -5, -2]"
          ],
          [
            "[42]"
          ],
          [
            "[0, 0, 0]"
          ],
          [
            "[100, 99, 101, 50]"
          ]
        ],
        "outputs": [
          "3",
          "-1",
          "42",
          "0",
          "101"
        ]
      },
      "difficulty": "interview",
      "url": "synthetic://test_003",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0162",
    "code": "from typing import List\n\ndef find_max(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError(\"The list cannot be empty\")\n    \n    max_element = numbers[0]\n    for number in numbers:\n        if number > max_element:\n            max_element = number\n    \n    return max_element",
    "problem": {
      "problem_id": "expanded_0162",
      "question": "Write a Python function (variant 162) that finds the maximum element in a list of integers.\n\nFunction signature: def find_max(numbers: List[int]) -> int:\n\nExample:\n- find_max([1, 3, 2]) should return 3\n- find_max([-1, -5, -2]) should return -1\n",
      "solutions": [
        "def find_max(numbers: List[int]) -> int:\n    return max(numbers)"
      ],
      "starter_code": "def find_max(numbers: List[int]) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "[1, 3, 2]"
          ],
          [
            "[-1, -5, -2]"
          ],
          [
            "[42]"
          ],
          [
            "[0, 0, 0]"
          ],
          [
            "[100, 99, 101, 50]"
          ]
        ],
        "outputs": [
          "3",
          "-1",
          "42",
          "0",
          "101"
        ]
      },
      "difficulty": "interview",
      "url": "synthetic://test_003",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0162",
    "code": "from typing import List\n\ndef find_max(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError(\"The list cannot be empty\")\n    \n    max_element = numbers[0]\n    for number in numbers:\n        if number > max_element:\n            max_element = number\n    \n    return max_element",
    "problem": {
      "problem_id": "expanded_0162",
      "question": "Write a Python function (variant 162) that finds the maximum element in a list of integers.\n\nFunction signature: def find_max(numbers: List[int]) -> int:\n\nExample:\n- find_max([1, 3, 2]) should return 3\n- find_max([-1, -5, -2]) should return -1\n",
      "solutions": [
        "def find_max(numbers: List[int]) -> int:\n    return max(numbers)"
      ],
      "starter_code": "def find_max(numbers: List[int]) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "[1, 3, 2]"
          ],
          [
            "[-1, -5, -2]"
          ],
          [
            "[42]"
          ],
          [
            "[0, 0, 0]"
          ],
          [
            "[100, 99, 101, 50]"
          ]
        ],
        "outputs": [
          "3",
          "-1",
          "42",
          "0",
          "101"
        ]
      },
      "difficulty": "interview",
      "url": "synthetic://test_003",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0163",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0163",
      "question": "Write a Python function (variant 163) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_004",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0163",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0163",
      "question": "Write a Python function (variant 163) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_004",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0163",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0163",
      "question": "Write a Python function (variant 163) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_004",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0163",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    This function takes two integers a and b as input and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b\n\n# Example usage:\nprint(add_numbers(2, 3))  # Output: 5\nprint(add_numbers(-1, 1)) # Output: 0\nprint(add_numbers(0, 0))  # Output: 0",
    "problem": {
      "problem_id": "expanded_0163",
      "question": "Write a Python function (variant 163) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_004",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 17,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0163",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    This function takes two integers a and b as input and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of the two integers.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0163",
      "question": "Write a Python function (variant 163) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_004",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0163",
    "code": "def add_numbers(a: int, b: int) -> int:\n    return a + b",
    "problem": {
      "problem_id": "expanded_0163",
      "question": "Write a Python function (variant 163) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_004",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0164",
    "code": "def reverse_string(s: str) -> str:\n    # Check if the input is an empty string\n    if not s:\n        return \"\"\n    \n    # Reverse the string using slicing\n    reversed_s = s[::-1]\n    \n    return reversed_s",
    "problem": {
      "problem_id": "expanded_0164",
      "question": "Write a Python function (variant 164) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_005",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 9,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0164",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0164",
      "question": "Write a Python function (variant 164) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_005",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0164",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0164",
      "question": "Write a Python function (variant 164) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_005",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0164",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0164",
      "question": "Write a Python function (variant 164) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_005",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0164",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0164",
      "question": "Write a Python function (variant 164) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_005",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0164",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0164",
      "question": "Write a Python function (variant 164) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_005",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0165",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0165",
      "question": "Write a Python function (variant 165) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_001",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0165",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0165",
      "question": "Write a Python function (variant 165) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_001",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0165",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0165",
      "question": "Write a Python function (variant 165) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_001",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0165",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Returns the sum of two integers a and b.\n    \n    :param a: First integer\n    :param b: Second integer\n    :return: Sum of a and b\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0165",
      "question": "Write a Python function (variant 165) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_001",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 9,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0165",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    :param a: First integer\n    :param b: Second integer\n    :return: Sum of a and b\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0165",
      "question": "Write a Python function (variant 165) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_001",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 9,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0165",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Returns the sum of two integers a and b.\n    \n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0165",
      "question": "Write a Python function (variant 165) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_001",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0166",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0166",
      "question": "Write a Python function (variant 166) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_002",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0166",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0166",
      "question": "Write a Python function (variant 166) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_002",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0166",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0166",
      "question": "Write a Python function (variant 166) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_002",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0166",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0166",
      "question": "Write a Python function (variant 166) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_002",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0166",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0166",
      "question": "Write a Python function (variant 166) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_002",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0166",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0166",
      "question": "Write a Python function (variant 166) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_002",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0167",
    "code": "from typing import List\n\ndef find_max(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError(\"The list cannot be empty\")\n    \n    max_element = numbers[0]\n    for number in numbers:\n        if number > max_element:\n            max_element = number\n    \n    return max_element",
    "problem": {
      "problem_id": "expanded_0167",
      "question": "Write a Python function (variant 167) that finds the maximum element in a list of integers.\n\nFunction signature: def find_max(numbers: List[int]) -> int:\n\nExample:\n- find_max([1, 3, 2]) should return 3\n- find_max([-1, -5, -2]) should return -1\n",
      "solutions": [
        "def find_max(numbers: List[int]) -> int:\n    return max(numbers)"
      ],
      "starter_code": "def find_max(numbers: List[int]) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "[1, 3, 2]"
          ],
          [
            "[-1, -5, -2]"
          ],
          [
            "[42]"
          ],
          [
            "[0, 0, 0]"
          ],
          [
            "[100, 99, 101, 50]"
          ]
        ],
        "outputs": [
          "3",
          "-1",
          "42",
          "0",
          "101"
        ]
      },
      "difficulty": "interview",
      "url": "synthetic://test_003",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0167",
    "code": "from typing import List\n\ndef find_max(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError(\"The list cannot be empty\")\n    \n    max_element = numbers[0]\n    for number in numbers:\n        if number > max_element:\n            max_element = number\n    \n    return max_element",
    "problem": {
      "problem_id": "expanded_0167",
      "question": "Write a Python function (variant 167) that finds the maximum element in a list of integers.\n\nFunction signature: def find_max(numbers: List[int]) -> int:\n\nExample:\n- find_max([1, 3, 2]) should return 3\n- find_max([-1, -5, -2]) should return -1\n",
      "solutions": [
        "def find_max(numbers: List[int]) -> int:\n    return max(numbers)"
      ],
      "starter_code": "def find_max(numbers: List[int]) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "[1, 3, 2]"
          ],
          [
            "[-1, -5, -2]"
          ],
          [
            "[42]"
          ],
          [
            "[0, 0, 0]"
          ],
          [
            "[100, 99, 101, 50]"
          ]
        ],
        "outputs": [
          "3",
          "-1",
          "42",
          "0",
          "101"
        ]
      },
      "difficulty": "interview",
      "url": "synthetic://test_003",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0167",
    "code": "from typing import List\n\ndef find_max(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError(\"The list cannot be empty\")\n    \n    max_element = numbers[0]\n    for number in numbers:\n        if number > max_element:\n            max_element = number\n    \n    return max_element",
    "problem": {
      "problem_id": "expanded_0167",
      "question": "Write a Python function (variant 167) that finds the maximum element in a list of integers.\n\nFunction signature: def find_max(numbers: List[int]) -> int:\n\nExample:\n- find_max([1, 3, 2]) should return 3\n- find_max([-1, -5, -2]) should return -1\n",
      "solutions": [
        "def find_max(numbers: List[int]) -> int:\n    return max(numbers)"
      ],
      "starter_code": "def find_max(numbers: List[int]) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "[1, 3, 2]"
          ],
          [
            "[-1, -5, -2]"
          ],
          [
            "[42]"
          ],
          [
            "[0, 0, 0]"
          ],
          [
            "[100, 99, 101, 50]"
          ]
        ],
        "outputs": [
          "3",
          "-1",
          "42",
          "0",
          "101"
        ]
      },
      "difficulty": "interview",
      "url": "synthetic://test_003",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0167",
    "code": "from typing import List\n\ndef find_max(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError(\"The input list cannot be empty\")\n    \n    max_element = numbers[0]\n    for number in numbers[1:]:\n        if number > max_element:\n            max_element = number\n    \n    return max_element",
    "problem": {
      "problem_id": "expanded_0167",
      "question": "Write a Python function (variant 167) that finds the maximum element in a list of integers.\n\nFunction signature: def find_max(numbers: List[int]) -> int:\n\nExample:\n- find_max([1, 3, 2]) should return 3\n- find_max([-1, -5, -2]) should return -1\n",
      "solutions": [
        "def find_max(numbers: List[int]) -> int:\n    return max(numbers)"
      ],
      "starter_code": "def find_max(numbers: List[int]) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "[1, 3, 2]"
          ],
          [
            "[-1, -5, -2]"
          ],
          [
            "[42]"
          ],
          [
            "[0, 0, 0]"
          ],
          [
            "[100, 99, 101, 50]"
          ]
        ],
        "outputs": [
          "3",
          "-1",
          "42",
          "0",
          "101"
        ]
      },
      "difficulty": "interview",
      "url": "synthetic://test_003",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0167",
    "code": "from typing import List\n\ndef find_max(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError(\"The list cannot be empty\")\n    \n    max_element = numbers[0]\n    for number in numbers:\n        if number > max_element:\n            max_element = number\n    \n    return max_element",
    "problem": {
      "problem_id": "expanded_0167",
      "question": "Write a Python function (variant 167) that finds the maximum element in a list of integers.\n\nFunction signature: def find_max(numbers: List[int]) -> int:\n\nExample:\n- find_max([1, 3, 2]) should return 3\n- find_max([-1, -5, -2]) should return -1\n",
      "solutions": [
        "def find_max(numbers: List[int]) -> int:\n    return max(numbers)"
      ],
      "starter_code": "def find_max(numbers: List[int]) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "[1, 3, 2]"
          ],
          [
            "[-1, -5, -2]"
          ],
          [
            "[42]"
          ],
          [
            "[0, 0, 0]"
          ],
          [
            "[100, 99, 101, 50]"
          ]
        ],
        "outputs": [
          "3",
          "-1",
          "42",
          "0",
          "101"
        ]
      },
      "difficulty": "interview",
      "url": "synthetic://test_003",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0167",
    "code": "from typing import List\n\ndef find_max(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError(\"The input list cannot be empty\")\n    \n    max_element = numbers[0]\n    for number in numbers[1:]:\n        if number > max_element:\n            max_element = number\n    \n    return max_element",
    "problem": {
      "problem_id": "expanded_0167",
      "question": "Write a Python function (variant 167) that finds the maximum element in a list of integers.\n\nFunction signature: def find_max(numbers: List[int]) -> int:\n\nExample:\n- find_max([1, 3, 2]) should return 3\n- find_max([-1, -5, -2]) should return -1\n",
      "solutions": [
        "def find_max(numbers: List[int]) -> int:\n    return max(numbers)"
      ],
      "starter_code": "def find_max(numbers: List[int]) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "[1, 3, 2]"
          ],
          [
            "[-1, -5, -2]"
          ],
          [
            "[42]"
          ],
          [
            "[0, 0, 0]"
          ],
          [
            "[100, 99, 101, 50]"
          ]
        ],
        "outputs": [
          "3",
          "-1",
          "42",
          "0",
          "101"
        ]
      },
      "difficulty": "interview",
      "url": "synthetic://test_003",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0168",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0168",
      "question": "Write a Python function (variant 168) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_004",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0168",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0168",
      "question": "Write a Python function (variant 168) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_004",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0168",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0168",
      "question": "Write a Python function (variant 168) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_004",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0168",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Returns the sum of two integers a and b.\n    \n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0168",
      "question": "Write a Python function (variant 168) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_004",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0168",
    "code": "def add_numbers(a: int, b: int) -> int:\n    # Validate inputs to ensure they are integers\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both inputs must be integers\")\n    \n    # Return the sum of the two integers\n    return a + b",
    "problem": {
      "problem_id": "expanded_0168",
      "question": "Write a Python function (variant 168) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_004",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 7,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0168",
    "code": "def add_numbers(a: int, b: int) -> int:\n    return a + b",
    "problem": {
      "problem_id": "expanded_0168",
      "question": "Write a Python function (variant 168) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_004",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0169",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0169",
      "question": "Write a Python function (variant 169) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_005",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0169",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0169",
      "question": "Write a Python function (variant 169) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_005",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0169",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0169",
      "question": "Write a Python function (variant 169) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_005",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0169",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0169",
      "question": "Write a Python function (variant 169) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_005",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0169",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0169",
      "question": "Write a Python function (variant 169) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_005",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0169",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0169",
      "question": "Write a Python function (variant 169) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_005",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0170",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0170",
      "question": "Write a Python function (variant 170) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_001",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0170",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0170",
      "question": "Write a Python function (variant 170) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_001",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0170",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0170",
      "question": "Write a Python function (variant 170) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_001",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0170",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    This function takes two integers a and b as input and returns their sum.\n    \n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of the two integers.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0170",
      "question": "Write a Python function (variant 170) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_001",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0170",
    "code": "def add_numbers(a: int, b: int) -> int:\n    # Validate inputs to ensure they are integers\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both inputs must be integers\")\n    \n    # Return the sum of the two integers\n    return a + b",
    "problem": {
      "problem_id": "expanded_0170",
      "question": "Write a Python function (variant 170) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_001",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 7,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0170",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0170",
      "question": "Write a Python function (variant 170) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_001",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0171",
    "code": "def reverse_string(s: str) -> str:\n    # Check if the input is a valid string\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string\")\n    \n    # Return the reversed string using slicing\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0171",
      "question": "Write a Python function (variant 171) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_002",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 7,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0171",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0171",
      "question": "Write a Python function (variant 171) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_002",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0171",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0171",
      "question": "Write a Python function (variant 171) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_002",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0171",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0171",
      "question": "Write a Python function (variant 171) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_002",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0171",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0171",
      "question": "Write a Python function (variant 171) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_002",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0171",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0171",
      "question": "Write a Python function (variant 171) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_002",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0172",
    "code": "from typing import List\n\ndef find_max(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError(\"The list cannot be empty\")\n    \n    max_element = numbers[0]\n    for number in numbers:\n        if number > max_element:\n            max_element = number\n    \n    return max_element",
    "problem": {
      "problem_id": "expanded_0172",
      "question": "Write a Python function (variant 172) that finds the maximum element in a list of integers.\n\nFunction signature: def find_max(numbers: List[int]) -> int:\n\nExample:\n- find_max([1, 3, 2]) should return 3\n- find_max([-1, -5, -2]) should return -1\n",
      "solutions": [
        "def find_max(numbers: List[int]) -> int:\n    return max(numbers)"
      ],
      "starter_code": "def find_max(numbers: List[int]) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "[1, 3, 2]"
          ],
          [
            "[-1, -5, -2]"
          ],
          [
            "[42]"
          ],
          [
            "[0, 0, 0]"
          ],
          [
            "[100, 99, 101, 50]"
          ]
        ],
        "outputs": [
          "3",
          "-1",
          "42",
          "0",
          "101"
        ]
      },
      "difficulty": "interview",
      "url": "synthetic://test_003",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0172",
    "code": "from typing import List\n\ndef find_max(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError(\"The list cannot be empty\")\n    \n    max_element = numbers[0]\n    for number in numbers:\n        if number > max_element:\n            max_element = number\n    \n    return max_element",
    "problem": {
      "problem_id": "expanded_0172",
      "question": "Write a Python function (variant 172) that finds the maximum element in a list of integers.\n\nFunction signature: def find_max(numbers: List[int]) -> int:\n\nExample:\n- find_max([1, 3, 2]) should return 3\n- find_max([-1, -5, -2]) should return -1\n",
      "solutions": [
        "def find_max(numbers: List[int]) -> int:\n    return max(numbers)"
      ],
      "starter_code": "def find_max(numbers: List[int]) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "[1, 3, 2]"
          ],
          [
            "[-1, -5, -2]"
          ],
          [
            "[42]"
          ],
          [
            "[0, 0, 0]"
          ],
          [
            "[100, 99, 101, 50]"
          ]
        ],
        "outputs": [
          "3",
          "-1",
          "42",
          "0",
          "101"
        ]
      },
      "difficulty": "interview",
      "url": "synthetic://test_003",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0172",
    "code": "from typing import List\n\ndef find_max(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError(\"The list cannot be empty\")\n    \n    max_element = numbers[0]\n    for number in numbers:\n        if number > max_element:\n            max_element = number\n    \n    return max_element",
    "problem": {
      "problem_id": "expanded_0172",
      "question": "Write a Python function (variant 172) that finds the maximum element in a list of integers.\n\nFunction signature: def find_max(numbers: List[int]) -> int:\n\nExample:\n- find_max([1, 3, 2]) should return 3\n- find_max([-1, -5, -2]) should return -1\n",
      "solutions": [
        "def find_max(numbers: List[int]) -> int:\n    return max(numbers)"
      ],
      "starter_code": "def find_max(numbers: List[int]) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "[1, 3, 2]"
          ],
          [
            "[-1, -5, -2]"
          ],
          [
            "[42]"
          ],
          [
            "[0, 0, 0]"
          ],
          [
            "[100, 99, 101, 50]"
          ]
        ],
        "outputs": [
          "3",
          "-1",
          "42",
          "0",
          "101"
        ]
      },
      "difficulty": "interview",
      "url": "synthetic://test_003",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0172",
    "code": "from typing import List\n\ndef find_max(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError(\"The list cannot be empty\")\n    \n    max_element = numbers[0]\n    for number in numbers:\n        if number > max_element:\n            max_element = number\n    return max_element",
    "problem": {
      "problem_id": "expanded_0172",
      "question": "Write a Python function (variant 172) that finds the maximum element in a list of integers.\n\nFunction signature: def find_max(numbers: List[int]) -> int:\n\nExample:\n- find_max([1, 3, 2]) should return 3\n- find_max([-1, -5, -2]) should return -1\n",
      "solutions": [
        "def find_max(numbers: List[int]) -> int:\n    return max(numbers)"
      ],
      "starter_code": "def find_max(numbers: List[int]) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "[1, 3, 2]"
          ],
          [
            "[-1, -5, -2]"
          ],
          [
            "[42]"
          ],
          [
            "[0, 0, 0]"
          ],
          [
            "[100, 99, 101, 50]"
          ]
        ],
        "outputs": [
          "3",
          "-1",
          "42",
          "0",
          "101"
        ]
      },
      "difficulty": "interview",
      "url": "synthetic://test_003",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 11,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0172",
    "code": "from typing import List\n\ndef find_max(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError(\"The list cannot be empty\")\n    \n    max_element = numbers[0]\n    for number in numbers[1:]:\n        if number > max_element:\n            max_element = number\n    \n    return max_element",
    "problem": {
      "problem_id": "expanded_0172",
      "question": "Write a Python function (variant 172) that finds the maximum element in a list of integers.\n\nFunction signature: def find_max(numbers: List[int]) -> int:\n\nExample:\n- find_max([1, 3, 2]) should return 3\n- find_max([-1, -5, -2]) should return -1\n",
      "solutions": [
        "def find_max(numbers: List[int]) -> int:\n    return max(numbers)"
      ],
      "starter_code": "def find_max(numbers: List[int]) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "[1, 3, 2]"
          ],
          [
            "[-1, -5, -2]"
          ],
          [
            "[42]"
          ],
          [
            "[0, 0, 0]"
          ],
          [
            "[100, 99, 101, 50]"
          ]
        ],
        "outputs": [
          "3",
          "-1",
          "42",
          "0",
          "101"
        ]
      },
      "difficulty": "interview",
      "url": "synthetic://test_003",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0172",
    "code": "from typing import List\n\ndef find_max(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError(\"The list cannot be empty\")\n    \n    max_element = numbers[0]\n    for number in numbers:\n        if number > max_element:\n            max_element = number\n    \n    return max_element",
    "problem": {
      "problem_id": "expanded_0172",
      "question": "Write a Python function (variant 172) that finds the maximum element in a list of integers.\n\nFunction signature: def find_max(numbers: List[int]) -> int:\n\nExample:\n- find_max([1, 3, 2]) should return 3\n- find_max([-1, -5, -2]) should return -1\n",
      "solutions": [
        "def find_max(numbers: List[int]) -> int:\n    return max(numbers)"
      ],
      "starter_code": "def find_max(numbers: List[int]) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "[1, 3, 2]"
          ],
          [
            "[-1, -5, -2]"
          ],
          [
            "[42]"
          ],
          [
            "[0, 0, 0]"
          ],
          [
            "[100, 99, 101, 50]"
          ]
        ],
        "outputs": [
          "3",
          "-1",
          "42",
          "0",
          "101"
        ]
      },
      "difficulty": "interview",
      "url": "synthetic://test_003",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0173",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0173",
      "question": "Write a Python function (variant 173) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_004",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0173",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0173",
      "question": "Write a Python function (variant 173) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_004",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0173",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0173",
      "question": "Write a Python function (variant 173) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_004",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0173",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    :param a: First integer\n    :param b: Second integer\n    :return: Sum of a and b\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0173",
      "question": "Write a Python function (variant 173) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_004",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 9,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0173",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Returns the sum of two integers a and b.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0173",
      "question": "Write a Python function (variant 173) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_004",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0173",
    "code": "def add_numbers(a: int, b: int) -> int:\n    # Validate inputs to ensure they are integers\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both inputs must be integers\")\n    \n    # Return the sum of the two integers\n    return a + b",
    "problem": {
      "problem_id": "expanded_0173",
      "question": "Write a Python function (variant 173) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_004",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 7,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0174",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0174",
      "question": "Write a Python function (variant 174) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_005",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0174",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0174",
      "question": "Write a Python function (variant 174) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_005",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0174",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0174",
      "question": "Write a Python function (variant 174) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_005",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0174",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0174",
      "question": "Write a Python function (variant 174) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_005",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0174",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0174",
      "question": "Write a Python function (variant 174) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_005",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0174",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0174",
      "question": "Write a Python function (variant 174) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_005",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0175",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0175",
      "question": "Write a Python function (variant 175) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_001",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0175",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0175",
      "question": "Write a Python function (variant 175) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_001",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0175",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0175",
      "question": "Write a Python function (variant 175) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_001",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0175",
    "code": "def add_numbers(a: int, b: int) -> int:\n    # Validate inputs to ensure they are integers\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both inputs must be integers\")\n    \n    # Return the sum of the two integers\n    return a + b",
    "problem": {
      "problem_id": "expanded_0175",
      "question": "Write a Python function (variant 175) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_001",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 7,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0175",
    "code": "def add_numbers(a: int, b: int) -> int:\n    # Validate inputs\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both inputs must be integers\")\n    \n    # Return the sum of a and b\n    return a + b",
    "problem": {
      "problem_id": "expanded_0175",
      "question": "Write a Python function (variant 175) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_001",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 7,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0175",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0175",
      "question": "Write a Python function (variant 175) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_001",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0176",
    "code": "def reverse_string(s: str) -> str:\n    # Check if the input is an empty string\n    if not s:\n        return \"\"\n    \n    # Initialize an empty list to store the characters of the reversed string\n    reversed_chars = []\n    \n    # Iterate over the string in reverse order\n    for i in range(len(s) - 1, -1, -1):\n        reversed_chars.append(s[i])\n    \n    # Join the list of characters into a single string and return it\n    return ''.join(reversed_chars)",
    "problem": {
      "problem_id": "expanded_0176",
      "question": "Write a Python function (variant 176) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_002",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 14,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0176",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0176",
      "question": "Write a Python function (variant 176) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_002",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0176",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0176",
      "question": "Write a Python function (variant 176) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_002",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0176",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0176",
      "question": "Write a Python function (variant 176) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_002",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0176",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0176",
      "question": "Write a Python function (variant 176) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_002",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0176",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0176",
      "question": "Write a Python function (variant 176) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_002",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0177",
    "code": "from typing import List\n\ndef find_max(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError(\"The list cannot be empty\")\n    \n    max_element = numbers[0]\n    for number in numbers:\n        if number > max_element:\n            max_element = number\n    \n    return max_element",
    "problem": {
      "problem_id": "expanded_0177",
      "question": "Write a Python function (variant 177) that finds the maximum element in a list of integers.\n\nFunction signature: def find_max(numbers: List[int]) -> int:\n\nExample:\n- find_max([1, 3, 2]) should return 3\n- find_max([-1, -5, -2]) should return -1\n",
      "solutions": [
        "def find_max(numbers: List[int]) -> int:\n    return max(numbers)"
      ],
      "starter_code": "def find_max(numbers: List[int]) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "[1, 3, 2]"
          ],
          [
            "[-1, -5, -2]"
          ],
          [
            "[42]"
          ],
          [
            "[0, 0, 0]"
          ],
          [
            "[100, 99, 101, 50]"
          ]
        ],
        "outputs": [
          "3",
          "-1",
          "42",
          "0",
          "101"
        ]
      },
      "difficulty": "interview",
      "url": "synthetic://test_003",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0177",
    "code": "from typing import List\n\ndef find_max(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError(\"The list cannot be empty\")\n    \n    max_element = numbers[0]\n    for number in numbers:\n        if number > max_element:\n            max_element = number\n    \n    return max_element",
    "problem": {
      "problem_id": "expanded_0177",
      "question": "Write a Python function (variant 177) that finds the maximum element in a list of integers.\n\nFunction signature: def find_max(numbers: List[int]) -> int:\n\nExample:\n- find_max([1, 3, 2]) should return 3\n- find_max([-1, -5, -2]) should return -1\n",
      "solutions": [
        "def find_max(numbers: List[int]) -> int:\n    return max(numbers)"
      ],
      "starter_code": "def find_max(numbers: List[int]) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "[1, 3, 2]"
          ],
          [
            "[-1, -5, -2]"
          ],
          [
            "[42]"
          ],
          [
            "[0, 0, 0]"
          ],
          [
            "[100, 99, 101, 50]"
          ]
        ],
        "outputs": [
          "3",
          "-1",
          "42",
          "0",
          "101"
        ]
      },
      "difficulty": "interview",
      "url": "synthetic://test_003",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0177",
    "code": "from typing import List\n\ndef find_max(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError(\"The list cannot be empty\")\n    \n    max_element = numbers[0]\n    for number in numbers:\n        if number > max_element:\n            max_element = number\n    \n    return max_element",
    "problem": {
      "problem_id": "expanded_0177",
      "question": "Write a Python function (variant 177) that finds the maximum element in a list of integers.\n\nFunction signature: def find_max(numbers: List[int]) -> int:\n\nExample:\n- find_max([1, 3, 2]) should return 3\n- find_max([-1, -5, -2]) should return -1\n",
      "solutions": [
        "def find_max(numbers: List[int]) -> int:\n    return max(numbers)"
      ],
      "starter_code": "def find_max(numbers: List[int]) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "[1, 3, 2]"
          ],
          [
            "[-1, -5, -2]"
          ],
          [
            "[42]"
          ],
          [
            "[0, 0, 0]"
          ],
          [
            "[100, 99, 101, 50]"
          ]
        ],
        "outputs": [
          "3",
          "-1",
          "42",
          "0",
          "101"
        ]
      },
      "difficulty": "interview",
      "url": "synthetic://test_003",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0177",
    "code": "from typing import List\n\ndef find_max(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError(\"The list cannot be empty\")\n    \n    max_element = numbers[0]\n    for number in numbers:\n        if number > max_element:\n            max_element = number\n    return max_element",
    "problem": {
      "problem_id": "expanded_0177",
      "question": "Write a Python function (variant 177) that finds the maximum element in a list of integers.\n\nFunction signature: def find_max(numbers: List[int]) -> int:\n\nExample:\n- find_max([1, 3, 2]) should return 3\n- find_max([-1, -5, -2]) should return -1\n",
      "solutions": [
        "def find_max(numbers: List[int]) -> int:\n    return max(numbers)"
      ],
      "starter_code": "def find_max(numbers: List[int]) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "[1, 3, 2]"
          ],
          [
            "[-1, -5, -2]"
          ],
          [
            "[42]"
          ],
          [
            "[0, 0, 0]"
          ],
          [
            "[100, 99, 101, 50]"
          ]
        ],
        "outputs": [
          "3",
          "-1",
          "42",
          "0",
          "101"
        ]
      },
      "difficulty": "interview",
      "url": "synthetic://test_003",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 11,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0177",
    "code": "from typing import List\n\ndef find_max(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError(\"The list cannot be empty\")\n    \n    max_element = numbers[0]\n    for number in numbers:\n        if number > max_element:\n            max_element = number\n    \n    return max_element",
    "problem": {
      "problem_id": "expanded_0177",
      "question": "Write a Python function (variant 177) that finds the maximum element in a list of integers.\n\nFunction signature: def find_max(numbers: List[int]) -> int:\n\nExample:\n- find_max([1, 3, 2]) should return 3\n- find_max([-1, -5, -2]) should return -1\n",
      "solutions": [
        "def find_max(numbers: List[int]) -> int:\n    return max(numbers)"
      ],
      "starter_code": "def find_max(numbers: List[int]) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "[1, 3, 2]"
          ],
          [
            "[-1, -5, -2]"
          ],
          [
            "[42]"
          ],
          [
            "[0, 0, 0]"
          ],
          [
            "[100, 99, 101, 50]"
          ]
        ],
        "outputs": [
          "3",
          "-1",
          "42",
          "0",
          "101"
        ]
      },
      "difficulty": "interview",
      "url": "synthetic://test_003",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0177",
    "code": "from typing import List\n\ndef find_max(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError(\"The input list cannot be empty\")\n    \n    max_element = numbers[0]\n    for number in numbers[1:]:\n        if number > max_element:\n            max_element = number\n    \n    return max_element",
    "problem": {
      "problem_id": "expanded_0177",
      "question": "Write a Python function (variant 177) that finds the maximum element in a list of integers.\n\nFunction signature: def find_max(numbers: List[int]) -> int:\n\nExample:\n- find_max([1, 3, 2]) should return 3\n- find_max([-1, -5, -2]) should return -1\n",
      "solutions": [
        "def find_max(numbers: List[int]) -> int:\n    return max(numbers)"
      ],
      "starter_code": "def find_max(numbers: List[int]) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "[1, 3, 2]"
          ],
          [
            "[-1, -5, -2]"
          ],
          [
            "[42]"
          ],
          [
            "[0, 0, 0]"
          ],
          [
            "[100, 99, 101, 50]"
          ]
        ],
        "outputs": [
          "3",
          "-1",
          "42",
          "0",
          "101"
        ]
      },
      "difficulty": "interview",
      "url": "synthetic://test_003",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0178",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0178",
      "question": "Write a Python function (variant 178) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_004",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0178",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0178",
      "question": "Write a Python function (variant 178) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_004",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0178",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0178",
      "question": "Write a Python function (variant 178) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_004",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0178",
    "code": "def add_numbers(a: int, b: int) -> int:\n    # Validate input types\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both inputs must be integers\")\n    \n    # Return the sum of a and b\n    return a + b",
    "problem": {
      "problem_id": "expanded_0178",
      "question": "Write a Python function (variant 178) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_004",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 7,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0178",
    "code": "def add_numbers(a: int, b: int) -> int:\n    # Validate inputs to ensure they are integers\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both inputs must be integers\")\n    \n    # Return the sum of the two integers\n    return a + b",
    "problem": {
      "problem_id": "expanded_0178",
      "question": "Write a Python function (variant 178) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_004",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 7,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0178",
    "code": "def add_numbers(a: int, b: int) -> int:\n    return a + b",
    "problem": {
      "problem_id": "expanded_0178",
      "question": "Write a Python function (variant 178) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_004",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0179",
    "code": "def reverse_string(s: str) -> str:\n    # Check if the input is a valid string\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string\")\n    \n    # Return the reversed string using slicing\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0179",
      "question": "Write a Python function (variant 179) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_005",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 7,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0179",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0179",
      "question": "Write a Python function (variant 179) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_005",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0179",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0179",
      "question": "Write a Python function (variant 179) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_005",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0179",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0179",
      "question": "Write a Python function (variant 179) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_005",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0179",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0179",
      "question": "Write a Python function (variant 179) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_005",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0179",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0179",
      "question": "Write a Python function (variant 179) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_005",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0180",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0180",
      "question": "Write a Python function (variant 180) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_001",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0180",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0180",
      "question": "Write a Python function (variant 180) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_001",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0180",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0180",
      "question": "Write a Python function (variant 180) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_001",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0180",
    "code": "def add_numbers(a: int, b: int) -> int:\n    # Validate input types\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both inputs must be integers\")\n    \n    # Return the sum of the two integers\n    return a + b",
    "problem": {
      "problem_id": "expanded_0180",
      "question": "Write a Python function (variant 180) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_001",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 7,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0180",
    "code": "def add_numbers(a: int, b: int) -> int:\n    # Validate input types\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both inputs must be integers\")\n    \n    # Return the sum of the two integers\n    return a + b",
    "problem": {
      "problem_id": "expanded_0180",
      "question": "Write a Python function (variant 180) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_001",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 7,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0180",
    "code": "def add_numbers(a: int, b: int) -> int:\n    # Validate input types\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both inputs must be integers\")\n    \n    # Return the sum of the two integers\n    return a + b",
    "problem": {
      "problem_id": "expanded_0180",
      "question": "Write a Python function (variant 180) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_001",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 7,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0181",
    "code": "def reverse_string(s: str) -> str:\n    # Check if the input is a valid string\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string\")\n    \n    # Return the reversed string using slicing\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0181",
      "question": "Write a Python function (variant 181) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_002",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 7,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0181",
    "code": "def reverse_string(s: str) -> str:\n    # Check if the input is a valid string\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string\")\n    \n    # Return the reversed string using slicing\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0181",
      "question": "Write a Python function (variant 181) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_002",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 7,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0181",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0181",
      "question": "Write a Python function (variant 181) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_002",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0181",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0181",
      "question": "Write a Python function (variant 181) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_002",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0181",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0181",
      "question": "Write a Python function (variant 181) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_002",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0181",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0181",
      "question": "Write a Python function (variant 181) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_002",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0182",
    "code": "from typing import List\n\ndef find_max(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError(\"The list cannot be empty\")\n    \n    max_element = numbers[0]\n    for number in numbers:\n        if number > max_element:\n            max_element = number\n    \n    return max_element",
    "problem": {
      "problem_id": "expanded_0182",
      "question": "Write a Python function (variant 182) that finds the maximum element in a list of integers.\n\nFunction signature: def find_max(numbers: List[int]) -> int:\n\nExample:\n- find_max([1, 3, 2]) should return 3\n- find_max([-1, -5, -2]) should return -1\n",
      "solutions": [
        "def find_max(numbers: List[int]) -> int:\n    return max(numbers)"
      ],
      "starter_code": "def find_max(numbers: List[int]) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "[1, 3, 2]"
          ],
          [
            "[-1, -5, -2]"
          ],
          [
            "[42]"
          ],
          [
            "[0, 0, 0]"
          ],
          [
            "[100, 99, 101, 50]"
          ]
        ],
        "outputs": [
          "3",
          "-1",
          "42",
          "0",
          "101"
        ]
      },
      "difficulty": "interview",
      "url": "synthetic://test_003",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0182",
    "code": "from typing import List\n\ndef find_max(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError(\"The list cannot be empty\")\n    \n    max_element = numbers[0]\n    for number in numbers:\n        if number > max_element:\n            max_element = number\n    \n    return max_element",
    "problem": {
      "problem_id": "expanded_0182",
      "question": "Write a Python function (variant 182) that finds the maximum element in a list of integers.\n\nFunction signature: def find_max(numbers: List[int]) -> int:\n\nExample:\n- find_max([1, 3, 2]) should return 3\n- find_max([-1, -5, -2]) should return -1\n",
      "solutions": [
        "def find_max(numbers: List[int]) -> int:\n    return max(numbers)"
      ],
      "starter_code": "def find_max(numbers: List[int]) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "[1, 3, 2]"
          ],
          [
            "[-1, -5, -2]"
          ],
          [
            "[42]"
          ],
          [
            "[0, 0, 0]"
          ],
          [
            "[100, 99, 101, 50]"
          ]
        ],
        "outputs": [
          "3",
          "-1",
          "42",
          "0",
          "101"
        ]
      },
      "difficulty": "interview",
      "url": "synthetic://test_003",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0182",
    "code": "from typing import List\n\ndef find_max(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError(\"The list cannot be empty\")\n    \n    max_element = numbers[0]\n    for number in numbers:\n        if number > max_element:\n            max_element = number\n    \n    return max_element",
    "problem": {
      "problem_id": "expanded_0182",
      "question": "Write a Python function (variant 182) that finds the maximum element in a list of integers.\n\nFunction signature: def find_max(numbers: List[int]) -> int:\n\nExample:\n- find_max([1, 3, 2]) should return 3\n- find_max([-1, -5, -2]) should return -1\n",
      "solutions": [
        "def find_max(numbers: List[int]) -> int:\n    return max(numbers)"
      ],
      "starter_code": "def find_max(numbers: List[int]) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "[1, 3, 2]"
          ],
          [
            "[-1, -5, -2]"
          ],
          [
            "[42]"
          ],
          [
            "[0, 0, 0]"
          ],
          [
            "[100, 99, 101, 50]"
          ]
        ],
        "outputs": [
          "3",
          "-1",
          "42",
          "0",
          "101"
        ]
      },
      "difficulty": "interview",
      "url": "synthetic://test_003",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0182",
    "code": "from typing import List\n\ndef find_max(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError(\"The list cannot be empty\")\n    \n    max_element = numbers[0]\n    for number in numbers[1:]:\n        if number > max_element:\n            max_element = number\n    \n    return max_element",
    "problem": {
      "problem_id": "expanded_0182",
      "question": "Write a Python function (variant 182) that finds the maximum element in a list of integers.\n\nFunction signature: def find_max(numbers: List[int]) -> int:\n\nExample:\n- find_max([1, 3, 2]) should return 3\n- find_max([-1, -5, -2]) should return -1\n",
      "solutions": [
        "def find_max(numbers: List[int]) -> int:\n    return max(numbers)"
      ],
      "starter_code": "def find_max(numbers: List[int]) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "[1, 3, 2]"
          ],
          [
            "[-1, -5, -2]"
          ],
          [
            "[42]"
          ],
          [
            "[0, 0, 0]"
          ],
          [
            "[100, 99, 101, 50]"
          ]
        ],
        "outputs": [
          "3",
          "-1",
          "42",
          "0",
          "101"
        ]
      },
      "difficulty": "interview",
      "url": "synthetic://test_003",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0182",
    "code": "from typing import List\n\ndef find_max(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError(\"The list cannot be empty\")\n    \n    max_element = numbers[0]\n    for number in numbers:\n        if number > max_element:\n            max_element = number\n    \n    return max_element",
    "problem": {
      "problem_id": "expanded_0182",
      "question": "Write a Python function (variant 182) that finds the maximum element in a list of integers.\n\nFunction signature: def find_max(numbers: List[int]) -> int:\n\nExample:\n- find_max([1, 3, 2]) should return 3\n- find_max([-1, -5, -2]) should return -1\n",
      "solutions": [
        "def find_max(numbers: List[int]) -> int:\n    return max(numbers)"
      ],
      "starter_code": "def find_max(numbers: List[int]) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "[1, 3, 2]"
          ],
          [
            "[-1, -5, -2]"
          ],
          [
            "[42]"
          ],
          [
            "[0, 0, 0]"
          ],
          [
            "[100, 99, 101, 50]"
          ]
        ],
        "outputs": [
          "3",
          "-1",
          "42",
          "0",
          "101"
        ]
      },
      "difficulty": "interview",
      "url": "synthetic://test_003",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0182",
    "code": "from typing import List\n\ndef find_max(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError(\"The list cannot be empty\")\n    \n    max_element = numbers[0]\n    for number in numbers[1:]:\n        if number > max_element:\n            max_element = number\n    \n    return max_element",
    "problem": {
      "problem_id": "expanded_0182",
      "question": "Write a Python function (variant 182) that finds the maximum element in a list of integers.\n\nFunction signature: def find_max(numbers: List[int]) -> int:\n\nExample:\n- find_max([1, 3, 2]) should return 3\n- find_max([-1, -5, -2]) should return -1\n",
      "solutions": [
        "def find_max(numbers: List[int]) -> int:\n    return max(numbers)"
      ],
      "starter_code": "def find_max(numbers: List[int]) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "[1, 3, 2]"
          ],
          [
            "[-1, -5, -2]"
          ],
          [
            "[42]"
          ],
          [
            "[0, 0, 0]"
          ],
          [
            "[100, 99, 101, 50]"
          ]
        ],
        "outputs": [
          "3",
          "-1",
          "42",
          "0",
          "101"
        ]
      },
      "difficulty": "interview",
      "url": "synthetic://test_003",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0183",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0183",
      "question": "Write a Python function (variant 183) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_004",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0183",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0183",
      "question": "Write a Python function (variant 183) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_004",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0183",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0183",
      "question": "Write a Python function (variant 183) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_004",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0183",
    "code": "def add_numbers(a: int, b: int) -> int:\n    # Validate inputs to ensure they are integers\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both inputs must be integers\")\n    \n    # Return the sum of the two integers\n    return a + b",
    "problem": {
      "problem_id": "expanded_0183",
      "question": "Write a Python function (variant 183) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_004",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 7,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0183",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Returns the sum of two integers a and b.\n    \n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0183",
      "question": "Write a Python function (variant 183) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_004",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0183",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0183",
      "question": "Write a Python function (variant 183) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_004",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0184",
    "code": "def reverse_string(s: str) -> str:\n    # Check if the input is a valid string\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string\")\n    \n    # Return the reversed string using slicing\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0184",
      "question": "Write a Python function (variant 184) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_005",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 7,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0184",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0184",
      "question": "Write a Python function (variant 184) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_005",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0184",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0184",
      "question": "Write a Python function (variant 184) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_005",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0184",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0184",
      "question": "Write a Python function (variant 184) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_005",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0184",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0184",
      "question": "Write a Python function (variant 184) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_005",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0184",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0184",
      "question": "Write a Python function (variant 184) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_005",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0185",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0185",
      "question": "Write a Python function (variant 185) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_001",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0185",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0185",
      "question": "Write a Python function (variant 185) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_001",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0185",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0185",
      "question": "Write a Python function (variant 185) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_001",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0185",
    "code": "def add_numbers(a: int, b: int) -> int:\n    # Validate inputs to ensure they are integers\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both inputs must be integers\")\n    \n    # Return the sum of the two integers\n    return a + b",
    "problem": {
      "problem_id": "expanded_0185",
      "question": "Write a Python function (variant 185) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_001",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 7,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0185",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    :param a: First integer\n    :param b: Second integer\n    :return: Sum of a and b\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0185",
      "question": "Write a Python function (variant 185) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_001",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 9,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0185",
    "code": "def add_numbers(a: int, b: int) -> int:\n    # Validate inputs to ensure they are integers\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both inputs must be integers\")\n    \n    # Return the sum of the two integers\n    return a + b",
    "problem": {
      "problem_id": "expanded_0185",
      "question": "Write a Python function (variant 185) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_001",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 7,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0186",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0186",
      "question": "Write a Python function (variant 186) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_002",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0186",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0186",
      "question": "Write a Python function (variant 186) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_002",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0186",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0186",
      "question": "Write a Python function (variant 186) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_002",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0186",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0186",
      "question": "Write a Python function (variant 186) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_002",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0186",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0186",
      "question": "Write a Python function (variant 186) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_002",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0186",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0186",
      "question": "Write a Python function (variant 186) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_002",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0187",
    "code": "from typing import List\n\ndef find_max(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError(\"The list cannot be empty\")\n    \n    max_element = numbers[0]\n    for number in numbers:\n        if number > max_element:\n            max_element = number\n    return max_element",
    "problem": {
      "problem_id": "expanded_0187",
      "question": "Write a Python function (variant 187) that finds the maximum element in a list of integers.\n\nFunction signature: def find_max(numbers: List[int]) -> int:\n\nExample:\n- find_max([1, 3, 2]) should return 3\n- find_max([-1, -5, -2]) should return -1\n",
      "solutions": [
        "def find_max(numbers: List[int]) -> int:\n    return max(numbers)"
      ],
      "starter_code": "def find_max(numbers: List[int]) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "[1, 3, 2]"
          ],
          [
            "[-1, -5, -2]"
          ],
          [
            "[42]"
          ],
          [
            "[0, 0, 0]"
          ],
          [
            "[100, 99, 101, 50]"
          ]
        ],
        "outputs": [
          "3",
          "-1",
          "42",
          "0",
          "101"
        ]
      },
      "difficulty": "interview",
      "url": "synthetic://test_003",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 11,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0187",
    "code": "from typing import List\n\ndef find_max(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError(\"The list cannot be empty\")\n    \n    max_element = numbers[0]\n    for number in numbers:\n        if number > max_element:\n            max_element = number\n    return max_element",
    "problem": {
      "problem_id": "expanded_0187",
      "question": "Write a Python function (variant 187) that finds the maximum element in a list of integers.\n\nFunction signature: def find_max(numbers: List[int]) -> int:\n\nExample:\n- find_max([1, 3, 2]) should return 3\n- find_max([-1, -5, -2]) should return -1\n",
      "solutions": [
        "def find_max(numbers: List[int]) -> int:\n    return max(numbers)"
      ],
      "starter_code": "def find_max(numbers: List[int]) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "[1, 3, 2]"
          ],
          [
            "[-1, -5, -2]"
          ],
          [
            "[42]"
          ],
          [
            "[0, 0, 0]"
          ],
          [
            "[100, 99, 101, 50]"
          ]
        ],
        "outputs": [
          "3",
          "-1",
          "42",
          "0",
          "101"
        ]
      },
      "difficulty": "interview",
      "url": "synthetic://test_003",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 11,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0187",
    "code": "from typing import List\n\ndef find_max(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError(\"The list cannot be empty\")\n    \n    max_element = numbers[0]\n    for number in numbers:\n        if number > max_element:\n            max_element = number\n    return max_element",
    "problem": {
      "problem_id": "expanded_0187",
      "question": "Write a Python function (variant 187) that finds the maximum element in a list of integers.\n\nFunction signature: def find_max(numbers: List[int]) -> int:\n\nExample:\n- find_max([1, 3, 2]) should return 3\n- find_max([-1, -5, -2]) should return -1\n",
      "solutions": [
        "def find_max(numbers: List[int]) -> int:\n    return max(numbers)"
      ],
      "starter_code": "def find_max(numbers: List[int]) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "[1, 3, 2]"
          ],
          [
            "[-1, -5, -2]"
          ],
          [
            "[42]"
          ],
          [
            "[0, 0, 0]"
          ],
          [
            "[100, 99, 101, 50]"
          ]
        ],
        "outputs": [
          "3",
          "-1",
          "42",
          "0",
          "101"
        ]
      },
      "difficulty": "interview",
      "url": "synthetic://test_003",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 11,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0187",
    "code": "from typing import List\n\ndef find_max(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError(\"The list cannot be empty\")\n    \n    max_element = numbers[0]\n    for number in numbers:\n        if number > max_element:\n            max_element = number\n    return max_element",
    "problem": {
      "problem_id": "expanded_0187",
      "question": "Write a Python function (variant 187) that finds the maximum element in a list of integers.\n\nFunction signature: def find_max(numbers: List[int]) -> int:\n\nExample:\n- find_max([1, 3, 2]) should return 3\n- find_max([-1, -5, -2]) should return -1\n",
      "solutions": [
        "def find_max(numbers: List[int]) -> int:\n    return max(numbers)"
      ],
      "starter_code": "def find_max(numbers: List[int]) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "[1, 3, 2]"
          ],
          [
            "[-1, -5, -2]"
          ],
          [
            "[42]"
          ],
          [
            "[0, 0, 0]"
          ],
          [
            "[100, 99, 101, 50]"
          ]
        ],
        "outputs": [
          "3",
          "-1",
          "42",
          "0",
          "101"
        ]
      },
      "difficulty": "interview",
      "url": "synthetic://test_003",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 11,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0187",
    "code": "from typing import List\n\ndef find_max(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError(\"The list cannot be empty\")\n    \n    max_element = numbers[0]\n    for number in numbers:\n        if number > max_element:\n            max_element = number\n    \n    return max_element",
    "problem": {
      "problem_id": "expanded_0187",
      "question": "Write a Python function (variant 187) that finds the maximum element in a list of integers.\n\nFunction signature: def find_max(numbers: List[int]) -> int:\n\nExample:\n- find_max([1, 3, 2]) should return 3\n- find_max([-1, -5, -2]) should return -1\n",
      "solutions": [
        "def find_max(numbers: List[int]) -> int:\n    return max(numbers)"
      ],
      "starter_code": "def find_max(numbers: List[int]) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "[1, 3, 2]"
          ],
          [
            "[-1, -5, -2]"
          ],
          [
            "[42]"
          ],
          [
            "[0, 0, 0]"
          ],
          [
            "[100, 99, 101, 50]"
          ]
        ],
        "outputs": [
          "3",
          "-1",
          "42",
          "0",
          "101"
        ]
      },
      "difficulty": "interview",
      "url": "synthetic://test_003",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0187",
    "code": "from typing import List\n\ndef find_max(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError(\"The list cannot be empty\")\n    \n    max_element = numbers[0]\n    for number in numbers[1:]:\n        if number > max_element:\n            max_element = number\n    \n    return max_element",
    "problem": {
      "problem_id": "expanded_0187",
      "question": "Write a Python function (variant 187) that finds the maximum element in a list of integers.\n\nFunction signature: def find_max(numbers: List[int]) -> int:\n\nExample:\n- find_max([1, 3, 2]) should return 3\n- find_max([-1, -5, -2]) should return -1\n",
      "solutions": [
        "def find_max(numbers: List[int]) -> int:\n    return max(numbers)"
      ],
      "starter_code": "def find_max(numbers: List[int]) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "[1, 3, 2]"
          ],
          [
            "[-1, -5, -2]"
          ],
          [
            "[42]"
          ],
          [
            "[0, 0, 0]"
          ],
          [
            "[100, 99, 101, 50]"
          ]
        ],
        "outputs": [
          "3",
          "-1",
          "42",
          "0",
          "101"
        ]
      },
      "difficulty": "interview",
      "url": "synthetic://test_003",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0188",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0188",
      "question": "Write a Python function (variant 188) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_004",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0188",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0188",
      "question": "Write a Python function (variant 188) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_004",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0188",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0188",
      "question": "Write a Python function (variant 188) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_004",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0188",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    This function takes two integers a and b as input and returns their sum.\n    \n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of the two integers.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0188",
      "question": "Write a Python function (variant 188) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_004",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0188",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Returns the sum of two integers a and b.\n    \n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0188",
      "question": "Write a Python function (variant 188) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_004",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0188",
    "code": "def add_numbers(a: int, b: int) -> int:\n    return a + b",
    "problem": {
      "problem_id": "expanded_0188",
      "question": "Write a Python function (variant 188) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_004",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0189",
    "code": "def reverse_string(s: str) -> str:\n    # Check if the input is a valid string\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string\")\n    \n    # Return the reversed string using slicing\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0189",
      "question": "Write a Python function (variant 189) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_005",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 7,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0189",
    "code": "def reverse_string(s: str) -> str:\n    # Check if the input is a valid string\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string\")\n    \n    # Return the reversed string using slicing\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0189",
      "question": "Write a Python function (variant 189) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_005",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 7,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0189",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0189",
      "question": "Write a Python function (variant 189) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_005",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0189",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0189",
      "question": "Write a Python function (variant 189) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_005",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0189",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0189",
      "question": "Write a Python function (variant 189) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_005",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0189",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0189",
      "question": "Write a Python function (variant 189) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_005",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0190",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0190",
      "question": "Write a Python function (variant 190) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_001",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0190",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0190",
      "question": "Write a Python function (variant 190) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_001",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0190",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0190",
      "question": "Write a Python function (variant 190) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_001",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0190",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Returns the sum of two integers a and b.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0190",
      "question": "Write a Python function (variant 190) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_001",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0190",
    "code": "def add_numbers(a: int, b: int) -> int:\n    # Validate inputs to ensure they are integers\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both inputs must be integers\")\n    \n    # Return the sum of the two integers\n    return a + b",
    "problem": {
      "problem_id": "expanded_0190",
      "question": "Write a Python function (variant 190) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_001",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 7,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0190",
    "code": "def add_numbers(a: int, b: int) -> int:\n    # Validate inputs to ensure they are integers\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both inputs must be integers\")\n    \n    # Return the sum of the two integers\n    return a + b",
    "problem": {
      "problem_id": "expanded_0190",
      "question": "Write a Python function (variant 190) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_001",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 7,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0191",
    "code": "def reverse_string(s: str) -> str:\n    # Check if the input is a valid string\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string\")\n    \n    # Return the reversed string using slicing\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0191",
      "question": "Write a Python function (variant 191) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_002",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 7,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0191",
    "code": "def reverse_string(s: str) -> str:\n    # Check if the input is an empty string\n    if not s:\n        return \"\"\n    \n    # Initialize an empty list to store characters of the reversed string\n    reversed_chars = []\n    \n    # Iterate over the string in reverse order\n    for char in reversed(s):\n        reversed_chars.append(char)\n    \n    # Join the list of characters into a single string and return it\n    return ''.join(reversed_chars)",
    "problem": {
      "problem_id": "expanded_0191",
      "question": "Write a Python function (variant 191) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_002",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 14,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0191",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0191",
      "question": "Write a Python function (variant 191) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_002",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0191",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0191",
      "question": "Write a Python function (variant 191) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_002",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0191",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0191",
      "question": "Write a Python function (variant 191) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_002",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0191",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0191",
      "question": "Write a Python function (variant 191) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_002",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0192",
    "code": "from typing import List\n\ndef find_max(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError(\"The list cannot be empty\")\n    \n    max_element = numbers[0]\n    for number in numbers:\n        if number > max_element:\n            max_element = number\n    \n    return max_element",
    "problem": {
      "problem_id": "expanded_0192",
      "question": "Write a Python function (variant 192) that finds the maximum element in a list of integers.\n\nFunction signature: def find_max(numbers: List[int]) -> int:\n\nExample:\n- find_max([1, 3, 2]) should return 3\n- find_max([-1, -5, -2]) should return -1\n",
      "solutions": [
        "def find_max(numbers: List[int]) -> int:\n    return max(numbers)"
      ],
      "starter_code": "def find_max(numbers: List[int]) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "[1, 3, 2]"
          ],
          [
            "[-1, -5, -2]"
          ],
          [
            "[42]"
          ],
          [
            "[0, 0, 0]"
          ],
          [
            "[100, 99, 101, 50]"
          ]
        ],
        "outputs": [
          "3",
          "-1",
          "42",
          "0",
          "101"
        ]
      },
      "difficulty": "interview",
      "url": "synthetic://test_003",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0192",
    "code": "from typing import List\n\ndef find_max(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError(\"The list cannot be empty\")\n    \n    max_element = numbers[0]\n    for number in numbers:\n        if number > max_element:\n            max_element = number\n    \n    return max_element",
    "problem": {
      "problem_id": "expanded_0192",
      "question": "Write a Python function (variant 192) that finds the maximum element in a list of integers.\n\nFunction signature: def find_max(numbers: List[int]) -> int:\n\nExample:\n- find_max([1, 3, 2]) should return 3\n- find_max([-1, -5, -2]) should return -1\n",
      "solutions": [
        "def find_max(numbers: List[int]) -> int:\n    return max(numbers)"
      ],
      "starter_code": "def find_max(numbers: List[int]) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "[1, 3, 2]"
          ],
          [
            "[-1, -5, -2]"
          ],
          [
            "[42]"
          ],
          [
            "[0, 0, 0]"
          ],
          [
            "[100, 99, 101, 50]"
          ]
        ],
        "outputs": [
          "3",
          "-1",
          "42",
          "0",
          "101"
        ]
      },
      "difficulty": "interview",
      "url": "synthetic://test_003",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0192",
    "code": "from typing import List\n\ndef find_max(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError(\"The list cannot be empty\")\n    \n    max_element = numbers[0]\n    for number in numbers:\n        if number > max_element:\n            max_element = number\n    \n    return max_element",
    "problem": {
      "problem_id": "expanded_0192",
      "question": "Write a Python function (variant 192) that finds the maximum element in a list of integers.\n\nFunction signature: def find_max(numbers: List[int]) -> int:\n\nExample:\n- find_max([1, 3, 2]) should return 3\n- find_max([-1, -5, -2]) should return -1\n",
      "solutions": [
        "def find_max(numbers: List[int]) -> int:\n    return max(numbers)"
      ],
      "starter_code": "def find_max(numbers: List[int]) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "[1, 3, 2]"
          ],
          [
            "[-1, -5, -2]"
          ],
          [
            "[42]"
          ],
          [
            "[0, 0, 0]"
          ],
          [
            "[100, 99, 101, 50]"
          ]
        ],
        "outputs": [
          "3",
          "-1",
          "42",
          "0",
          "101"
        ]
      },
      "difficulty": "interview",
      "url": "synthetic://test_003",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0192",
    "code": "from typing import List\n\ndef find_max(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError(\"The list cannot be empty\")\n    \n    max_element = numbers[0]\n    for number in numbers:\n        if number > max_element:\n            max_element = number\n    return max_element",
    "problem": {
      "problem_id": "expanded_0192",
      "question": "Write a Python function (variant 192) that finds the maximum element in a list of integers.\n\nFunction signature: def find_max(numbers: List[int]) -> int:\n\nExample:\n- find_max([1, 3, 2]) should return 3\n- find_max([-1, -5, -2]) should return -1\n",
      "solutions": [
        "def find_max(numbers: List[int]) -> int:\n    return max(numbers)"
      ],
      "starter_code": "def find_max(numbers: List[int]) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "[1, 3, 2]"
          ],
          [
            "[-1, -5, -2]"
          ],
          [
            "[42]"
          ],
          [
            "[0, 0, 0]"
          ],
          [
            "[100, 99, 101, 50]"
          ]
        ],
        "outputs": [
          "3",
          "-1",
          "42",
          "0",
          "101"
        ]
      },
      "difficulty": "interview",
      "url": "synthetic://test_003",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 11,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0192",
    "code": "from typing import List\n\ndef find_max(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError(\"The input list cannot be empty\")\n    \n    max_element = numbers[0]\n    for number in numbers[1:]:\n        if number > max_element:\n            max_element = number\n    \n    return max_element",
    "problem": {
      "problem_id": "expanded_0192",
      "question": "Write a Python function (variant 192) that finds the maximum element in a list of integers.\n\nFunction signature: def find_max(numbers: List[int]) -> int:\n\nExample:\n- find_max([1, 3, 2]) should return 3\n- find_max([-1, -5, -2]) should return -1\n",
      "solutions": [
        "def find_max(numbers: List[int]) -> int:\n    return max(numbers)"
      ],
      "starter_code": "def find_max(numbers: List[int]) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "[1, 3, 2]"
          ],
          [
            "[-1, -5, -2]"
          ],
          [
            "[42]"
          ],
          [
            "[0, 0, 0]"
          ],
          [
            "[100, 99, 101, 50]"
          ]
        ],
        "outputs": [
          "3",
          "-1",
          "42",
          "0",
          "101"
        ]
      },
      "difficulty": "interview",
      "url": "synthetic://test_003",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0192",
    "code": "from typing import List\n\ndef find_max(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError(\"The list cannot be empty\")\n    \n    max_element = numbers[0]\n    for number in numbers[1:]:\n        if number > max_element:\n            max_element = number\n    \n    return max_element",
    "problem": {
      "problem_id": "expanded_0192",
      "question": "Write a Python function (variant 192) that finds the maximum element in a list of integers.\n\nFunction signature: def find_max(numbers: List[int]) -> int:\n\nExample:\n- find_max([1, 3, 2]) should return 3\n- find_max([-1, -5, -2]) should return -1\n",
      "solutions": [
        "def find_max(numbers: List[int]) -> int:\n    return max(numbers)"
      ],
      "starter_code": "def find_max(numbers: List[int]) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "[1, 3, 2]"
          ],
          [
            "[-1, -5, -2]"
          ],
          [
            "[42]"
          ],
          [
            "[0, 0, 0]"
          ],
          [
            "[100, 99, 101, 50]"
          ]
        ],
        "outputs": [
          "3",
          "-1",
          "42",
          "0",
          "101"
        ]
      },
      "difficulty": "interview",
      "url": "synthetic://test_003",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0193",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0193",
      "question": "Write a Python function (variant 193) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_004",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0193",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0193",
      "question": "Write a Python function (variant 193) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_004",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0193",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0193",
      "question": "Write a Python function (variant 193) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_004",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0193",
    "code": "def add_numbers(a: int, b: int) -> int:\n    # Validate inputs to ensure they are integers\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both inputs must be integers\")\n    \n    # Return the sum of the two integers\n    return a + b",
    "problem": {
      "problem_id": "expanded_0193",
      "question": "Write a Python function (variant 193) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_004",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 7,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0193",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0193",
      "question": "Write a Python function (variant 193) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_004",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0193",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0193",
      "question": "Write a Python function (variant 193) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_004",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0194",
    "code": "def reverse_string(s: str) -> str:\n    # Check if the input is a valid string\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string\")\n    \n    # Return the reversed string using slicing\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0194",
      "question": "Write a Python function (variant 194) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_005",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 7,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0194",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0194",
      "question": "Write a Python function (variant 194) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_005",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0194",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0194",
      "question": "Write a Python function (variant 194) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_005",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0194",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0194",
      "question": "Write a Python function (variant 194) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_005",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0194",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0194",
      "question": "Write a Python function (variant 194) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_005",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0194",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0194",
      "question": "Write a Python function (variant 194) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_005",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0195",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0195",
      "question": "Write a Python function (variant 195) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_001",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0195",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0195",
      "question": "Write a Python function (variant 195) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_001",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0195",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0195",
      "question": "Write a Python function (variant 195) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_001",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0195",
    "code": "def add_numbers(a: int, b: int) -> int:\n    # This function takes two integers as input and returns their sum.\n    return a + b",
    "problem": {
      "problem_id": "expanded_0195",
      "question": "Write a Python function (variant 195) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_001",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7,
    "true_score": 0.7,
    "generation_temperature": 0.5,
    "solution_length": 3,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0195",
    "code": "def add_numbers(a: int, b: int) -> int:\n    # This function takes two integers as input and returns their sum.\n    return a + b",
    "problem": {
      "problem_id": "expanded_0195",
      "question": "Write a Python function (variant 195) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_001",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7,
    "true_score": 0.7,
    "generation_temperature": 0.5,
    "solution_length": 3,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0195",
    "code": "def add_numbers(a: int, b: int) -> int:\n    return a + b",
    "problem": {
      "problem_id": "expanded_0195",
      "question": "Write a Python function (variant 195) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_001",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0196",
    "code": "def reverse_string(s: str) -> str:\n    # Check if the input is an empty string\n    if not s:\n        return \"\"\n    \n    # Initialize an empty list to store the characters of the reversed string\n    reversed_chars = []\n    \n    # Iterate over the string in reverse order and append each character to the list\n    for char in reversed(s):\n        reversed_chars.append(char)\n    \n    # Join the list of characters into a single string and return it\n    return ''.join(reversed_chars)",
    "problem": {
      "problem_id": "expanded_0196",
      "question": "Write a Python function (variant 196) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_002",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 14,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0196",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0196",
      "question": "Write a Python function (variant 196) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_002",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0196",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0196",
      "question": "Write a Python function (variant 196) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_002",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0196",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0196",
      "question": "Write a Python function (variant 196) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_002",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0196",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0196",
      "question": "Write a Python function (variant 196) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_002",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0196",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0196",
      "question": "Write a Python function (variant 196) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_002",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0197",
    "code": "from typing import List\n\ndef find_max(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError(\"The list cannot be empty\")\n    \n    max_element = numbers[0]\n    for number in numbers:\n        if number > max_element:\n            max_element = number\n    \n    return max_element",
    "problem": {
      "problem_id": "expanded_0197",
      "question": "Write a Python function (variant 197) that finds the maximum element in a list of integers.\n\nFunction signature: def find_max(numbers: List[int]) -> int:\n\nExample:\n- find_max([1, 3, 2]) should return 3\n- find_max([-1, -5, -2]) should return -1\n",
      "solutions": [
        "def find_max(numbers: List[int]) -> int:\n    return max(numbers)"
      ],
      "starter_code": "def find_max(numbers: List[int]) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "[1, 3, 2]"
          ],
          [
            "[-1, -5, -2]"
          ],
          [
            "[42]"
          ],
          [
            "[0, 0, 0]"
          ],
          [
            "[100, 99, 101, 50]"
          ]
        ],
        "outputs": [
          "3",
          "-1",
          "42",
          "0",
          "101"
        ]
      },
      "difficulty": "interview",
      "url": "synthetic://test_003",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0197",
    "code": "from typing import List\n\ndef find_max(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError(\"The list cannot be empty\")\n    \n    max_element = numbers[0]\n    for number in numbers:\n        if number > max_element:\n            max_element = number\n    \n    return max_element",
    "problem": {
      "problem_id": "expanded_0197",
      "question": "Write a Python function (variant 197) that finds the maximum element in a list of integers.\n\nFunction signature: def find_max(numbers: List[int]) -> int:\n\nExample:\n- find_max([1, 3, 2]) should return 3\n- find_max([-1, -5, -2]) should return -1\n",
      "solutions": [
        "def find_max(numbers: List[int]) -> int:\n    return max(numbers)"
      ],
      "starter_code": "def find_max(numbers: List[int]) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "[1, 3, 2]"
          ],
          [
            "[-1, -5, -2]"
          ],
          [
            "[42]"
          ],
          [
            "[0, 0, 0]"
          ],
          [
            "[100, 99, 101, 50]"
          ]
        ],
        "outputs": [
          "3",
          "-1",
          "42",
          "0",
          "101"
        ]
      },
      "difficulty": "interview",
      "url": "synthetic://test_003",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0197",
    "code": "from typing import List\n\ndef find_max(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError(\"The list cannot be empty\")\n    \n    max_element = numbers[0]\n    for number in numbers:\n        if number > max_element:\n            max_element = number\n    \n    return max_element",
    "problem": {
      "problem_id": "expanded_0197",
      "question": "Write a Python function (variant 197) that finds the maximum element in a list of integers.\n\nFunction signature: def find_max(numbers: List[int]) -> int:\n\nExample:\n- find_max([1, 3, 2]) should return 3\n- find_max([-1, -5, -2]) should return -1\n",
      "solutions": [
        "def find_max(numbers: List[int]) -> int:\n    return max(numbers)"
      ],
      "starter_code": "def find_max(numbers: List[int]) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "[1, 3, 2]"
          ],
          [
            "[-1, -5, -2]"
          ],
          [
            "[42]"
          ],
          [
            "[0, 0, 0]"
          ],
          [
            "[100, 99, 101, 50]"
          ]
        ],
        "outputs": [
          "3",
          "-1",
          "42",
          "0",
          "101"
        ]
      },
      "difficulty": "interview",
      "url": "synthetic://test_003",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0197",
    "code": "from typing import List\n\ndef find_max(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError(\"The list cannot be empty\")\n    \n    max_element = numbers[0]\n    for number in numbers:\n        if number > max_element:\n            max_element = number\n    return max_element",
    "problem": {
      "problem_id": "expanded_0197",
      "question": "Write a Python function (variant 197) that finds the maximum element in a list of integers.\n\nFunction signature: def find_max(numbers: List[int]) -> int:\n\nExample:\n- find_max([1, 3, 2]) should return 3\n- find_max([-1, -5, -2]) should return -1\n",
      "solutions": [
        "def find_max(numbers: List[int]) -> int:\n    return max(numbers)"
      ],
      "starter_code": "def find_max(numbers: List[int]) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "[1, 3, 2]"
          ],
          [
            "[-1, -5, -2]"
          ],
          [
            "[42]"
          ],
          [
            "[0, 0, 0]"
          ],
          [
            "[100, 99, 101, 50]"
          ]
        ],
        "outputs": [
          "3",
          "-1",
          "42",
          "0",
          "101"
        ]
      },
      "difficulty": "interview",
      "url": "synthetic://test_003",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 11,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0197",
    "code": "from typing import List\n\ndef find_max(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError(\"The list cannot be empty\")\n    \n    max_element = numbers[0]\n    for number in numbers:\n        if number > max_element:\n            max_element = number\n    \n    return max_element",
    "problem": {
      "problem_id": "expanded_0197",
      "question": "Write a Python function (variant 197) that finds the maximum element in a list of integers.\n\nFunction signature: def find_max(numbers: List[int]) -> int:\n\nExample:\n- find_max([1, 3, 2]) should return 3\n- find_max([-1, -5, -2]) should return -1\n",
      "solutions": [
        "def find_max(numbers: List[int]) -> int:\n    return max(numbers)"
      ],
      "starter_code": "def find_max(numbers: List[int]) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "[1, 3, 2]"
          ],
          [
            "[-1, -5, -2]"
          ],
          [
            "[42]"
          ],
          [
            "[0, 0, 0]"
          ],
          [
            "[100, 99, 101, 50]"
          ]
        ],
        "outputs": [
          "3",
          "-1",
          "42",
          "0",
          "101"
        ]
      },
      "difficulty": "interview",
      "url": "synthetic://test_003",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0197",
    "code": "from typing import List\n\ndef find_max(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError(\"The list cannot be empty\")\n    \n    max_element = numbers[0]\n    for number in numbers:\n        if number > max_element:\n            max_element = number\n    \n    return max_element",
    "problem": {
      "problem_id": "expanded_0197",
      "question": "Write a Python function (variant 197) that finds the maximum element in a list of integers.\n\nFunction signature: def find_max(numbers: List[int]) -> int:\n\nExample:\n- find_max([1, 3, 2]) should return 3\n- find_max([-1, -5, -2]) should return -1\n",
      "solutions": [
        "def find_max(numbers: List[int]) -> int:\n    return max(numbers)"
      ],
      "starter_code": "def find_max(numbers: List[int]) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "[1, 3, 2]"
          ],
          [
            "[-1, -5, -2]"
          ],
          [
            "[42]"
          ],
          [
            "[0, 0, 0]"
          ],
          [
            "[100, 99, 101, 50]"
          ]
        ],
        "outputs": [
          "3",
          "-1",
          "42",
          "0",
          "101"
        ]
      },
      "difficulty": "interview",
      "url": "synthetic://test_003",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0198",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0198",
      "question": "Write a Python function (variant 198) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_004",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0198",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0198",
      "question": "Write a Python function (variant 198) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_004",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0198",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0198",
      "question": "Write a Python function (variant 198) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_004",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0198",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Returns the sum of two integers a and b.\n    \n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0198",
      "question": "Write a Python function (variant 198) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_004",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0198",
    "code": "def add_numbers(a: int, b: int) -> int:\n    \"\"\"\n    Takes two integers a and b and returns their sum.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The sum of a and b.\n    \"\"\"\n    return a + b",
    "problem": {
      "problem_id": "expanded_0198",
      "question": "Write a Python function (variant 198) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_004",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 12,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0198",
    "code": "def add_numbers(a: int, b: int) -> int:\n    # Validate inputs to ensure they are integers\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both inputs must be integers\")\n    \n    # Return the sum of the two integers\n    return a + b",
    "problem": {
      "problem_id": "expanded_0198",
      "question": "Write a Python function (variant 198) that takes two integers a and b and returns their sum.\n\nFunction signature: def add_numbers(a: int, b: int) -> int:\n\nExample:\n- add_numbers(2, 3) should return 5\n- add_numbers(-1, 1) should return 0\n",
      "solutions": [
        "def add_numbers(a: int, b: int) -> int:\n    return a + b"
      ],
      "starter_code": "def add_numbers(a: int, b: int) -> int:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "2",
            "3"
          ],
          [
            "-1",
            "1"
          ],
          [
            "0",
            "0"
          ],
          [
            "100",
            "-50"
          ],
          [
            "-10",
            "-20"
          ]
        ],
        "outputs": [
          "5",
          "0",
          "0",
          "50",
          "-30"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_004",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 7,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0199",
    "code": "def reverse_string(s: str) -> str:\n    # Check if the input is an empty string\n    if not s:\n        return \"\"\n    \n    # Reverse the string using slicing\n    reversed_s = s[::-1]\n    \n    return reversed_s",
    "problem": {
      "problem_id": "expanded_0199",
      "question": "Write a Python function (variant 199) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_005",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 9,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0199",
    "code": "def reverse_string(s: str) -> str:\n    # Check if the input is an empty string\n    if not s:\n        return \"\"\n    \n    # Initialize an empty string to store the reversed string\n    reversed_str = \"\"\n    \n    # Iterate over the string in reverse order and build the reversed string\n    for char in s:\n        reversed_str = char + reversed_str\n    \n    return reversed_str",
    "problem": {
      "problem_id": "expanded_0199",
      "question": "Write a Python function (variant 199) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_005",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.7999999999999999,
    "true_score": 0.7999999999999999,
    "generation_temperature": 0.5,
    "solution_length": 13,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0199",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0199",
      "question": "Write a Python function (variant 199) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_005",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0199",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0199",
      "question": "Write a Python function (variant 199) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_005",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0199",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0199",
      "question": "Write a Python function (variant 199) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_005",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  },
  {
    "problem_id": "expanded_0199",
    "code": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "problem": {
      "problem_id": "expanded_0199",
      "question": "Write a Python function (variant 199) that takes a string and returns its reverse.\n\nFunction signature: def reverse_string(s: str) -> str:\n\nExample:\n- reverse_string(\"hello\") should return \"olleh\"\n- reverse_string(\"\") should return \"\"\n",
      "solutions": [
        "def reverse_string(s: str) -> str:\n    return s[::-1]"
      ],
      "starter_code": "def reverse_string(s: str) -> str:\n    # Your code here\n    pass",
      "input_output": {
        "inputs": [
          [
            "hello"
          ],
          [
            ""
          ],
          [
            "a"
          ],
          [
            "abc def"
          ],
          [
            "12345"
          ]
        ],
        "outputs": [
          "olleh",
          "",
          "a",
          "fed cba",
          "54321"
        ]
      },
      "difficulty": "introductory",
      "url": "synthetic://test_005",
      "source": "synthetic",
      "test_case_count": 5
    },
    "base_score": 0.6,
    "true_score": 0.6,
    "generation_temperature": 0.5,
    "solution_length": 2,
    "syntactically_valid": false
  }
]